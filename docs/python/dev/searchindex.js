Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Array", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.activate_decimals", "reference/api/polars.Config.load", "reference/api/polars.Config.load_from_file", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.save_to_file", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_auto_structify", "reference/api/polars.Config.set_decimal_separator", "reference/api/polars.Config.set_float_precision", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_fmt_table_cell_list_len", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cell_numeric_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_thousands_separator", "reference/api/polars.Config.set_trim_decimal_zeros", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_ipc_stream", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Decimal", "reference/api/polars.Duration", "reference/api/polars.Enum", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.LazyFrame.sink_csv", "reference/api/polars.LazyFrame.sink_ipc", "reference/api/polars.LazyFrame.sink_parquet", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.register", "reference/api/polars.SQLContext.register_globals", "reference/api/polars.SQLContext.register_many", "reference/api/polars.SQLContext.tables", "reference/api/polars.SQLContext.unregister", "reference/api/polars.String", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.collect_all_async", "reference/api/polars.concat", "reference/api/polars.disable_string_cache", "reference/api/polars.enable_string_cache", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.PolarsPanicError", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_database_uri", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_ipc_stream", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_ods", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_iceberg", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.set_random_seed", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_frame_not_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.assert_series_not_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.threadpool_size", "reference/api/polars.using_string_cache", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.approx_n_unique", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.cast", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.count", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.equals", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.flags", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.gather_every", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_column_index", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.group_by", "reference/dataframe/api/polars.DataFrame.group_by_dynamic", "reference/dataframe/api/polars.DataFrame.group_by_rolling", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.insert_column", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_columns", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.map_rows", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.max_horizontal", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.mean_horizontal", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.min_horizontal", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.plot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.replace_column", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.rolling", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.rows_by_key", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.select_seq", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.sum_horizontal", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_columns_seq", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.DataFrame.with_row_index", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.apply", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/group_by", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/dataframe/plot", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.approx_n_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.all", "reference/expressions/api/polars.Expr.arr.any", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.to_list", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.get_categories", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.cbrt", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.cot", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cum_count", "reference/expressions/api/polars.Expr.cum_max", "reference/expressions/api/polars.Expr.cum_min", "reference/expressions/api/polars.Expr.cum_prod", "reference/expressions/api/polars.Expr.cum_sum", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.cut", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.total_days", "reference/expressions/api/polars.Expr.dt.total_hours", "reference/expressions/api/polars.Expr.dt.total_microseconds", "reference/expressions/api/polars.Expr.dt.total_milliseconds", "reference/expressions/api/polars.Expr.dt.total_minutes", "reference/expressions/api/polars.Expr.dt.total_nanoseconds", "reference/expressions/api/polars.Expr.dt.total_seconds", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.gather", "reference/expressions/api/polars.Expr.gather_every", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.get", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.hist", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_first_distinct", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_last", "reference/expressions/api/polars.Expr.is_last_distinct", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_match", "reference/expressions/api/polars.Expr.list.count_matches", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.drop_nulls", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.gather", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.len", "reference/expressions/api/polars.Expr.list.lengths", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.sample", "reference/expressions/api/polars.Expr.list.set_difference", "reference/expressions/api/polars.Expr.list.set_intersection", "reference/expressions/api/polars.Expr.list.set_symmetric_difference", "reference/expressions/api/polars.Expr.list.set_union", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.take", "reference/expressions/api/polars.Expr.list.to_array", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.map_batches", "reference/expressions/api/polars.Expr.map_dict", "reference/expressions/api/polars.Expr.map_elements", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.name.keep", "reference/expressions/api/polars.Expr.name.map", "reference/expressions/api/polars.Expr.name.prefix", "reference/expressions/api/polars.Expr.name.suffix", "reference/expressions/api/polars.Expr.name.to_lowercase", "reference/expressions/api/polars.Expr.name.to_uppercase", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.not_", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.peak_max", "reference/expressions/api/polars.Expr.peak_min", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.qcut", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.replace", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rle", "reference/expressions/api/polars.Expr.rle_id", "reference/expressions/api/polars.Expr.rolling", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_map", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.round_sig_figs", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.contains_any", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.count_matches", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.extract_groups", "reference/expressions/api/polars.Expr.str.json_decode", "reference/expressions/api/polars.Expr.str.json_extract", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.len_bytes", "reference/expressions/api/polars.Expr.str.len_chars", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.pad_end", "reference/expressions/api/polars.Expr.str.pad_start", "reference/expressions/api/polars.Expr.str.parse_int", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.replace_many", "reference/expressions/api/polars.Expr.str.reverse", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strip_chars", "reference/expressions/api/polars.Expr.str.strip_chars_end", "reference/expressions/api/polars.Expr.str.strip_chars_start", "reference/expressions/api/polars.Expr.str.strip_prefix", "reference/expressions/api/polars.Expr.str.strip_suffix", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_integer", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.json_encode", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.all_horizontal", "reference/expressions/api/polars.any", "reference/expressions/api/polars.any_horizontal", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.approx_n_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arctan2", "reference/expressions/api/polars.arctan2d", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cum_count", "reference/expressions/api/polars.cum_fold", "reference/expressions/api/polars.cum_reduce", "reference/expressions/api/polars.cum_sum", "reference/expressions/api/polars.cum_sum_horizontal", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.cumsum_horizontal", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.date_ranges", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.datetime_range", "reference/expressions/api/polars.datetime_ranges", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.last", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.map_batches", "reference/expressions/api/polars.map_groups", "reference/expressions/api/polars.max", "reference/expressions/api/polars.max_horizontal", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.min_horizontal", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.sum_horizontal", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.time_ranges", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/col", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/name", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cast", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.collect_async", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.count", "reference/lazyframe/api/polars.LazyFrame.deserialize", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.gather_every", "reference/lazyframe/api/polars.LazyFrame.group_by", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic", "reference/lazyframe/api/polars.LazyFrame.group_by_rolling", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.map_batches", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.rolling", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.select_seq", "reference/lazyframe/api/polars.LazyFrame.serialize", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.with_row_index", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.apply", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/group_by", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.all", "reference/series/api/polars.Series.arr.any", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.to_list", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat", "reference/series/api/polars.Series.cat.get_categories", "reference/series/api/polars.Series.cat.is_local", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.cat.to_local", "reference/series/api/polars.Series.cat.uses_lexical_ordering", "reference/series/api/polars.Series.cbrt", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cot", "reference/series/api/polars.Series.cum_max", "reference/series/api/polars.Series.cum_min", "reference/series/api/polars.Series.cum_prod", "reference/series/api/polars.Series.cum_sum", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.total_days", "reference/series/api/polars.Series.dt.total_hours", "reference/series/api/polars.Series.dt.total_microseconds", "reference/series/api/polars.Series.dt.total_milliseconds", "reference/series/api/polars.Series.dt.total_minutes", "reference/series/api/polars.Series.dt.total_nanoseconds", "reference/series/api/polars.Series.dt.total_seconds", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.equals", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.gather", "reference/series/api/polars.Series.gather_every", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_first_distinct", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_integer", "reference/series/api/polars.Series.is_last", "reference/series/api/polars.Series.is_last_distinct", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_temporal", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_match", "reference/series/api/polars.Series.list.count_matches", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.drop_nulls", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.gather", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.len", "reference/series/api/polars.Series.list.lengths", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.sample", "reference/series/api/polars.Series.list.set_difference", "reference/series/api/polars.Series.list.set_intersection", "reference/series/api/polars.Series.list.set_symmetric_difference", "reference/series/api/polars.Series.list.set_union", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.take", "reference/series/api/polars.Series.list.to_array", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.map_dict", "reference/series/api/polars.Series.map_elements", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.not_", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.plot", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.replace", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rle", "reference/series/api/polars.Series.rle_id", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_map", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.round_sig_figs", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.scatter", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.contains_any", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.count_matches", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.extract_groups", "reference/series/api/polars.Series.str.json_decode", "reference/series/api/polars.Series.str.json_extract", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.len_bytes", "reference/series/api/polars.Series.str.len_chars", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.pad_end", "reference/series/api/polars.Series.str.pad_start", "reference/series/api/polars.Series.str.parse_int", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.replace_many", "reference/series/api/polars.Series.str.reverse", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strip_chars", "reference/series/api/polars.Series.str.strip_chars_end", "reference/series/api/polars.Series.str.strip_chars_start", "reference/series/api/polars.Series.str.strip_prefix", "reference/series/api/polars.Series.str.strip_suffix", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_integer", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.json_encode", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/plot", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Array.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.activate_decimals.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.load_from_file.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.save_to_file.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_auto_structify.rst", "reference/api/polars.Config.set_decimal_separator.rst", "reference/api/polars.Config.set_float_precision.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_fmt_table_cell_list_len.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cell_numeric_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_thousands_separator.rst", "reference/api/polars.Config.set_trim_decimal_zeros.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_ipc_stream.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Decimal.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Enum.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.LazyFrame.sink_csv.rst", "reference/api/polars.LazyFrame.sink_ipc.rst", "reference/api/polars.LazyFrame.sink_parquet.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.SQLContext.register_globals.rst", "reference/api/polars.SQLContext.register_many.rst", "reference/api/polars.SQLContext.tables.rst", "reference/api/polars.SQLContext.unregister.rst", "reference/api/polars.String.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.collect_all_async.rst", "reference/api/polars.concat.rst", "reference/api/polars.disable_string_cache.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.PolarsPanicError.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_database_uri.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_ipc_stream.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_ods.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_iceberg.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.set_random_seed.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_frame_not_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.assert_series_not_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.using_string_cache.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.approx_n_unique.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.cast.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.count.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.equals.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.flags.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.gather_every.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_column_index.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.group_by.rst", "reference/dataframe/api/polars.DataFrame.group_by_dynamic.rst", "reference/dataframe/api/polars.DataFrame.group_by_rolling.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.insert_column.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_columns.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.map_rows.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.max_horizontal.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.mean_horizontal.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.min_horizontal.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.plot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.replace_column.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.rolling.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.rows_by_key.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.select_seq.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.sum_horizontal.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_columns_seq.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.DataFrame.with_row_index.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.apply.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/group_by.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/dataframe/plot.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.approx_n_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.all.rst", "reference/expressions/api/polars.Expr.arr.any.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.to_list.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.get_categories.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.cbrt.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.cot.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cum_count.rst", "reference/expressions/api/polars.Expr.cum_max.rst", "reference/expressions/api/polars.Expr.cum_min.rst", "reference/expressions/api/polars.Expr.cum_prod.rst", "reference/expressions/api/polars.Expr.cum_sum.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.cut.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.total_days.rst", "reference/expressions/api/polars.Expr.dt.total_hours.rst", "reference/expressions/api/polars.Expr.dt.total_microseconds.rst", "reference/expressions/api/polars.Expr.dt.total_milliseconds.rst", "reference/expressions/api/polars.Expr.dt.total_minutes.rst", "reference/expressions/api/polars.Expr.dt.total_nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.total_seconds.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.gather.rst", "reference/expressions/api/polars.Expr.gather_every.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.get.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.hist.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_first_distinct.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_last.rst", "reference/expressions/api/polars.Expr.is_last_distinct.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_match.rst", "reference/expressions/api/polars.Expr.list.count_matches.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.drop_nulls.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.gather.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.len.rst", "reference/expressions/api/polars.Expr.list.lengths.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.sample.rst", "reference/expressions/api/polars.Expr.list.set_difference.rst", "reference/expressions/api/polars.Expr.list.set_intersection.rst", "reference/expressions/api/polars.Expr.list.set_symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.set_union.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.take.rst", "reference/expressions/api/polars.Expr.list.to_array.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.map_batches.rst", "reference/expressions/api/polars.Expr.map_dict.rst", "reference/expressions/api/polars.Expr.map_elements.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.name.keep.rst", "reference/expressions/api/polars.Expr.name.map.rst", "reference/expressions/api/polars.Expr.name.prefix.rst", "reference/expressions/api/polars.Expr.name.suffix.rst", "reference/expressions/api/polars.Expr.name.to_lowercase.rst", "reference/expressions/api/polars.Expr.name.to_uppercase.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.not_.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.peak_max.rst", "reference/expressions/api/polars.Expr.peak_min.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.qcut.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.replace.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rle.rst", "reference/expressions/api/polars.Expr.rle_id.rst", "reference/expressions/api/polars.Expr.rolling.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_map.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.round_sig_figs.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.contains_any.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.count_matches.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.extract_groups.rst", "reference/expressions/api/polars.Expr.str.json_decode.rst", "reference/expressions/api/polars.Expr.str.json_extract.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.len_bytes.rst", "reference/expressions/api/polars.Expr.str.len_chars.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.pad_end.rst", "reference/expressions/api/polars.Expr.str.pad_start.rst", "reference/expressions/api/polars.Expr.str.parse_int.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.replace_many.rst", "reference/expressions/api/polars.Expr.str.reverse.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strip_chars.rst", "reference/expressions/api/polars.Expr.str.strip_chars_end.rst", "reference/expressions/api/polars.Expr.str.strip_chars_start.rst", "reference/expressions/api/polars.Expr.str.strip_prefix.rst", "reference/expressions/api/polars.Expr.str.strip_suffix.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_integer.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.json_encode.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.all_horizontal.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.any_horizontal.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.approx_n_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arctan2.rst", "reference/expressions/api/polars.arctan2d.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cum_count.rst", "reference/expressions/api/polars.cum_fold.rst", "reference/expressions/api/polars.cum_reduce.rst", "reference/expressions/api/polars.cum_sum.rst", "reference/expressions/api/polars.cum_sum_horizontal.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.cumsum_horizontal.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.date_ranges.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.datetime_range.rst", "reference/expressions/api/polars.datetime_ranges.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.last.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.map_batches.rst", "reference/expressions/api/polars.map_groups.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.max_horizontal.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.min_horizontal.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.sum_horizontal.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.time_ranges.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/col.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/name.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cast.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.collect_async.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.count.rst", "reference/lazyframe/api/polars.LazyFrame.deserialize.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.gather_every.rst", "reference/lazyframe/api/polars.LazyFrame.group_by.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.map_batches.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.rolling.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.select_seq.rst", "reference/lazyframe/api/polars.LazyFrame.serialize.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_index.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/group_by.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.all.rst", "reference/series/api/polars.Series.arr.any.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.to_list.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.rst", "reference/series/api/polars.Series.cat.get_categories.rst", "reference/series/api/polars.Series.cat.is_local.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.cat.to_local.rst", "reference/series/api/polars.Series.cat.uses_lexical_ordering.rst", "reference/series/api/polars.Series.cbrt.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cot.rst", "reference/series/api/polars.Series.cum_max.rst", "reference/series/api/polars.Series.cum_min.rst", "reference/series/api/polars.Series.cum_prod.rst", "reference/series/api/polars.Series.cum_sum.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.total_days.rst", "reference/series/api/polars.Series.dt.total_hours.rst", "reference/series/api/polars.Series.dt.total_microseconds.rst", "reference/series/api/polars.Series.dt.total_milliseconds.rst", "reference/series/api/polars.Series.dt.total_minutes.rst", "reference/series/api/polars.Series.dt.total_nanoseconds.rst", "reference/series/api/polars.Series.dt.total_seconds.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.equals.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.gather.rst", "reference/series/api/polars.Series.gather_every.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_first_distinct.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_integer.rst", "reference/series/api/polars.Series.is_last.rst", "reference/series/api/polars.Series.is_last_distinct.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_temporal.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_match.rst", "reference/series/api/polars.Series.list.count_matches.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.drop_nulls.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.gather.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.len.rst", "reference/series/api/polars.Series.list.lengths.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.sample.rst", "reference/series/api/polars.Series.list.set_difference.rst", "reference/series/api/polars.Series.list.set_intersection.rst", "reference/series/api/polars.Series.list.set_symmetric_difference.rst", "reference/series/api/polars.Series.list.set_union.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.take.rst", "reference/series/api/polars.Series.list.to_array.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.map_dict.rst", "reference/series/api/polars.Series.map_elements.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.not_.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.plot.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.replace.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rle.rst", "reference/series/api/polars.Series.rle_id.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_map.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.round_sig_figs.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.scatter.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.contains_any.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.count_matches.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.extract_groups.rst", "reference/series/api/polars.Series.str.json_decode.rst", "reference/series/api/polars.Series.str.json_extract.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.len_bytes.rst", "reference/series/api/polars.Series.str.len_chars.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.pad_end.rst", "reference/series/api/polars.Series.str.pad_start.rst", "reference/series/api/polars.Series.str.parse_int.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.replace_many.rst", "reference/series/api/polars.Series.str.reverse.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strip_chars.rst", "reference/series/api/polars.Series.str.strip_chars_end.rst", "reference/series/api/polars.Series.str.strip_chars_start.rst", "reference/series/api/polars.Series.str.strip_prefix.rst", "reference/series/api/polars.Series.str.strip_suffix.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_integer.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.json_encode.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/plot.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["Index", "Extending the API", "polars.Array", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.activate_decimals", "polars.Config.load", "polars.Config.load_from_file", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.save_to_file", "polars.Config.set_ascii_tables", "polars.Config.set_auto_structify", "polars.Config.set_decimal_separator", "polars.Config.set_float_precision", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_fmt_table_cell_list_len", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cell_numeric_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_thousands_separator", "polars.Config.set_trim_decimal_zeros", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_ipc_stream", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Decimal", "polars.Duration", "polars.Enum", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.LazyFrame.sink_csv", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_parquet", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "polars.String", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.collect_all_async", "polars.concat", "polars.disable_string_cache", "polars.enable_string_cache", "polars.exceptions.ArrowError", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.PolarsPanicError", "polars.exceptions.RowsError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_database_uri", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_ipc_stream", "polars.read_json", "polars.read_ndjson", "polars.read_ods", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_iceberg", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.set_random_seed", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_frame_not_equal", "polars.testing.assert_series_equal", "polars.testing.assert_series_not_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.threadpool_size", "polars.using_string_cache", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.apply", "polars.DataFrame.approx_n_unique", "polars.DataFrame.bottom_k", "polars.DataFrame.cast", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.count", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.equals", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.flags", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.gather_every", "polars.DataFrame.get_column", "polars.DataFrame.get_column_index", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.group_by", "polars.DataFrame.group_by_dynamic", "polars.DataFrame.group_by_rolling", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.insert_column", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_columns", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.map_rows", "polars.DataFrame.max", "polars.DataFrame.max_horizontal", "polars.DataFrame.mean", "polars.DataFrame.mean_horizontal", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.min_horizontal", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.plot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.replace_column", "polars.DataFrame.reverse", "polars.DataFrame.rolling", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.rows_by_key", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.select_seq", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.sum_horizontal", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_columns_seq", "polars.DataFrame.with_row_count", "polars.DataFrame.with_row_index", "polars.dataframe.group_by.GroupBy.__iter__", "polars.dataframe.group_by.GroupBy.agg", "polars.dataframe.group_by.GroupBy.all", "polars.dataframe.group_by.GroupBy.apply", "polars.dataframe.group_by.GroupBy.count", "polars.dataframe.group_by.GroupBy.first", "polars.dataframe.group_by.GroupBy.head", "polars.dataframe.group_by.GroupBy.last", "polars.dataframe.group_by.GroupBy.map_groups", "polars.dataframe.group_by.GroupBy.max", "polars.dataframe.group_by.GroupBy.mean", "polars.dataframe.group_by.GroupBy.median", "polars.dataframe.group_by.GroupBy.min", "polars.dataframe.group_by.GroupBy.n_unique", "polars.dataframe.group_by.GroupBy.quantile", "polars.dataframe.group_by.GroupBy.sum", "polars.dataframe.group_by.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Plot", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.approx_n_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.all", "polars.Expr.arr.any", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.max", "polars.Expr.arr.min", "polars.Expr.arr.reverse", "polars.Expr.arr.sort", "polars.Expr.arr.sum", "polars.Expr.arr.to_list", "polars.Expr.arr.unique", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.bottom_k", "polars.Expr.cast", "polars.Expr.cat.get_categories", "polars.Expr.cat.set_ordering", "polars.Expr.cbrt", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.cot", "polars.Expr.count", "polars.Expr.cum_count", "polars.Expr.cum_max", "polars.Expr.cum_min", "polars.Expr.cum_prod", "polars.Expr.cum_sum", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.cut", "polars.Expr.degrees", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.total_days", "polars.Expr.dt.total_hours", "polars.Expr.dt.total_microseconds", "polars.Expr.dt.total_milliseconds", "polars.Expr.dt.total_minutes", "polars.Expr.dt.total_nanoseconds", "polars.Expr.dt.total_seconds", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.gather", "polars.Expr.gather_every", "polars.Expr.ge", "polars.Expr.get", "polars.Expr.gt", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.hist", "polars.Expr.implode", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_first_distinct", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_last", "polars.Expr.is_last_distinct", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_match", "polars.Expr.list.count_matches", "polars.Expr.list.diff", "polars.Expr.list.drop_nulls", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.gather", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.len", "polars.Expr.list.lengths", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.min", "polars.Expr.list.reverse", "polars.Expr.list.sample", "polars.Expr.list.set_difference", "polars.Expr.list.set_intersection", "polars.Expr.list.set_symmetric_difference", "polars.Expr.list.set_union", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.sum", "polars.Expr.list.tail", "polars.Expr.list.take", "polars.Expr.list.to_array", "polars.Expr.list.to_struct", "polars.Expr.list.unique", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.map_batches", "polars.Expr.map_dict", "polars.Expr.map_elements", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.name.keep", "polars.Expr.name.map", "polars.Expr.name.prefix", "polars.Expr.name.suffix", "polars.Expr.name.to_lowercase", "polars.Expr.name.to_uppercase", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.not_", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.peak_max", "polars.Expr.peak_min", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.qcut", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.replace", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rle", "polars.Expr.rle_id", "polars.Expr.rolling", "polars.Expr.rolling_apply", "polars.Expr.rolling_map", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.round_sig_figs", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.contains_any", "polars.Expr.str.count_match", "polars.Expr.str.count_matches", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.extract_groups", "polars.Expr.str.json_decode", "polars.Expr.str.json_extract", "polars.Expr.str.json_path_match", "polars.Expr.str.len_bytes", "polars.Expr.str.len_chars", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.pad_end", "polars.Expr.str.pad_start", "polars.Expr.str.parse_int", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.replace_many", "polars.Expr.str.reverse", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strip_chars", "polars.Expr.str.strip_chars_end", "polars.Expr.str.strip_chars_start", "polars.Expr.str.strip_prefix", "polars.Expr.str.strip_suffix", "polars.Expr.str.strptime", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_integer", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.json_encode", "polars.Expr.struct.rename_fields", "polars.Expr.sub", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.all_horizontal", "polars.any", "polars.any_horizontal", "polars.apply", "polars.approx_n_unique", "polars.arange", "polars.arctan2", "polars.arctan2d", "polars.arg_sort_by", "polars.arg_where", "polars.coalesce", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cum_count", "polars.cum_fold", "polars.cum_reduce", "polars.cum_sum", "polars.cum_sum_horizontal", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.cumsum_horizontal", "polars.date", "polars.date_range", "polars.date_ranges", "polars.datetime", "polars.datetime_range", "polars.datetime_ranges", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.last", "polars.lit", "polars.map", "polars.map_batches", "polars.map_groups", "polars.max", "polars.max_horizontal", "polars.mean", "polars.median", "polars.min", "polars.min_horizontal", "polars.n_unique", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.sum_horizontal", "polars.tail", "polars.time", "polars.time_range", "polars.time_ranges", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "polars.col", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Name", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "API reference", "Input/output", "Aggregation", "polars.LazyFrame.approx_n_unique", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.cast", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.collect_async", "polars.LazyFrame.columns", "polars.LazyFrame.count", "polars.LazyFrame.deserialize", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.gather_every", "polars.LazyFrame.group_by", "polars.LazyFrame.group_by_dynamic", "polars.LazyFrame.group_by_rolling", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.map_batches", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.rolling", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.select_seq", "polars.LazyFrame.serialize", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_columns_seq", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.with_row_index", "polars.lazyframe.group_by.LazyGroupBy.agg", "polars.lazyframe.group_by.LazyGroupBy.all", "polars.lazyframe.group_by.LazyGroupBy.apply", "polars.lazyframe.group_by.LazyGroupBy.count", "polars.lazyframe.group_by.LazyGroupBy.first", "polars.lazyframe.group_by.LazyGroupBy.head", "polars.lazyframe.group_by.LazyGroupBy.last", "polars.lazyframe.group_by.LazyGroupBy.map_groups", "polars.lazyframe.group_by.LazyGroupBy.max", "polars.lazyframe.group_by.LazyGroupBy.mean", "polars.lazyframe.group_by.LazyGroupBy.median", "polars.lazyframe.group_by.LazyGroupBy.min", "polars.lazyframe.group_by.LazyGroupBy.n_unique", "polars.lazyframe.group_by.LazyGroupBy.quantile", "polars.lazyframe.group_by.LazyGroupBy.sum", "polars.lazyframe.group_by.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Selectors", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.all", "polars.Series.arr.any", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.max", "polars.Series.arr.min", "polars.Series.arr.reverse", "polars.Series.arr.sort", "polars.Series.arr.sum", "polars.Series.arr.to_list", "polars.Series.arr.unique", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat", "polars.Series.cat.get_categories", "polars.Series.cat.is_local", "polars.Series.cat.set_ordering", "polars.Series.cat.to_local", "polars.Series.cat.uses_lexical_ordering", "polars.Series.cbrt", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cot", "polars.Series.cum_max", "polars.Series.cum_min", "polars.Series.cum_prod", "polars.Series.cum_sum", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.total_days", "polars.Series.dt.total_hours", "polars.Series.dt.total_microseconds", "polars.Series.dt.total_milliseconds", "polars.Series.dt.total_minutes", "polars.Series.dt.total_nanoseconds", "polars.Series.dt.total_seconds", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.equals", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.gather", "polars.Series.gather_every", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_between", "polars.Series.is_boolean", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_first_distinct", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_integer", "polars.Series.is_last", "polars.Series.is_last_distinct", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_temporal", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.list", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_match", "polars.Series.list.count_matches", "polars.Series.list.diff", "polars.Series.list.drop_nulls", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.gather", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.len", "polars.Series.list.lengths", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.min", "polars.Series.list.reverse", "polars.Series.list.sample", "polars.Series.list.set_difference", "polars.Series.list.set_intersection", "polars.Series.list.set_symmetric_difference", "polars.Series.list.set_union", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.sum", "polars.Series.list.tail", "polars.Series.list.take", "polars.Series.list.to_array", "polars.Series.list.to_struct", "polars.Series.list.unique", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.map_dict", "polars.Series.map_elements", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.not_", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.plot", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.replace", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rle", "polars.Series.rle_id", "polars.Series.rolling_apply", "polars.Series.rolling_map", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.round_sig_figs", "polars.Series.sample", "polars.Series.scatter", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.contains_any", "polars.Series.str.count_match", "polars.Series.str.count_matches", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.extract_groups", "polars.Series.str.json_decode", "polars.Series.str.json_extract", "polars.Series.str.json_path_match", "polars.Series.str.len_bytes", "polars.Series.str.len_chars", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.pad_end", "polars.Series.str.pad_start", "polars.Series.str.parse_int", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.replace_many", "polars.Series.str.reverse", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strip_chars", "polars.Series.str.strip_chars_end", "polars.Series.str.strip_chars_start", "polars.Series.str.strip_prefix", "polars.Series.str.strip_suffix", "polars.Series.str.strptime", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_integer", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.json_encode", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "Plot", "String", "Struct", "Temporal", "SQL", "Testing", "Utils"], "terms": {"api": [0, 106, 136, 154, 209, 285, 299, 520, 722, 757, 855, 912, 1088, 1240], "refer": [0, 40, 115, 116, 117, 121, 122, 123, 124, 125, 126, 127, 128, 129, 162, 225, 299, 302, 406, 409, 518, 563, 611, 643, 644, 645, 649, 757, 782, 867, 976, 979, 1109, 1194, 1195, 1196, 1200, 1240, 1244], "input": [0, 80, 86, 108, 116, 117, 157, 185, 188, 209, 213, 222, 240, 241, 244, 248, 251, 263, 273, 274, 278, 299, 307, 350, 428, 452, 512, 519, 520, 529, 552, 567, 599, 639, 640, 641, 642, 673, 675, 677, 678, 680, 683, 685, 686, 687, 695, 699, 709, 716, 717, 718, 720, 721, 722, 724, 728, 736, 739, 741, 747, 757, 769, 773, 794, 797, 824, 825, 826, 828, 832, 837, 843, 844, 848, 867, 917, 1018, 1084, 1085, 1088, 1113, 1139, 1240], "output": [0, 13, 35, 37, 40, 41, 42, 43, 44, 58, 121, 155, 164, 186, 187, 189, 190, 203, 209, 213, 216, 222, 224, 234, 236, 240, 251, 269, 273, 299, 310, 312, 314, 368, 509, 516, 517, 518, 520, 528, 540, 560, 572, 577, 579, 581, 583, 602, 618, 670, 674, 676, 678, 688, 701, 702, 720, 721, 722, 757, 769, 795, 796, 798, 799, 808, 809, 813, 814, 822, 824, 826, 843, 850, 855, 867, 874, 875, 877, 933, 1088, 1107, 1153, 1169, 1228, 1240], "seri": [0, 1, 2, 16, 30, 51, 71, 72, 81, 82, 83, 84, 88, 89, 90, 105, 107, 110, 112, 139, 141, 142, 146, 166, 175, 178, 181, 183, 186, 191, 194, 195, 196, 198, 200, 202, 210, 211, 212, 213, 217, 218, 230, 231, 232, 234, 238, 250, 251, 255, 258, 261, 262, 279, 299, 313, 314, 325, 339, 346, 347, 349, 402, 431, 434, 437, 441, 442, 450, 454, 457, 458, 461, 463, 464, 465, 477, 484, 486, 507, 509, 514, 516, 518, 520, 557, 563, 564, 565, 566, 567, 568, 570, 572, 573, 574, 580, 588, 591, 602, 632, 643, 644, 645, 649, 653, 660, 661, 669, 678, 680, 684, 692, 693, 696, 697, 701, 702, 704, 705, 710, 712, 716, 717, 719, 720, 721, 722, 730, 732, 733, 736, 739, 744, 745, 748, 757, 769, 791, 795, 822, 849, 867, 1232, 1234, 1236, 1239, 1241, 1244, 1245, 1246, 1247, 1249], "datafram": [0, 1, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 80, 81, 82, 83, 84, 86, 87, 88, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 130, 133, 134, 135, 139, 140, 143, 144, 152, 297, 298, 302, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 348, 349, 350, 353, 354, 355, 356, 357, 358, 359, 360, 361, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 384, 386, 387, 388, 390, 392, 394, 395, 396, 397, 399, 400, 401, 402, 404, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 520, 521, 522, 523, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 623, 624, 626, 627, 628, 629, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 702, 706, 707, 708, 709, 710, 711, 712, 714, 716, 717, 718, 721, 722, 723, 724, 725, 726, 727, 728, 729, 732, 736, 737, 738, 739, 740, 741, 742, 745, 746, 747, 753, 757, 769, 778, 779, 783, 787, 788, 792, 795, 803, 804, 805, 806, 808, 809, 813, 814, 818, 821, 831, 838, 839, 840, 845, 848, 849, 850, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 870, 897, 899, 933, 934, 972, 1014, 1088, 1107, 1167, 1185, 1186, 1209, 1217, 1218, 1228, 1240, 1248, 1249], "lazyfram": [0, 1, 64, 65, 67, 69, 80, 81, 82, 83, 84, 86, 87, 88, 130, 131, 132, 133, 134, 135, 136, 139, 140, 146, 207, 223, 224, 299, 434, 509, 757, 769, 866, 870, 1248, 1249], "express": [0, 13, 58, 59, 60, 86, 87, 143, 146, 148, 157, 171, 173, 175, 185, 188, 209, 220, 224, 235, 240, 241, 244, 248, 263, 273, 274, 276, 278, 285, 299, 307, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 324, 325, 329, 330, 336, 339, 341, 342, 343, 350, 353, 354, 355, 356, 367, 368, 369, 371, 374, 375, 376, 377, 378, 379, 380, 382, 384, 386, 387, 388, 390, 392, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 406, 407, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 428, 430, 431, 433, 434, 438, 440, 441, 443, 444, 445, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 467, 470, 471, 475, 476, 478, 479, 480, 483, 484, 489, 491, 508, 509, 514, 515, 517, 518, 519, 520, 524, 525, 526, 527, 528, 529, 531, 533, 535, 537, 539, 540, 541, 542, 543, 544, 547, 548, 549, 551, 552, 556, 557, 558, 559, 560, 562, 566, 567, 568, 570, 586, 587, 588, 590, 592, 594, 595, 597, 599, 602, 603, 605, 606, 608, 610, 611, 612, 613, 614, 616, 617, 618, 626, 627, 632, 633, 634, 635, 647, 656, 657, 660, 662, 663, 666, 667, 669, 670, 672, 673, 674, 675, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 695, 696, 697, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 716, 717, 718, 719, 720, 721, 722, 724, 728, 730, 732, 733, 734, 735, 736, 737, 739, 741, 743, 744, 745, 747, 748, 753, 756, 769, 773, 778, 779, 786, 787, 788, 791, 794, 797, 818, 824, 825, 828, 829, 830, 832, 837, 843, 844, 845, 847, 848, 855, 867, 870, 917, 932, 942, 1002, 1018, 1051, 1052, 1055, 1088, 1113, 1133, 1139, 1140, 1154, 1156, 1157, 1162, 1163, 1164, 1165, 1167, 1177, 1178, 1240], "selector": [0, 40, 158, 165, 167, 171, 215, 222, 224, 257, 265, 267, 299, 428, 434, 708, 757, 769, 775, 783, 784, 787, 813, 838, 867], "extend": [0, 108, 271, 299, 431, 757, 769, 876, 1002, 1240], "function": [0, 40, 71, 80, 81, 82, 83, 84, 87, 89, 90, 106, 112, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 135, 139, 140, 141, 142, 144, 154, 155, 162, 170, 178, 209, 215, 223, 224, 259, 260, 264, 267, 268, 280, 285, 299, 310, 314, 367, 403, 425, 426, 427, 448, 509, 516, 517, 518, 520, 540, 552, 556, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 596, 664, 674, 678, 689, 691, 692, 693, 696, 697, 698, 699, 708, 709, 710, 712, 714, 715, 718, 720, 721, 722, 725, 726, 729, 730, 732, 738, 742, 746, 748, 753, 757, 769, 778, 779, 782, 788, 808, 809, 813, 817, 840, 847, 850, 855, 867, 877, 932, 973, 995, 996, 997, 998, 1014, 1081, 1088, 1107, 1118, 1119, 1132, 1135, 1142, 1147, 1222, 1240, 1249], "data": [0, 1, 6, 15, 23, 24, 26, 33, 36, 37, 38, 39, 40, 41, 42, 45, 46, 58, 59, 60, 64, 71, 72, 80, 81, 83, 88, 90, 95, 96, 100, 102, 105, 106, 107, 108, 109, 110, 111, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 139, 140, 141, 142, 144, 145, 146, 148, 154, 160, 172, 184, 185, 186, 187, 188, 189, 190, 203, 204, 205, 207, 209, 222, 223, 228, 234, 235, 236, 237, 246, 254, 259, 260, 264, 273, 277, 297, 299, 310, 311, 312, 316, 317, 318, 319, 320, 321, 324, 327, 328, 329, 330, 331, 332, 335, 336, 337, 339, 341, 342, 343, 345, 346, 350, 353, 354, 355, 356, 368, 369, 374, 375, 378, 379, 380, 382, 384, 386, 387, 388, 390, 392, 394, 395, 396, 397, 399, 400, 401, 403, 404, 407, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 430, 441, 443, 444, 445, 448, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 470, 471, 475, 476, 478, 484, 489, 491, 497, 508, 510, 515, 520, 547, 548, 551, 552, 560, 562, 563, 566, 567, 568, 570, 572, 575, 576, 577, 578, 579, 581, 582, 583, 584, 586, 594, 595, 596, 602, 605, 606, 608, 610, 611, 612, 613, 616, 617, 618, 632, 633, 634, 635, 643, 644, 645, 647, 649, 652, 662, 663, 664, 666, 667, 670, 673, 678, 680, 689, 700, 701, 702, 703, 704, 705, 706, 716, 717, 719, 720, 721, 722, 730, 733, 743, 744, 745, 748, 753, 757, 769, 776, 777, 778, 788, 794, 795, 796, 797, 798, 799, 817, 822, 843, 867, 874, 875, 887, 889, 890, 891, 892, 897, 898, 899, 900, 902, 906, 908, 916, 917, 920, 933, 934, 940, 941, 944, 945, 946, 948, 950, 952, 953, 957, 959, 962, 964, 965, 966, 967, 969, 970, 971, 973, 974, 977, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 1000, 1001, 1014, 1020, 1022, 1023, 1024, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1038, 1045, 1046, 1047, 1048, 1050, 1056, 1061, 1063, 1069, 1080, 1082, 1088, 1100, 1107, 1109, 1113, 1114, 1116, 1129, 1131, 1142, 1147, 1153, 1154, 1156, 1157, 1159, 1161, 1162, 1163, 1164, 1167, 1168, 1169, 1183, 1184, 1185, 1186, 1194, 1195, 1196, 1198, 1200, 1203, 1220, 1221, 1222, 1223, 1225, 1230, 1239, 1240, 1248], "type": [0, 1, 2, 3, 4, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 39, 40, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 70, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83, 84, 86, 87, 95, 105, 107, 108, 109, 110, 111, 116, 117, 118, 120, 121, 125, 126, 127, 130, 131, 132, 134, 138, 139, 140, 141, 142, 145, 146, 155, 178, 184, 186, 187, 189, 190, 191, 204, 205, 209, 234, 254, 260, 262, 265, 276, 299, 310, 312, 316, 317, 318, 319, 320, 321, 324, 329, 330, 336, 339, 341, 342, 343, 345, 346, 347, 350, 353, 354, 355, 356, 368, 369, 374, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 428, 430, 441, 444, 446, 452, 453, 454, 455, 456, 457, 458, 459, 460, 471, 475, 476, 478, 484, 489, 491, 508, 509, 520, 560, 562, 566, 567, 568, 570, 572, 594, 595, 602, 605, 606, 608, 610, 611, 612, 613, 616, 617, 618, 632, 633, 634, 635, 643, 647, 662, 663, 664, 670, 678, 680, 689, 700, 701, 702, 703, 704, 705, 706, 708, 709, 716, 717, 718, 719, 720, 721, 722, 730, 733, 743, 744, 745, 748, 753, 757, 769, 778, 779, 786, 788, 795, 796, 798, 799, 803, 818, 822, 830, 838, 847, 867, 874, 875, 887, 889, 890, 891, 892, 898, 900, 902, 906, 908, 910, 917, 933, 934, 940, 943, 944, 945, 946, 947, 948, 950, 951, 952, 953, 957, 958, 959, 960, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 977, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 991, 1000, 1012, 1020, 1022, 1023, 1024, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1038, 1045, 1046, 1047, 1048, 1050, 1056, 1061, 1063, 1080, 1081, 1100, 1107, 1113, 1114, 1116, 1142, 1153, 1154, 1156, 1157, 1159, 1161, 1162, 1163, 1164, 1167, 1168, 1169, 1183, 1184, 1185, 1186, 1194, 1198, 1220, 1221, 1223, 1231, 1240, 1248], "config": [0, 80, 240, 273, 299, 604, 628, 706, 769, 778, 824, 843, 867, 1155, 1179], "except": [0, 139, 192, 206, 208, 252, 299, 708, 769, 804, 867, 870, 1013, 1043, 1211, 1221, 1230, 1240], "test": [0, 6, 118, 119, 121, 127, 769, 800, 807, 867], "util": [0, 112, 712, 769, 788, 867], "sql": [0, 38, 64, 68, 118, 119, 205, 244, 299, 502, 589, 689, 737, 757, 769, 828, 867, 1074, 1139, 1240], "These": [1, 40, 118, 152, 264, 299, 417, 756, 757, 973, 987], "allow": [1, 13, 39, 40, 58, 59, 60, 71, 90, 95, 106, 118, 130, 133, 134, 135, 136, 146, 148, 154, 203, 206, 207, 235, 236, 238, 259, 260, 265, 277, 299, 399, 406, 409, 497, 518, 520, 565, 586, 643, 644, 645, 757, 803, 804, 808, 809, 813, 838, 845, 867, 870, 969, 976, 979, 994, 1069, 1088, 1111, 1131, 1134, 1194, 1195, 1196, 1222, 1240, 1249], "you": [1, 15, 19, 40, 45, 60, 69, 80, 87, 88, 105, 107, 108, 109, 111, 116, 117, 118, 119, 121, 122, 125, 126, 128, 130, 134, 136, 152, 172, 186, 187, 189, 190, 202, 203, 209, 220, 224, 225, 234, 235, 236, 237, 256, 259, 264, 285, 299, 302, 395, 396, 399, 402, 406, 409, 417, 428, 434, 452, 483, 509, 518, 520, 565, 571, 572, 575, 576, 577, 578, 579, 581, 582, 583, 604, 617, 628, 692, 701, 706, 710, 722, 730, 733, 748, 757, 779, 784, 795, 796, 798, 799, 800, 807, 822, 830, 855, 867, 870, 965, 966, 972, 973, 976, 979, 987, 1001, 1018, 1055, 1088, 1111, 1117, 1155, 1168, 1179, 1196, 1230, 1240, 1244, 1249], "regist": [1, 64, 66, 67, 68, 69, 81, 82, 83, 84, 147, 149, 757, 1248], "custom": [1, 32, 39, 40, 81, 82, 83, 84, 147, 148, 149, 155, 209, 280, 285, 299, 314, 406, 409, 509, 516, 518, 520, 573, 574, 678, 720, 721, 722, 757, 808, 809, 850, 855, 867, 877, 976, 979, 1081, 1088, 1118, 1119, 1240, 1249], "dedic": [1, 106, 203, 236, 299], "namespac": [1, 225, 298, 299, 756, 769, 866, 1249], "underli": [1, 71, 90, 98, 105, 107, 108, 109, 111, 118, 119, 125, 126, 128, 134, 143, 146, 148, 171, 172, 203, 204, 236, 254, 299, 340, 375, 376, 380, 384, 386, 387, 388, 390, 392, 394, 397, 400, 401, 402, 404, 418, 419, 420, 421, 565, 584, 603, 607, 757, 787, 867, 870, 901, 911, 941, 942, 946, 950, 952, 953, 957, 959, 962, 964, 967, 970, 971, 972, 974, 988, 989, 990, 991, 1001, 1111, 1129, 1142, 1154, 1158, 1216, 1221, 1240], "polar": [1, 299, 302, 756, 757, 763, 769, 867, 870, 1240, 1244, 1248], "class": [1, 2, 3, 4, 5, 22, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 61, 62, 63, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83, 84, 143, 144, 237, 260, 299, 744, 753, 757, 763, 769, 867, 1220, 1221, 1240, 1248], "without": [1, 87, 112, 120, 123, 129, 131, 132, 136, 267, 268, 299, 314, 367, 403, 448, 575, 576, 577, 578, 579, 581, 582, 583, 604, 628, 736, 757, 779, 840, 867, 909, 912, 932, 973, 1014, 1107, 1155, 1179, 1221, 1240], "requir": [1, 39, 40, 45, 60, 80, 106, 110, 118, 119, 139, 140, 141, 142, 157, 162, 235, 260, 263, 299, 337, 425, 426, 427, 510, 520, 591, 643, 644, 645, 667, 733, 757, 773, 832, 837, 867, 899, 996, 997, 998, 1082, 1141, 1194, 1195, 1196, 1221, 1222, 1225, 1240, 1244], "subclass": [1, 299], "mixin": 1, "expr": [1, 80, 81, 82, 83, 84, 171, 173, 205, 206, 220, 224, 235, 240, 241, 273, 274, 299, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 748, 749, 750, 752, 753, 757, 758, 759, 762, 763, 764, 765, 766, 787, 789, 803, 804, 819, 824, 825, 826, 829, 843, 844, 867, 932, 942, 969, 987, 1003, 1008, 1051, 1052, 1055, 1060, 1075, 1078, 1140, 1154, 1160, 1187, 1212, 1240], "ar": [1, 15, 16, 22, 25, 35, 37, 39, 40, 58, 59, 60, 69, 71, 80, 87, 88, 89, 90, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 144, 146, 152, 154, 157, 162, 167, 170, 173, 177, 178, 184, 185, 186, 187, 188, 189, 190, 203, 205, 206, 207, 209, 215, 216, 222, 224, 234, 235, 236, 237, 240, 241, 242, 244, 248, 255, 260, 263, 268, 269, 273, 274, 278, 299, 310, 312, 327, 350, 358, 360, 361, 403, 417, 422, 424, 425, 426, 427, 452, 454, 457, 458, 461, 463, 464, 465, 468, 473, 502, 509, 518, 519, 548, 552, 560, 563, 566, 567, 568, 572, 575, 576, 577, 578, 579, 580, 581, 582, 583, 589, 593, 596, 598, 599, 613, 614, 615, 616, 623, 624, 625, 647, 652, 658, 674, 675, 677, 683, 685, 686, 687, 688, 689, 691, 695, 699, 701, 702, 704, 705, 724, 728, 736, 739, 741, 744, 745, 747, 749, 750, 752, 756, 757, 758, 759, 762, 763, 764, 765, 766, 769, 773, 778, 779, 784, 788, 789, 794, 795, 796, 797, 798, 799, 800, 803, 804, 807, 809, 813, 814, 818, 820, 822, 824, 825, 827, 828, 832, 837, 840, 843, 844, 845, 848, 867, 870, 874, 875, 889, 909, 917, 926, 927, 973, 987, 993, 995, 996, 997, 998, 1011, 1018, 1022, 1026, 1027, 1031, 1032, 1033, 1034, 1041, 1045, 1074, 1081, 1107, 1109, 1113, 1114, 1125, 1139, 1144, 1147, 1164, 1165, 1166, 1174, 1175, 1176, 1196, 1198, 1203, 1210, 1222, 1230, 1232, 1234, 1236, 1240, 1241, 1245, 1246, 1247, 1249], "all": [1, 9, 13, 18, 22, 25, 30, 35, 37, 39, 40, 46, 58, 66, 80, 86, 105, 108, 110, 111, 116, 117, 120, 121, 122, 124, 127, 128, 130, 133, 134, 143, 144, 148, 152, 158, 164, 167, 174, 192, 198, 200, 202, 203, 204, 205, 207, 208, 213, 215, 219, 220, 228, 235, 236, 237, 241, 247, 251, 252, 257, 259, 265, 267, 268, 269, 274, 276, 299, 311, 313, 338, 356, 367, 372, 373, 374, 428, 433, 439, 446, 449, 451, 454, 458, 464, 465, 467, 471, 482, 483, 489, 505, 509, 517, 518, 536, 539, 540, 541, 542, 543, 544, 550, 558, 563, 567, 569, 574, 591, 597, 599, 605, 606, 612, 613, 614, 615, 616, 621, 626, 627, 631, 637, 638, 639, 640, 657, 675, 689, 692, 693, 694, 695, 698, 699, 701, 708, 710, 715, 716, 732, 739, 740, 741, 747, 757, 763, 769, 775, 778, 779, 784, 786, 788, 790, 803, 808, 809, 813, 818, 825, 830, 831, 838, 840, 844, 845, 847, 867, 870, 932, 934, 937, 938, 940, 1013, 1020, 1038, 1043, 1054, 1055, 1061, 1077, 1081, 1109, 1113, 1119, 1148, 1156, 1157, 1163, 1164, 1165, 1166, 1167, 1172, 1177, 1178, 1182, 1188, 1189, 1190, 1191, 1211, 1240, 1248, 1249], "support": [1, 39, 40, 45, 88, 105, 106, 107, 108, 109, 110, 111, 112, 118, 119, 120, 121, 125, 126, 127, 128, 131, 132, 135, 143, 148, 152, 203, 204, 205, 206, 210, 212, 217, 236, 237, 247, 248, 250, 256, 260, 299, 503, 552, 567, 597, 599, 628, 632, 753, 757, 763, 803, 804, 831, 832, 867, 870, 1075, 1113, 1148, 1179, 1183, 1222, 1240, 1248], "target": [1, 38, 39, 40, 85, 121, 299, 611, 643, 644, 645, 870, 1162, 1194, 1195, 1196], "thi": [1, 6, 9, 15, 17, 19, 35, 37, 38, 39, 40, 43, 45, 49, 51, 58, 59, 60, 64, 65, 69, 71, 80, 86, 87, 88, 90, 105, 106, 107, 108, 109, 110, 111, 112, 114, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 148, 150, 152, 154, 155, 156, 157, 160, 162, 167, 168, 170, 172, 176, 177, 178, 179, 184, 185, 186, 187, 188, 189, 190, 191, 195, 196, 198, 200, 201, 202, 203, 205, 206, 207, 209, 210, 212, 214, 215, 216, 217, 219, 220, 222, 226, 227, 228, 231, 232, 234, 235, 236, 237, 238, 240, 241, 244, 245, 247, 249, 250, 253, 254, 256, 259, 260, 263, 264, 265, 267, 268, 269, 270, 271, 273, 274, 275, 276, 280, 285, 298, 299, 310, 313, 314, 315, 324, 333, 334, 337, 344, 346, 347, 350, 362, 363, 364, 365, 366, 367, 368, 374, 375, 387, 395, 396, 399, 402, 403, 406, 409, 417, 420, 424, 430, 446, 448, 450, 451, 452, 455, 457, 459, 462, 467, 479, 483, 484, 489, 492, 497, 498, 499, 500, 501, 502, 504, 507, 509, 510, 513, 514, 516, 517, 518, 519, 520, 524, 525, 526, 527, 528, 529, 539, 541, 542, 543, 544, 545, 546, 548, 552, 558, 560, 563, 564, 565, 566, 567, 568, 571, 572, 573, 575, 576, 577, 578, 579, 581, 582, 583, 586, 588, 589, 590, 591, 592, 597, 598, 599, 604, 605, 611, 615, 619, 620, 621, 622, 623, 624, 625, 628, 630, 631, 637, 638, 639, 640, 641, 642, 646, 652, 654, 657, 660, 661, 665, 667, 668, 669, 670, 674, 678, 679, 686, 689, 691, 692, 696, 698, 699, 708, 709, 710, 712, 714, 715, 718, 720, 722, 725, 726, 729, 730, 736, 738, 742, 746, 747, 748, 753, 757, 769, 770, 772, 773, 774, 777, 778, 779, 784, 786, 788, 794, 795, 796, 797, 798, 799, 801, 803, 804, 808, 809, 813, 814, 818, 820, 822, 824, 825, 826, 828, 829, 830, 831, 832, 836, 837, 838, 840, 843, 844, 845, 846, 847, 850, 855, 866, 867, 870, 876, 877, 886, 895, 896, 899, 905, 908, 910, 911, 912, 917, 920, 928, 929, 930, 931, 932, 933, 940, 941, 942, 953, 965, 966, 969, 972, 973, 976, 979, 987, 990, 995, 1000, 1001, 1009, 1010, 1012, 1014, 1019, 1023, 1025, 1026, 1028, 1029, 1035, 1037, 1039, 1040, 1051, 1055, 1056, 1061, 1064, 1069, 1070, 1071, 1072, 1073, 1074, 1076, 1079, 1082, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1094, 1095, 1097, 1098, 1101, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1117, 1118, 1120, 1121, 1123, 1126, 1127, 1128, 1131, 1132, 1134, 1135, 1136, 1137, 1139, 1140, 1141, 1142, 1143, 1148, 1149, 1151, 1155, 1156, 1162, 1166, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1179, 1181, 1182, 1188, 1189, 1190, 1191, 1196, 1197, 1203, 1204, 1206, 1209, 1210, 1212, 1213, 1216, 1218, 1220, 1221, 1222, 1224, 1225, 1227, 1228, 1229, 1230, 1240, 1244, 1248, 1249], "featur": [1, 45, 49, 51, 85, 299], "i": [1, 6, 17, 19, 22, 37, 39, 40, 41, 42, 43, 44, 49, 51, 58, 59, 60, 64, 69, 71, 80, 85, 86, 87, 88, 90, 92, 94, 95, 97, 101, 103, 105, 106, 107, 108, 109, 110, 111, 114, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 148, 150, 151, 152, 156, 157, 160, 164, 167, 169, 170, 172, 175, 179, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 199, 201, 203, 204, 205, 206, 207, 208, 209, 212, 215, 216, 220, 222, 223, 224, 232, 234, 235, 236, 237, 238, 241, 244, 247, 248, 249, 250, 252, 254, 259, 260, 263, 264, 265, 267, 268, 269, 270, 274, 276, 277, 285, 298, 299, 307, 310, 312, 313, 314, 315, 325, 328, 367, 368, 372, 373, 374, 376, 386, 399, 403, 406, 417, 425, 426, 427, 430, 434, 446, 448, 450, 452, 468, 474, 482, 483, 486, 487, 497, 502, 503, 507, 509, 513, 518, 520, 524, 527, 528, 529, 552, 560, 563, 565, 566, 567, 568, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 586, 587, 588, 589, 592, 593, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 611, 612, 613, 616, 617, 621, 623, 624, 625, 626, 628, 631, 632, 635, 637, 638, 639, 640, 643, 644, 645, 647, 649, 652, 670, 671, 674, 676, 679, 684, 686, 688, 689, 690, 691, 692, 693, 696, 697, 701, 702, 704, 705, 708, 710, 714, 715, 716, 719, 722, 725, 726, 729, 730, 733, 734, 735, 736, 738, 742, 744, 745, 746, 747, 748, 753, 757, 772, 773, 777, 778, 779, 784, 786, 788, 791, 794, 795, 796, 797, 798, 799, 802, 803, 804, 806, 808, 809, 813, 814, 818, 822, 825, 826, 828, 830, 831, 832, 833, 837, 838, 840, 841, 844, 847, 850, 855, 867, 870, 874, 875, 876, 877, 890, 909, 912, 917, 920, 932, 933, 934, 937, 938, 940, 942, 952, 969, 973, 976, 987, 994, 995, 996, 997, 998, 1000, 1001, 1005, 1011, 1012, 1013, 1014, 1019, 1021, 1028, 1035, 1036, 1037, 1039, 1040, 1041, 1043, 1046, 1054, 1055, 1058, 1059, 1069, 1074, 1075, 1079, 1081, 1088, 1107, 1109, 1111, 1113, 1114, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1126, 1127, 1128, 1131, 1132, 1133, 1134, 1135, 1137, 1139, 1143, 1144, 1147, 1148, 1151, 1153, 1154, 1155, 1156, 1157, 1162, 1163, 1164, 1167, 1168, 1172, 1174, 1175, 1176, 1177, 1179, 1182, 1183, 1186, 1188, 1189, 1190, 1191, 1194, 1195, 1196, 1198, 1200, 1203, 1211, 1216, 1221, 1222, 1228, 1229, 1230, 1240, 1248, 1249], "primarili": 1, "intend": [1, 139, 140, 141, 142, 652, 1203], "us": [1, 12, 14, 16, 17, 19, 25, 30, 32, 37, 38, 40, 45, 48, 58, 60, 64, 65, 66, 67, 69, 71, 72, 80, 87, 88, 89, 90, 106, 108, 109, 111, 113, 116, 117, 118, 119, 120, 121, 122, 124, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 155, 156, 158, 165, 167, 173, 174, 175, 178, 185, 186, 187, 188, 189, 190, 198, 200, 202, 203, 204, 206, 209, 210, 212, 215, 217, 219, 220, 222, 223, 224, 225, 234, 235, 236, 237, 238, 240, 241, 245, 248, 249, 250, 256, 257, 258, 259, 260, 264, 265, 267, 268, 269, 270, 273, 274, 275, 276, 278, 285, 299, 302, 308, 310, 312, 314, 315, 325, 340, 341, 347, 351, 352, 367, 372, 373, 379, 381, 385, 389, 391, 393, 398, 402, 403, 405, 406, 409, 417, 420, 422, 425, 426, 427, 428, 433, 434, 448, 451, 452, 468, 483, 497, 509, 518, 519, 520, 523, 552, 560, 563, 565, 568, 571, 572, 574, 575, 576, 577, 578, 579, 581, 582, 583, 586, 588, 590, 591, 596, 598, 599, 601, 603, 604, 607, 608, 609, 611, 612, 614, 615, 617, 618, 626, 628, 632, 634, 636, 639, 640, 641, 642, 643, 644, 645, 649, 652, 671, 672, 674, 675, 676, 677, 679, 687, 688, 689, 690, 691, 692, 694, 695, 698, 699, 701, 702, 703, 704, 705, 706, 708, 710, 712, 716, 719, 722, 723, 724, 727, 728, 730, 733, 734, 735, 736, 738, 739, 740, 741, 744, 745, 746, 747, 748, 753, 756, 757, 768, 769, 772, 775, 778, 779, 783, 784, 788, 789, 790, 791, 794, 795, 796, 798, 799, 800, 804, 806, 807, 813, 822, 824, 825, 829, 832, 833, 838, 840, 841, 843, 844, 846, 847, 848, 855, 867, 870, 874, 875, 877, 901, 902, 910, 912, 918, 919, 932, 933, 937, 938, 945, 947, 951, 958, 960, 963, 968, 972, 973, 975, 976, 979, 987, 990, 993, 996, 997, 998, 1003, 1004, 1008, 1011, 1014, 1017, 1018, 1019, 1025, 1028, 1035, 1037, 1039, 1041, 1055, 1069, 1081, 1087, 1088, 1107, 1109, 1111, 1114, 1117, 1119, 1131, 1132, 1135, 1137, 1140, 1141, 1147, 1151, 1154, 1155, 1158, 1159, 1162, 1163, 1165, 1166, 1168, 1169, 1177, 1179, 1183, 1185, 1194, 1195, 1196, 1200, 1203, 1212, 1217, 1219, 1220, 1221, 1222, 1229, 1230, 1240, 1244, 1248, 1249], "librari": [1, 98, 118, 121, 518, 757, 1249], "author": 1, "domain": [1, 612, 1163], "specif": [1, 35, 39, 40, 105, 107, 109, 111, 116, 119, 120, 121, 125, 126, 127, 131, 145, 146, 158, 203, 299, 406, 409, 643, 644, 645, 649, 775, 867, 870, 976, 979, 1194, 1195, 1196, 1200, 1240, 1249], "capabl": [1, 40, 299], "which": [1, 11, 15, 25, 36, 37, 39, 40, 41, 42, 43, 44, 45, 58, 59, 60, 71, 80, 81, 82, 83, 84, 108, 116, 117, 118, 119, 120, 121, 130, 131, 132, 139, 140, 147, 149, 157, 158, 167, 172, 173, 185, 186, 187, 188, 189, 190, 196, 206, 234, 259, 263, 265, 269, 299, 310, 399, 403, 406, 417, 431, 452, 454, 458, 461, 463, 464, 465, 509, 518, 520, 529, 571, 572, 575, 576, 577, 578, 579, 581, 582, 583, 625, 647, 701, 702, 704, 705, 706, 744, 745, 747, 757, 773, 775, 784, 786, 795, 796, 798, 799, 804, 822, 826, 837, 838, 867, 969, 973, 976, 987, 1001, 1002, 1018, 1022, 1027, 1031, 1032, 1033, 1034, 1081, 1117, 1135, 1176, 1198, 1221, 1240, 1249], "mai": [1, 39, 49, 51, 60, 87, 88, 105, 107, 108, 109, 111, 116, 118, 120, 122, 125, 126, 131, 132, 133, 134, 136, 139, 141, 164, 170, 172, 186, 206, 209, 234, 245, 260, 267, 268, 269, 299, 314, 367, 374, 375, 387, 399, 403, 417, 428, 448, 486, 507, 509, 518, 520, 528, 572, 575, 576, 577, 578, 579, 581, 582, 583, 590, 617, 692, 693, 696, 697, 701, 702, 704, 705, 710, 732, 744, 745, 757, 778, 779, 788, 795, 804, 808, 809, 822, 829, 840, 846, 847, 850, 855, 867, 911, 912, 932, 934, 940, 941, 953, 969, 973, 987, 995, 1001, 1014, 1058, 1088, 1107, 1140, 1168, 1196, 1221, 1240, 1249], "exist": [1, 38, 39, 40, 80, 120, 131, 146, 264, 268, 273, 274, 299, 309, 339, 342, 343, 376, 519, 757, 820, 840, 843, 844, 867, 870, 942, 1087, 1240], "belong": [1, 186, 299, 795, 867], "core": [1, 260, 299, 1249], "cannot": [1, 116, 117, 121, 122, 127, 150, 209, 237, 238, 276, 285, 299, 340, 428, 497, 520, 586, 607, 634, 655, 722, 757, 830, 847, 855, 867, 901, 1069, 1088, 1131, 1158, 1185, 1240], "overrid": [1, 40, 105, 107, 108, 109, 110, 111, 116, 118, 119, 121, 125, 126, 127, 143, 144, 148, 150, 299, 519, 757, 867, 1087, 1240], "str": [1, 7, 8, 10, 11, 14, 15, 17, 20, 21, 22, 25, 26, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 51, 58, 59, 60, 64, 65, 66, 67, 68, 69, 80, 81, 82, 83, 84, 85, 105, 106, 107, 108, 109, 111, 112, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 143, 144, 146, 147, 148, 149, 152, 157, 158, 161, 164, 165, 166, 167, 168, 170, 171, 175, 176, 177, 178, 181, 182, 184, 185, 186, 187, 189, 190, 192, 194, 198, 200, 201, 203, 205, 206, 210, 212, 214, 215, 216, 217, 219, 220, 222, 224, 227, 229, 230, 232, 233, 234, 235, 236, 238, 239, 242, 245, 247, 248, 249, 250, 252, 255, 256, 257, 258, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 299, 307, 308, 309, 339, 341, 342, 343, 346, 368, 371, 377, 399, 402, 403, 406, 409, 417, 428, 430, 434, 436, 440, 441, 444, 450, 452, 477, 478, 487, 488, 489, 503, 506, 509, 517, 520, 528, 530, 531, 533, 540, 541, 542, 543, 544, 549, 552, 556, 558, 560, 566, 567, 569, 571, 572, 575, 576, 577, 578, 579, 581, 582, 583, 591, 598, 599, 653, 654, 655, 657, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 687, 689, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 753, 757, 764, 773, 775, 778, 779, 780, 782, 783, 784, 786, 787, 788, 791, 794, 795, 796, 798, 799, 801, 803, 804, 813, 814, 818, 820, 821, 822, 823, 826, 827, 829, 830, 831, 832, 837, 838, 839, 840, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 870, 873, 906, 908, 933, 934, 943, 969, 972, 973, 976, 979, 987, 1000, 1004, 1049, 1050, 1051, 1052, 1061, 1081, 1097, 1098, 1107, 1112, 1113, 1132, 1135, 1136, 1204, 1206, 1207, 1217, 1218, 1219, 1228, 1240, 1245, 1248, 1249], "dt": [1, 80, 121, 127, 234, 299, 572, 706, 757, 766, 822, 867, 870, 1247], "attempt": [1, 259, 299], "do": [1, 40, 58, 59, 60, 80, 86, 87, 116, 130, 139, 140, 141, 142, 172, 186, 187, 189, 190, 202, 206, 224, 234, 254, 264, 267, 299, 367, 483, 518, 552, 572, 638, 639, 640, 730, 733, 748, 757, 778, 779, 786, 795, 796, 798, 799, 804, 808, 809, 818, 822, 830, 867, 870, 932, 1001, 1055, 1189, 1190, 1191, 1230, 1240], "so": [1, 118, 119, 130, 150, 184, 186, 187, 189, 190, 224, 234, 299, 325, 452, 487, 509, 520, 572, 628, 638, 639, 640, 757, 795, 796, 798, 799, 822, 867, 1059, 1179, 1189, 1190, 1191], "rais": [1, 20, 21, 25, 39, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 116, 117, 121, 127, 130, 139, 141, 154, 224, 235, 299, 340, 402, 403, 417, 486, 507, 528, 560, 603, 607, 625, 643, 644, 645, 647, 649, 703, 719, 757, 901, 972, 973, 987, 1058, 1079, 1107, 1154, 1158, 1176, 1194, 1195, 1196, 1198, 1200, 1221, 1230, 1240], "an": [1, 35, 37, 38, 39, 40, 49, 51, 58, 59, 81, 83, 84, 86, 87, 90, 95, 96, 98, 105, 116, 117, 118, 119, 120, 121, 123, 127, 128, 130, 132, 133, 144, 146, 148, 158, 159, 160, 170, 173, 178, 186, 187, 189, 190, 202, 203, 204, 206, 209, 220, 224, 231, 232, 234, 235, 254, 259, 264, 267, 268, 273, 276, 285, 299, 309, 336, 340, 345, 351, 352, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 376, 377, 399, 402, 406, 420, 431, 433, 434, 440, 441, 444, 467, 479, 480, 483, 486, 487, 507, 508, 509, 517, 518, 520, 529, 539, 540, 559, 560, 568, 572, 573, 575, 576, 577, 578, 579, 581, 582, 583, 603, 607, 612, 614, 643, 644, 645, 647, 649, 660, 666, 674, 680, 684, 689, 701, 702, 704, 705, 707, 709, 712, 716, 717, 718, 719, 730, 732, 733, 736, 739, 744, 745, 747, 748, 753, 757, 769, 775, 776, 777, 778, 779, 786, 788, 791, 795, 796, 798, 799, 804, 809, 818, 822, 830, 840, 843, 845, 847, 855, 867, 870, 898, 901, 906, 916, 918, 919, 920, 924, 925, 926, 927, 928, 929, 930, 931, 932, 942, 976, 990, 995, 1002, 1028, 1040, 1051, 1052, 1055, 1058, 1059, 1079, 1080, 1088, 1118, 1120, 1121, 1122, 1123, 1124, 1126, 1127, 1128, 1132, 1135, 1154, 1158, 1163, 1165, 1194, 1195, 1196, 1198, 1200, 1221, 1230, 1240, 1248], "attributeerror": 1, "howev": [1, 108, 118, 170, 209, 259, 299, 995, 1240], "can": [1, 19, 32, 40, 45, 48, 69, 71, 72, 80, 89, 90, 96, 106, 108, 116, 117, 118, 121, 122, 127, 128, 130, 133, 135, 136, 144, 145, 146, 148, 150, 152, 157, 159, 167, 168, 178, 185, 186, 187, 188, 189, 190, 198, 200, 202, 209, 220, 224, 225, 234, 237, 240, 248, 259, 263, 264, 267, 273, 276, 285, 299, 302, 310, 314, 358, 361, 367, 395, 396, 399, 402, 417, 431, 434, 452, 467, 483, 509, 518, 520, 528, 536, 539, 541, 542, 543, 544, 552, 558, 560, 565, 571, 572, 575, 576, 577, 578, 579, 581, 582, 583, 588, 591, 593, 596, 599, 604, 616, 628, 638, 639, 640, 643, 657, 683, 710, 712, 716, 722, 747, 753, 756, 757, 768, 773, 778, 784, 786, 788, 795, 796, 798, 799, 822, 824, 826, 832, 837, 843, 846, 847, 867, 870, 877, 912, 932, 933, 965, 966, 969, 972, 973, 987, 1002, 1018, 1055, 1081, 1088, 1093, 1107, 1111, 1113, 1117, 1132, 1135, 1137, 1141, 1144, 1147, 1155, 1156, 1157, 1164, 1167, 1179, 1189, 1190, 1191, 1194, 1196, 1221, 1240, 1244, 1248], "other": [1, 25, 40, 45, 69, 87, 116, 117, 118, 130, 139, 140, 141, 142, 167, 169, 172, 175, 179, 205, 206, 215, 216, 235, 237, 240, 241, 268, 271, 273, 274, 297, 299, 307, 311, 313, 325, 350, 371, 423, 424, 434, 438, 443, 445, 452, 457, 470, 477, 498, 499, 500, 501, 515, 524, 527, 535, 537, 547, 548, 551, 567, 599, 656, 664, 666, 673, 675, 677, 685, 686, 687, 695, 699, 701, 724, 728, 736, 739, 741, 757, 769, 779, 784, 791, 803, 804, 813, 814, 824, 825, 840, 843, 844, 845, 867, 870, 876, 917, 936, 994, 1001, 1026, 1049, 1070, 1071, 1072, 1073, 1113, 1134, 1223, 1231, 1239, 1240], "onli": [1, 15, 18, 25, 35, 37, 40, 58, 64, 66, 71, 80, 85, 88, 90, 116, 117, 120, 122, 124, 128, 130, 131, 133, 134, 135, 136, 139, 140, 141, 142, 146, 148, 152, 155, 167, 172, 186, 189, 191, 203, 205, 206, 209, 210, 212, 217, 224, 234, 236, 237, 250, 256, 258, 259, 268, 269, 285, 299, 308, 310, 312, 314, 325, 349, 350, 399, 407, 428, 437, 446, 467, 520, 539, 541, 542, 543, 544, 552, 558, 565, 575, 576, 577, 578, 579, 581, 582, 583, 604, 628, 657, 668, 701, 702, 722, 757, 778, 784, 795, 796, 798, 799, 800, 803, 804, 807, 822, 840, 855, 867, 874, 875, 876, 914, 917, 933, 969, 1001, 1007, 1012, 1028, 1088, 1107, 1111, 1155, 1179, 1216, 1219, 1240, 1248, 1249], "gener": [1, 118, 119, 137, 143, 144, 145, 146, 148, 154, 162, 224, 238, 257, 259, 264, 299, 497, 586, 592, 680, 689, 701, 704, 716, 717, 733, 744, 745, 757, 867, 1069, 1131, 1143, 1217, 1240, 1249], "userwarn": 1, "pl": [1, 2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 71, 72, 80, 81, 82, 83, 84, 88, 89, 90, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 127, 130, 131, 132, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 150, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 178, 180, 181, 182, 183, 184, 185, 186, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 299, 302, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 348, 349, 350, 353, 354, 355, 356, 357, 358, 359, 360, 361, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 386, 387, 388, 390, 392, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 623, 624, 626, 627, 628, 629, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 701, 702, 704, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 753, 757, 770, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 828, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 870, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 905, 906, 908, 909, 911, 912, 913, 914, 915, 916, 917, 920, 921, 922, 923, 924, 925, 926, 927, 932, 933, 934, 935, 936, 937, 938, 940, 941, 942, 943, 944, 945, 946, 948, 949, 950, 952, 953, 954, 955, 956, 957, 959, 961, 962, 964, 965, 966, 967, 969, 970, 971, 972, 973, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 993, 994, 995, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1012, 1013, 1014, 1017, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1100, 1101, 1102, 1103, 1104, 1107, 1108, 1109, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1134, 1135, 1137, 1139, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1153, 1154, 1155, 1157, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1167, 1168, 1169, 1174, 1175, 1177, 1178, 1179, 1180, 1183, 1185, 1186, 1187, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1206, 1209, 1210, 1211, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1231, 1240, 1244, 1248, 1249], "register_expr_namespac": [1, 81, 83, 84], "greet": 1, "def": [1, 71, 81, 82, 83, 84, 144, 145, 146, 148, 152, 223, 264, 299, 307, 556, 612, 640, 673, 721, 757, 779, 817, 867, 870, 1163, 1249], "__init__": [1, 2, 3, 4, 5, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 61, 62, 63, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83, 84, 143, 1248], "self": [1, 65, 66, 67, 69, 81, 82, 83, 84, 86, 87, 159, 160, 164, 172, 192, 194, 195, 196, 208, 210, 212, 214, 215, 217, 221, 222, 224, 227, 228, 230, 231, 232, 238, 246, 247, 249, 250, 252, 257, 264, 266, 269, 270, 271, 275, 276, 277, 299, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 338, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 534, 535, 536, 537, 538, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 753, 757, 772, 773, 774, 775, 777, 778, 779, 781, 782, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 867, 876, 877, 906, 920, 1001, 1005, 1015, 1086, 1087, 1088, 1099, 1103, 1104, 1110, 1113, 1132, 1135, 1137, 1149, 1227, 1231, 1240], "_expr": [1, 82], "hello": [1, 25, 65, 68, 638, 639, 640, 1061, 1189, 1190, 1191], "return": [1, 10, 11, 35, 37, 38, 39, 40, 41, 42, 43, 44, 58, 59, 60, 64, 68, 71, 80, 81, 82, 83, 84, 85, 86, 87, 97, 99, 104, 105, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 145, 155, 157, 159, 162, 163, 166, 168, 170, 171, 172, 173, 174, 177, 178, 180, 181, 184, 185, 186, 188, 189, 192, 194, 201, 202, 203, 204, 205, 207, 208, 209, 211, 213, 218, 219, 220, 222, 223, 224, 234, 235, 236, 237, 238, 251, 252, 253, 259, 260, 263, 264, 265, 269, 273, 274, 281, 283, 285, 288, 293, 299, 310, 312, 316, 317, 318, 319, 320, 321, 324, 325, 329, 330, 336, 339, 341, 342, 343, 344, 353, 354, 355, 356, 368, 369, 374, 378, 379, 380, 382, 384, 386, 387, 388, 390, 392, 394, 395, 396, 397, 399, 400, 401, 403, 404, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 430, 441, 442, 444, 447, 448, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 471, 472, 475, 476, 478, 484, 486, 487, 488, 489, 491, 492, 497, 506, 507, 508, 514, 519, 529, 531, 536, 556, 560, 562, 566, 567, 568, 570, 586, 587, 593, 594, 595, 602, 605, 606, 608, 610, 611, 612, 613, 616, 617, 618, 619, 620, 622, 623, 624, 629, 630, 632, 633, 634, 635, 647, 652, 659, 661, 662, 663, 665, 666, 668, 669, 670, 673, 674, 678, 680, 681, 682, 683, 684, 689, 691, 700, 701, 702, 703, 704, 705, 706, 709, 712, 714, 716, 717, 718, 719, 720, 721, 722, 730, 733, 736, 739, 742, 743, 744, 745, 747, 748, 757, 773, 776, 778, 779, 781, 785, 786, 788, 793, 795, 796, 798, 799, 800, 803, 806, 807, 809, 817, 818, 822, 826, 830, 835, 836, 837, 838, 843, 844, 851, 853, 858, 863, 867, 874, 875, 876, 884, 885, 887, 888, 889, 890, 891, 892, 898, 900, 902, 905, 909, 912, 916, 933, 934, 940, 944, 945, 946, 948, 950, 952, 953, 954, 955, 956, 957, 959, 961, 962, 964, 965, 966, 967, 969, 970, 971, 973, 974, 977, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 991, 994, 995, 1000, 1001, 1009, 1011, 1013, 1014, 1020, 1022, 1023, 1024, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1038, 1040, 1042, 1043, 1045, 1046, 1047, 1048, 1050, 1056, 1058, 1059, 1060, 1061, 1063, 1064, 1069, 1078, 1079, 1080, 1086, 1087, 1088, 1093, 1100, 1107, 1113, 1114, 1115, 1116, 1117, 1131, 1133, 1134, 1144, 1153, 1154, 1156, 1157, 1159, 1161, 1162, 1163, 1164, 1167, 1168, 1169, 1170, 1171, 1173, 1174, 1175, 1180, 1181, 1183, 1184, 1185, 1186, 1198, 1203, 1211, 1213, 1224, 1226, 1227, 1228, 1231, 1240, 1248, 1249], "lit": [1, 309, 339, 452, 467, 539, 692, 696, 710, 730, 733, 748, 757, 1004, 1240], "alia": [1, 17, 79, 80, 82, 84, 186, 208, 224, 234, 266, 273, 276, 299, 307, 311, 339, 341, 342, 343, 344, 357, 358, 359, 360, 361, 368, 370, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 387, 388, 390, 392, 394, 397, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 414, 416, 417, 418, 419, 420, 421, 423, 424, 436, 438, 443, 445, 450, 452, 456, 460, 467, 470, 472, 515, 520, 524, 525, 526, 527, 529, 532, 535, 537, 539, 547, 548, 551, 553, 557, 560, 563, 565, 585, 587, 603, 604, 606, 609, 611, 612, 617, 618, 628, 629, 632, 633, 634, 635, 636, 641, 642, 653, 654, 655, 656, 664, 665, 666, 672, 673, 680, 681, 682, 685, 686, 687, 689, 701, 704, 706, 707, 710, 711, 716, 721, 722, 732, 739, 744, 747, 757, 795, 801, 807, 822, 839, 843, 847, 867, 933, 940, 941, 943, 946, 948, 949, 950, 956, 957, 959, 962, 964, 965, 966, 967, 969, 970, 971, 972, 973, 976, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 1043, 1107, 1112, 1162, 1163, 1185, 1186, 1240], "hi": 1, "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 25, 65, 68, 604, 628, 638, 639, 640, 650, 1061, 1155, 1179, 1189, 1190, 1191, 1201], "select": [1, 13, 38, 64, 65, 66, 80, 81, 82, 83, 115, 116, 117, 118, 119, 120, 122, 124, 128, 130, 136, 145, 201, 202, 206, 209, 220, 223, 235, 241, 247, 261, 266, 269, 276, 299, 306, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 331, 332, 335, 336, 337, 338, 339, 342, 343, 344, 346, 348, 349, 353, 354, 355, 356, 367, 369, 370, 371, 372, 373, 375, 376, 377, 386, 387, 395, 396, 399, 402, 410, 411, 412, 413, 414, 415, 416, 417, 420, 421, 422, 425, 426, 427, 428, 429, 430, 431, 435, 437, 439, 442, 446, 448, 449, 450, 451, 453, 454, 458, 466, 467, 468, 469, 471, 483, 484, 509, 511, 512, 513, 514, 518, 520, 521, 522, 523, 534, 536, 538, 539, 545, 546, 549, 550, 551, 554, 555, 559, 561, 562, 563, 564, 565, 566, 568, 569, 570, 574, 580, 584, 586, 587, 588, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 610, 611, 612, 613, 643, 653, 655, 658, 662, 663, 665, 667, 668, 669, 670, 671, 674, 676, 679, 681, 682, 683, 684, 686, 688, 689, 690, 691, 694, 706, 708, 709, 710, 711, 712, 714, 716, 718, 723, 725, 726, 727, 729, 732, 733, 737, 738, 739, 740, 742, 746, 753, 757, 780, 804, 817, 825, 826, 831, 839, 845, 847, 867, 870, 897, 899, 972, 1008, 1055, 1132, 1135, 1148, 1167, 1194, 1212, 1240, 1248], "shape": [1, 2, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 32, 33, 61, 64, 65, 66, 68, 71, 72, 80, 81, 82, 83, 84, 88, 89, 90, 102, 105, 106, 107, 108, 109, 110, 111, 112, 130, 136, 146, 148, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 171, 172, 173, 174, 175, 178, 180, 181, 183, 185, 186, 191, 192, 194, 196, 197, 198, 200, 201, 202, 205, 206, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 226, 227, 229, 230, 232, 233, 234, 238, 240, 244, 247, 248, 249, 250, 251, 252, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 299, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 348, 349, 350, 353, 354, 355, 356, 357, 358, 359, 360, 361, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 386, 387, 388, 390, 392, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 520, 521, 522, 523, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 623, 624, 626, 627, 628, 629, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 701, 702, 704, 706, 707, 708, 709, 710, 711, 712, 714, 716, 717, 718, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 753, 757, 772, 773, 775, 776, 778, 779, 781, 782, 783, 784, 787, 788, 789, 790, 791, 792, 793, 794, 795, 800, 802, 803, 804, 805, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 824, 826, 828, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 843, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 870, 872, 873, 876, 878, 879, 880, 881, 882, 883, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 905, 906, 908, 911, 913, 914, 916, 917, 920, 921, 922, 923, 924, 925, 926, 927, 932, 933, 934, 935, 937, 938, 940, 941, 942, 943, 944, 945, 946, 948, 949, 950, 952, 953, 956, 957, 959, 962, 964, 965, 966, 967, 969, 970, 971, 972, 973, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1012, 1013, 1014, 1017, 1018, 1020, 1022, 1024, 1026, 1027, 1030, 1031, 1032, 1033, 1034, 1038, 1040, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1088, 1093, 1100, 1102, 1103, 1104, 1107, 1109, 1112, 1113, 1114, 1115, 1116, 1117, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1135, 1139, 1143, 1144, 1145, 1146, 1148, 1149, 1150, 1153, 1154, 1155, 1157, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1167, 1168, 1169, 1174, 1175, 1177, 1178, 1179, 1180, 1183, 1185, 1186, 1187, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1206, 1209, 1211, 1214, 1215, 1217, 1218, 1219, 1223, 1224, 1225, 1226, 1227, 1228, 1231, 1240, 1248], "3": [1, 2, 12, 13, 14, 15, 16, 18, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 32, 36, 37, 39, 40, 41, 42, 43, 44, 45, 61, 64, 66, 67, 69, 80, 81, 82, 83, 84, 88, 90, 105, 106, 107, 108, 109, 110, 111, 112, 119, 121, 127, 130, 136, 138, 139, 140, 141, 142, 145, 146, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 175, 178, 180, 181, 182, 183, 184, 185, 186, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 299, 302, 307, 308, 309, 310, 312, 324, 325, 326, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 348, 349, 356, 357, 358, 359, 360, 361, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 383, 384, 386, 387, 388, 390, 392, 394, 397, 399, 401, 402, 403, 404, 406, 407, 408, 409, 410, 417, 418, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 466, 467, 468, 470, 471, 472, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 511, 512, 513, 514, 515, 517, 520, 535, 536, 537, 539, 540, 541, 542, 543, 544, 547, 549, 550, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 596, 598, 599, 600, 603, 604, 605, 608, 609, 611, 612, 613, 614, 617, 618, 621, 626, 628, 629, 631, 632, 633, 634, 635, 636, 637, 644, 649, 653, 654, 655, 656, 657, 659, 665, 668, 669, 670, 672, 673, 680, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 714, 716, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 730, 732, 733, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 753, 757, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 793, 794, 795, 800, 801, 802, 803, 804, 805, 806, 807, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 828, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 870, 872, 873, 876, 878, 880, 881, 882, 884, 885, 886, 887, 888, 891, 892, 893, 894, 895, 896, 897, 898, 899, 905, 906, 908, 911, 913, 914, 915, 920, 921, 922, 923, 924, 925, 926, 927, 932, 933, 934, 935, 936, 937, 938, 941, 942, 943, 946, 949, 950, 952, 954, 955, 956, 961, 962, 964, 970, 972, 973, 974, 976, 978, 979, 980, 982, 983, 985, 987, 989, 990, 994, 995, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1012, 1013, 1014, 1017, 1018, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1041, 1042, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1062, 1063, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1100, 1102, 1103, 1104, 1107, 1108, 1109, 1112, 1113, 1114, 1115, 1116, 1117, 1119, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1135, 1137, 1139, 1143, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1155, 1156, 1159, 1160, 1162, 1163, 1164, 1165, 1168, 1169, 1172, 1177, 1179, 1180, 1182, 1183, 1187, 1188, 1195, 1200, 1206, 1209, 1210, 1211, 1214, 1215, 1216, 1217, 1220, 1221, 1222, 1224, 1225, 1226, 1227, 1228, 1229, 1231, 1240, 1248, 1249], "1": [1, 2, 12, 13, 14, 16, 17, 18, 20, 22, 23, 24, 26, 27, 28, 29, 30, 32, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 60, 61, 64, 65, 66, 67, 68, 69, 72, 80, 81, 82, 83, 84, 88, 105, 106, 107, 108, 109, 110, 111, 112, 116, 117, 120, 121, 122, 127, 130, 131, 132, 135, 136, 138, 139, 140, 141, 142, 143, 146, 148, 154, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 178, 180, 181, 182, 183, 184, 185, 186, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 299, 302, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 344, 345, 346, 348, 349, 350, 353, 354, 355, 356, 357, 358, 359, 360, 361, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 383, 384, 386, 387, 388, 390, 392, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 460, 461, 463, 464, 465, 466, 467, 468, 469, 471, 472, 475, 476, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 520, 521, 522, 523, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 609, 610, 611, 612, 613, 614, 616, 617, 618, 626, 627, 634, 635, 636, 638, 639, 640, 652, 653, 654, 655, 656, 657, 658, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 679, 680, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 714, 716, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 753, 757, 772, 773, 775, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 800, 801, 802, 803, 804, 805, 807, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 870, 872, 873, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 891, 892, 893, 894, 895, 896, 897, 898, 899, 905, 906, 911, 913, 914, 915, 917, 920, 921, 922, 924, 925, 926, 927, 932, 933, 934, 935, 936, 937, 938, 940, 941, 942, 943, 944, 945, 946, 949, 950, 952, 953, 954, 955, 956, 957, 959, 961, 962, 964, 965, 966, 967, 969, 970, 971, 972, 973, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 993, 994, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1012, 1013, 1014, 1017, 1018, 1020, 1022, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1042, 1047, 1048, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1062, 1063, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1101, 1102, 1103, 1104, 1107, 1108, 1109, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1131, 1132, 1133, 1135, 1137, 1139, 1140, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1153, 1162, 1164, 1165, 1167, 1168, 1169, 1177, 1185, 1186, 1203, 1206, 1209, 1210, 1211, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1231, 1240, 1244, 1248, 1249], "2": [1, 2, 12, 13, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 36, 37, 39, 40, 41, 42, 43, 44, 45, 61, 64, 66, 67, 69, 72, 80, 81, 82, 83, 84, 88, 105, 106, 107, 108, 109, 110, 111, 112, 119, 130, 136, 137, 138, 139, 140, 141, 142, 145, 146, 148, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 178, 180, 181, 182, 183, 184, 185, 186, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 205, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 299, 302, 306, 307, 308, 309, 311, 313, 315, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 344, 345, 348, 349, 350, 355, 356, 357, 358, 359, 360, 361, 367, 368, 370, 371, 374, 376, 377, 378, 379, 380, 382, 394, 395, 396, 399, 400, 401, 402, 403, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 520, 531, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 596, 597, 598, 599, 600, 602, 604, 606, 608, 609, 611, 613, 614, 616, 617, 618, 623, 624, 626, 627, 628, 629, 632, 634, 635, 636, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 659, 662, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 701, 702, 706, 707, 708, 709, 710, 711, 712, 714, 716, 717, 718, 719, 721, 722, 723, 725, 726, 727, 729, 732, 736, 737, 738, 739, 740, 742, 745, 746, 747, 753, 757, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 800, 801, 803, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 826, 828, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 870, 872, 873, 876, 879, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 905, 911, 913, 914, 915, 916, 920, 921, 923, 925, 926, 927, 932, 933, 934, 935, 936, 940, 942, 944, 945, 948, 950, 954, 955, 956, 961, 962, 964, 965, 966, 971, 972, 973, 977, 987, 989, 990, 991, 993, 994, 995, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1012, 1013, 1014, 1017, 1018, 1020, 1022, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1042, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1101, 1102, 1103, 1104, 1107, 1108, 1109, 1112, 1113, 1114, 1115, 1116, 1117, 1119, 1120, 1121, 1122, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1135, 1137, 1139, 1143, 1145, 1147, 1148, 1149, 1150, 1151, 1153, 1157, 1162, 1164, 1165, 1167, 1169, 1177, 1178, 1185, 1186, 1189, 1190, 1191, 1194, 1196, 1197, 1198, 1199, 1201, 1202, 1206, 1209, 1210, 1211, 1214, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1226, 1227, 1228, 1229, 1231, 1240, 1244, 1248, 1249], "column_0": [1, 209, 264, 299], "register_dataframe_namespac": [1, 82, 83, 84], "split": [1, 40, 81, 204, 299, 634, 635, 1185, 1186], "splitfram": [1, 81], "df": [1, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 36, 37, 39, 40, 41, 42, 43, 44, 45, 61, 64, 65, 81, 82, 105, 106, 107, 108, 109, 110, 111, 112, 117, 118, 119, 130, 144, 146, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 173, 174, 175, 178, 181, 182, 183, 184, 185, 186, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 299, 302, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 344, 345, 346, 348, 349, 350, 353, 354, 355, 356, 357, 358, 359, 360, 361, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 386, 387, 388, 390, 392, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 520, 521, 522, 523, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 623, 624, 626, 627, 628, 629, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 646, 647, 648, 650, 651, 652, 653, 655, 656, 657, 658, 659, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 702, 706, 707, 708, 709, 710, 711, 712, 714, 716, 717, 718, 721, 722, 723, 724, 725, 726, 727, 728, 729, 732, 736, 737, 738, 739, 740, 741, 742, 745, 746, 747, 753, 757, 795, 822, 826, 839, 840, 853, 855, 863, 867, 870, 897, 899, 972, 1167, 1178, 1185, 1186, 1218, 1240, 1249], "_df": [1, 81], "by_alternate_row": 1, "list": [1, 2, 18, 39, 40, 48, 64, 68, 72, 80, 81, 83, 86, 87, 105, 107, 108, 109, 111, 112, 114, 115, 116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 144, 145, 146, 148, 161, 165, 168, 170, 171, 175, 183, 185, 186, 194, 203, 219, 222, 235, 236, 237, 240, 248, 255, 256, 264, 265, 266, 267, 273, 278, 279, 299, 308, 336, 337, 368, 430, 436, 441, 449, 457, 516, 518, 520, 529, 530, 552, 560, 566, 568, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 598, 599, 612, 633, 653, 655, 660, 664, 683, 686, 702, 705, 707, 715, 717, 719, 722, 737, 739, 745, 757, 780, 785, 787, 791, 794, 795, 824, 832, 838, 839, 843, 845, 848, 849, 867, 870, 898, 899, 915, 933, 995, 1000, 1005, 1008, 1010, 1014, 1015, 1026, 1107, 1114, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1126, 1127, 1128, 1133, 1155, 1163, 1179, 1184, 1212, 1220, 1223, 1240, 1249], "with_row_index": [1, 275, 299, 575, 576, 578, 581, 582, 583, 757, 846, 867, 1132, 1240], "name": [1, 23, 27, 29, 36, 37, 38, 40, 43, 58, 65, 66, 67, 68, 69, 72, 81, 82, 83, 84, 88, 94, 105, 107, 108, 109, 110, 111, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 141, 142, 143, 144, 146, 147, 148, 149, 157, 158, 161, 165, 166, 167, 171, 175, 176, 177, 181, 182, 184, 185, 188, 201, 202, 203, 205, 206, 209, 211, 213, 215, 216, 218, 222, 224, 229, 235, 236, 237, 239, 240, 241, 248, 251, 255, 257, 259, 262, 263, 264, 265, 266, 267, 268, 273, 274, 275, 276, 277, 278, 299, 309, 314, 339, 341, 342, 343, 368, 428, 434, 452, 461, 463, 464, 465, 467, 509, 517, 520, 528, 530, 532, 552, 558, 560, 569, 599, 612, 613, 653, 655, 657, 674, 675, 676, 677, 679, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 694, 695, 698, 699, 708, 709, 714, 715, 718, 723, 724, 725, 727, 728, 729, 731, 734, 735, 736, 738, 739, 740, 741, 742, 746, 747, 753, 757, 773, 775, 780, 783, 784, 787, 791, 794, 797, 803, 804, 813, 814, 820, 823, 824, 825, 826, 832, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 867, 870, 873, 916, 933, 1081, 1107, 1112, 1162, 1163, 1164, 1177, 1204, 1207, 1217, 1218, 1222, 1240, 1248, 1249], "n": [1, 17, 18, 22, 30, 37, 44, 48, 50, 58, 66, 67, 81, 82, 83, 84, 114, 116, 117, 130, 155, 159, 172, 180, 186, 192, 203, 204, 208, 209, 236, 237, 238, 244, 245, 249, 252, 253, 256, 258, 270, 283, 293, 299, 344, 367, 370, 375, 376, 383, 408, 420, 431, 434, 442, 447, 472, 481, 488, 497, 498, 502, 506, 509, 553, 556, 566, 581, 583, 586, 589, 590, 596, 601, 617, 618, 626, 634, 635, 638, 639, 645, 659, 661, 665, 666, 671, 673, 688, 690, 701, 702, 703, 704, 705, 706, 712, 714, 730, 733, 734, 735, 738, 742, 746, 748, 757, 776, 778, 793, 795, 800, 807, 828, 829, 833, 835, 836, 841, 853, 863, 867, 870, 905, 916, 932, 935, 941, 942, 949, 978, 990, 1001, 1002, 1009, 1013, 1043, 1053, 1060, 1069, 1070, 1074, 1078, 1081, 1102, 1126, 1128, 1131, 1139, 1140, 1147, 1151, 1168, 1169, 1177, 1185, 1186, 1196, 1211, 1213, 1219, 1224, 1229, 1240, 1248, 1249], "filter": [1, 81, 120, 130, 131, 136, 167, 198, 199, 200, 205, 224, 285, 299, 528, 530, 609, 636, 672, 710, 747, 757, 784, 788, 801, 803, 855, 867, 870, 1135, 1240], "col": [1, 17, 37, 40, 58, 80, 81, 82, 83, 109, 111, 130, 144, 146, 175, 185, 186, 199, 201, 207, 209, 220, 223, 224, 234, 235, 240, 248, 266, 267, 273, 278, 299, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 341, 342, 343, 344, 345, 346, 348, 349, 350, 353, 354, 355, 357, 358, 359, 360, 361, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 386, 387, 388, 390, 392, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 442, 443, 444, 445, 448, 450, 451, 452, 453, 456, 457, 460, 461, 463, 466, 467, 468, 469, 470, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 537, 538, 539, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 606, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 623, 624, 626, 627, 628, 629, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 658, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 684, 685, 686, 687, 689, 691, 694, 706, 708, 709, 710, 711, 712, 713, 714, 715, 718, 723, 725, 726, 727, 729, 731, 732, 738, 740, 742, 746, 747, 757, 777, 791, 794, 795, 801, 806, 817, 822, 824, 832, 839, 843, 845, 848, 867, 870, 897, 899, 969, 972, 1055, 1114, 1132, 1135, 1167, 1194, 1240, 1249], "0": [1, 12, 14, 16, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 40, 45, 49, 60, 61, 64, 69, 80, 81, 82, 84, 88, 90, 106, 116, 117, 118, 119, 121, 122, 124, 127, 128, 130, 133, 134, 135, 136, 138, 143, 144, 145, 146, 148, 154, 155, 158, 159, 160, 162, 163, 164, 165, 168, 169, 173, 174, 176, 178, 179, 180, 183, 184, 185, 186, 187, 188, 189, 190, 191, 195, 196, 197, 201, 203, 204, 205, 207, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 224, 226, 227, 231, 232, 236, 237, 238, 239, 240, 245, 247, 248, 249, 250, 251, 253, 257, 258, 259, 260, 261, 264, 267, 269, 270, 273, 275, 276, 278, 280, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 299, 306, 308, 309, 311, 314, 316, 317, 318, 319, 320, 321, 324, 325, 326, 329, 330, 345, 348, 349, 351, 352, 353, 354, 355, 357, 362, 363, 364, 365, 366, 367, 368, 369, 372, 373, 378, 379, 381, 384, 385, 388, 389, 390, 391, 392, 393, 397, 398, 402, 404, 405, 407, 412, 413, 415, 416, 417, 423, 424, 425, 426, 427, 429, 431, 432, 433, 434, 437, 438, 442, 443, 445, 446, 448, 451, 454, 455, 458, 459, 461, 462, 463, 464, 465, 467, 468, 470, 475, 476, 479, 480, 483, 486, 487, 492, 494, 507, 509, 511, 512, 513, 515, 516, 517, 518, 519, 521, 522, 523, 529, 534, 535, 537, 539, 545, 546, 547, 548, 550, 551, 553, 556, 557, 558, 560, 561, 562, 563, 567, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 590, 591, 593, 594, 595, 596, 600, 601, 605, 606, 611, 612, 615, 619, 620, 621, 622, 625, 630, 631, 637, 643, 645, 656, 657, 658, 660, 661, 662, 663, 664, 666, 671, 672, 674, 678, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 696, 698, 699, 701, 703, 707, 708, 710, 716, 717, 720, 722, 725, 726, 731, 732, 737, 743, 744, 745, 746, 747, 748, 753, 757, 775, 776, 777, 781, 783, 785, 789, 790, 793, 794, 795, 796, 797, 798, 799, 802, 803, 806, 808, 809, 812, 816, 818, 819, 823, 824, 829, 830, 832, 833, 836, 841, 843, 845, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 867, 870, 877, 878, 879, 880, 881, 882, 883, 884, 886, 888, 891, 906, 911, 913, 914, 916, 918, 919, 921, 922, 923, 928, 929, 930, 931, 932, 933, 934, 936, 937, 938, 945, 947, 950, 951, 955, 956, 957, 958, 959, 960, 962, 963, 967, 968, 972, 973, 974, 975, 982, 983, 985, 986, 987, 993, 996, 997, 998, 1003, 1007, 1009, 1012, 1014, 1017, 1019, 1022, 1023, 1025, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1037, 1039, 1040, 1041, 1047, 1048, 1051, 1052, 1055, 1058, 1059, 1064, 1066, 1079, 1081, 1083, 1084, 1085, 1086, 1087, 1090, 1091, 1102, 1107, 1108, 1109, 1113, 1117, 1118, 1119, 1121, 1122, 1124, 1125, 1126, 1128, 1129, 1130, 1131, 1134, 1136, 1140, 1144, 1145, 1146, 1147, 1150, 1151, 1156, 1157, 1162, 1163, 1166, 1167, 1170, 1171, 1172, 1173, 1176, 1181, 1182, 1188, 1194, 1196, 1212, 1213, 1214, 1215, 1217, 1222, 1223, 1227, 1229, 1230, 1240, 1249], "drop": [1, 108, 166, 167, 209, 265, 273, 299, 370, 372, 373, 481, 482, 560, 757, 784, 838, 843, 867, 935, 937, 938, 1053, 1054, 1107, 1240], "aaa": [1, 40, 299, 603, 653, 655, 1154], "bbb": [1, 40, 299, 653, 655, 870], "ccc": [1, 40, 299, 653, 655], "ddd": [1, 40, 299, 653, 655], "eee": [1, 40, 299, 870], "fff": 1, "column": [1, 15, 21, 22, 23, 26, 27, 29, 39, 40, 43, 48, 71, 72, 80, 81, 88, 90, 92, 94, 105, 106, 107, 108, 109, 110, 111, 112, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 139, 140, 141, 142, 146, 157, 158, 162, 163, 165, 166, 167, 168, 171, 175, 176, 177, 181, 182, 184, 185, 186, 187, 188, 189, 190, 194, 195, 196, 201, 202, 203, 205, 206, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 229, 230, 231, 232, 234, 235, 236, 237, 239, 240, 241, 242, 248, 249, 250, 251, 255, 257, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 273, 274, 275, 276, 278, 299, 309, 310, 312, 324, 333, 334, 336, 350, 356, 368, 376, 378, 379, 380, 384, 386, 387, 388, 390, 392, 394, 397, 400, 401, 404, 406, 407, 409, 418, 419, 421, 428, 430, 434, 436, 448, 452, 467, 471, 477, 484, 486, 504, 507, 508, 509, 519, 520, 526, 528, 530, 539, 541, 542, 543, 544, 552, 558, 560, 564, 566, 568, 571, 572, 575, 576, 577, 578, 579, 581, 582, 583, 591, 598, 599, 602, 610, 634, 635, 643, 644, 645, 646, 647, 649, 654, 657, 672, 674, 675, 676, 677, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 753, 757, 773, 775, 781, 783, 784, 785, 787, 791, 794, 795, 796, 797, 798, 799, 803, 804, 809, 810, 811, 812, 813, 815, 816, 817, 819, 820, 822, 823, 824, 825, 826, 827, 832, 833, 834, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 855, 867, 870, 874, 875, 895, 896, 898, 909, 911, 917, 933, 944, 945, 946, 950, 952, 953, 957, 959, 962, 964, 967, 970, 971, 974, 976, 977, 979, 988, 989, 991, 1000, 1011, 1014, 1049, 1056, 1058, 1076, 1080, 1107, 1114, 1117, 1141, 1153, 1161, 1185, 1186, 1194, 1195, 1196, 1197, 1198, 1200, 1206, 1209, 1217, 1218, 1240, 1249], "txt": [1, 17, 130], "string": [1, 5, 7, 8, 10, 11, 17, 19, 20, 21, 25, 36, 37, 38, 40, 43, 44, 48, 51, 58, 64, 71, 72, 79, 89, 90, 108, 112, 116, 117, 118, 119, 130, 139, 140, 141, 142, 143, 144, 145, 148, 151, 157, 158, 168, 170, 171, 178, 184, 185, 186, 188, 206, 222, 224, 234, 237, 239, 240, 241, 248, 258, 259, 263, 264, 267, 269, 273, 274, 278, 299, 307, 341, 342, 347, 399, 403, 406, 409, 417, 428, 430, 436, 440, 452, 489, 531, 552, 556, 567, 572, 575, 576, 577, 578, 579, 581, 582, 583, 599, 602, 603, 604, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 652, 654, 675, 677, 683, 685, 686, 687, 695, 699, 701, 702, 704, 705, 711, 724, 728, 736, 739, 741, 744, 745, 747, 757, 773, 775, 785, 786, 787, 794, 795, 797, 804, 822, 823, 824, 825, 826, 832, 837, 843, 844, 848, 867, 870, 903, 909, 910, 969, 973, 976, 979, 987, 1000, 1018, 1039, 1061, 1113, 1152, 1153, 1154, 1155, 1157, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1183, 1184, 1185, 1186, 1187, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1206, 1219, 1240, 1249], "register_lazyframe_namespac": [1, 81, 82, 84], "dtypeoper": [1, 83], "ldf": [1, 83, 848, 849, 852, 854, 856, 857, 858, 859, 860, 861, 862], "_ldf": [1, 83], "upcast_integer_typ": [1, 83], "with_column": [1, 17, 83, 186, 223, 234, 267, 274, 299, 307, 309, 325, 327, 328, 329, 330, 333, 334, 341, 345, 350, 357, 358, 359, 360, 361, 368, 370, 374, 378, 379, 380, 382, 383, 384, 388, 390, 392, 394, 397, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 418, 419, 423, 424, 432, 433, 438, 443, 445, 446, 451, 452, 456, 457, 460, 461, 463, 464, 465, 467, 470, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 515, 517, 520, 535, 537, 539, 540, 541, 542, 543, 544, 547, 548, 552, 553, 556, 557, 558, 560, 563, 567, 571, 572, 575, 576, 577, 578, 579, 581, 582, 583, 585, 589, 603, 604, 606, 608, 609, 611, 612, 613, 614, 616, 617, 618, 623, 624, 626, 627, 628, 629, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 646, 647, 648, 650, 651, 652, 654, 656, 657, 664, 666, 673, 675, 677, 685, 687, 692, 693, 695, 702, 707, 717, 721, 724, 728, 737, 741, 745, 747, 753, 757, 795, 801, 817, 822, 844, 867, 870, 933, 972, 1107, 1240], "tp": [1, 83], "cast": [1, 39, 82, 83, 105, 139, 140, 141, 142, 178, 186, 187, 189, 190, 223, 234, 260, 273, 299, 313, 360, 361, 375, 406, 409, 551, 556, 565, 572, 614, 615, 616, 652, 658, 664, 687, 737, 757, 795, 796, 798, 799, 817, 822, 843, 867, 870, 912, 926, 927, 941, 976, 979, 1111, 1165, 1166, 1167, 1203, 1210, 1218, 1223, 1240], "int64": [1, 2, 39, 40, 43, 72, 82, 83, 88, 116, 168, 178, 186, 187, 189, 190, 207, 223, 234, 239, 254, 260, 299, 329, 330, 331, 332, 333, 334, 335, 337, 360, 361, 410, 411, 412, 413, 414, 415, 416, 428, 556, 565, 572, 614, 647, 658, 664, 680, 708, 716, 717, 719, 733, 739, 757, 777, 785, 795, 796, 798, 799, 801, 806, 817, 822, 823, 826, 867, 891, 892, 893, 894, 895, 896, 897, 899, 926, 927, 980, 981, 982, 983, 984, 985, 986, 994, 1111, 1134, 1198, 1210, 1221, 1222, 1223, 1240], "int8": [1, 72, 83, 178, 299, 336, 360, 361, 380, 384, 392, 394, 401, 404, 418, 419, 508, 658, 730, 733, 748, 757, 898, 926, 927, 935, 946, 950, 962, 964, 971, 974, 988, 989, 1080, 1115, 1210, 1227, 1240], "int16": [1, 83, 360, 361, 400, 658, 757, 870, 926, 927, 970, 1210, 1219, 1240], "int32": [1, 83, 88, 105, 108, 121, 145, 146, 186, 187, 189, 190, 204, 234, 299, 345, 387, 388, 390, 397, 421, 572, 664, 733, 757, 795, 796, 798, 799, 822, 867, 870, 953, 957, 959, 967, 991, 1086, 1223, 1240], "b": [1, 15, 36, 37, 39, 41, 42, 45, 66, 67, 69, 72, 83, 88, 105, 106, 107, 108, 109, 110, 111, 112, 121, 154, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 178, 180, 182, 183, 184, 185, 186, 191, 192, 194, 196, 198, 200, 201, 202, 203, 204, 205, 207, 210, 212, 214, 215, 217, 219, 220, 221, 222, 223, 224, 226, 227, 229, 232, 233, 235, 236, 237, 238, 239, 240, 244, 247, 248, 249, 250, 252, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 275, 276, 277, 278, 279, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 299, 307, 309, 310, 312, 313, 326, 338, 339, 341, 342, 343, 345, 356, 368, 371, 428, 430, 432, 433, 434, 436, 439, 446, 449, 451, 452, 454, 458, 461, 463, 464, 465, 467, 471, 477, 483, 489, 498, 499, 500, 501, 517, 520, 525, 536, 539, 540, 541, 542, 549, 550, 552, 556, 558, 560, 563, 567, 569, 571, 591, 597, 599, 610, 614, 626, 654, 657, 668, 672, 674, 675, 676, 677, 679, 683, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 707, 708, 709, 710, 711, 714, 716, 718, 721, 722, 723, 724, 725, 726, 727, 728, 729, 732, 734, 735, 738, 739, 740, 741, 742, 746, 757, 772, 773, 776, 777, 778, 779, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 800, 803, 805, 806, 807, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 823, 824, 828, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 843, 845, 846, 847, 848, 849, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 867, 870, 873, 876, 909, 911, 912, 933, 934, 936, 993, 994, 995, 1001, 1004, 1018, 1026, 1039, 1049, 1070, 1071, 1072, 1073, 1107, 1112, 1161, 1165, 1177, 1206, 1209, 1222, 1226, 1240, 1248], "4": [1, 2, 13, 18, 22, 30, 36, 37, 39, 40, 41, 42, 45, 61, 64, 66, 67, 69, 80, 81, 82, 83, 84, 88, 105, 106, 107, 108, 109, 110, 111, 112, 121, 130, 148, 154, 156, 157, 158, 159, 160, 163, 164, 167, 171, 172, 173, 174, 178, 180, 181, 183, 184, 185, 186, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 209, 211, 212, 213, 215, 216, 218, 219, 220, 222, 223, 224, 225, 226, 230, 234, 236, 237, 243, 244, 248, 251, 252, 254, 255, 256, 257, 262, 263, 264, 266, 267, 268, 269, 271, 272, 273, 275, 276, 278, 279, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 299, 302, 306, 307, 308, 309, 311, 313, 326, 331, 332, 335, 336, 338, 344, 345, 348, 349, 350, 356, 357, 358, 359, 360, 361, 367, 369, 371, 376, 379, 380, 400, 401, 402, 403, 404, 406, 409, 411, 414, 416, 417, 419, 423, 424, 429, 430, 432, 433, 434, 436, 437, 438, 439, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 464, 465, 467, 470, 471, 472, 480, 481, 482, 483, 484, 486, 488, 497, 498, 499, 500, 501, 502, 503, 506, 508, 512, 515, 517, 520, 535, 537, 539, 540, 541, 542, 543, 544, 547, 548, 551, 552, 554, 555, 556, 557, 558, 561, 563, 567, 568, 569, 571, 572, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 587, 589, 593, 597, 598, 599, 600, 603, 606, 612, 617, 618, 623, 624, 626, 632, 633, 634, 635, 641, 642, 643, 647, 652, 653, 655, 656, 657, 659, 664, 665, 666, 672, 673, 675, 677, 679, 681, 682, 683, 684, 685, 687, 688, 690, 692, 693, 694, 695, 701, 702, 704, 705, 707, 709, 710, 714, 716, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 753, 757, 772, 773, 775, 776, 777, 778, 779, 781, 784, 786, 787, 788, 789, 790, 792, 793, 794, 795, 800, 802, 803, 804, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 822, 828, 830, 831, 832, 833, 834, 835, 837, 839, 840, 841, 842, 843, 846, 847, 848, 849, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 870, 876, 879, 886, 893, 894, 897, 898, 905, 914, 915, 917, 932, 934, 936, 945, 950, 957, 959, 962, 964, 965, 966, 967, 971, 972, 973, 976, 979, 981, 984, 986, 987, 988, 989, 994, 1001, 1003, 1004, 1008, 1009, 1013, 1014, 1017, 1018, 1020, 1026, 1031, 1032, 1033, 1034, 1038, 1052, 1053, 1054, 1055, 1056, 1060, 1065, 1067, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1078, 1080, 1094, 1102, 1103, 1104, 1109, 1113, 1114, 1117, 1122, 1124, 1125, 1126, 1127, 1128, 1131, 1139, 1144, 1147, 1148, 1149, 1154, 1157, 1163, 1168, 1169, 1174, 1175, 1183, 1185, 1186, 1192, 1193, 1194, 1198, 1203, 1209, 1211, 1219, 1222, 1223, 1224, 1231, 1240, 1244, 1249], "c": [1, 15, 36, 37, 39, 41, 42, 45, 66, 67, 69, 81, 83, 88, 106, 108, 110, 112, 121, 130, 144, 154, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 171, 175, 178, 182, 183, 184, 185, 186, 192, 194, 196, 204, 205, 207, 210, 212, 214, 215, 217, 219, 220, 221, 222, 224, 226, 227, 229, 232, 233, 235, 238, 239, 240, 247, 248, 249, 250, 252, 254, 257, 258, 259, 260, 261, 263, 264, 267, 268, 270, 271, 273, 278, 282, 283, 284, 286, 287, 289, 292, 293, 299, 307, 309, 310, 312, 314, 338, 368, 434, 452, 467, 477, 489, 517, 520, 539, 540, 552, 556, 560, 591, 634, 643, 668, 675, 677, 679, 685, 687, 688, 690, 692, 693, 695, 708, 709, 710, 711, 714, 718, 721, 723, 724, 725, 726, 727, 728, 729, 738, 740, 741, 742, 746, 753, 757, 773, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 786, 787, 788, 791, 794, 795, 803, 806, 813, 816, 818, 820, 821, 823, 824, 830, 831, 832, 837, 840, 843, 845, 848, 852, 853, 854, 856, 857, 859, 862, 863, 867, 870, 911, 933, 934, 1018, 1039, 1049, 1107, 1185, 1194, 1226, 1240], "5": [1, 12, 13, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 36, 37, 39, 41, 42, 45, 67, 69, 80, 81, 83, 84, 88, 105, 108, 109, 110, 111, 112, 114, 116, 117, 130, 138, 139, 141, 146, 158, 159, 160, 164, 171, 172, 173, 174, 178, 180, 181, 183, 184, 185, 186, 192, 193, 196, 197, 199, 201, 202, 203, 205, 206, 207, 208, 209, 211, 212, 213, 215, 218, 219, 220, 222, 224, 225, 226, 227, 230, 234, 237, 243, 244, 248, 251, 252, 254, 255, 256, 257, 259, 262, 267, 268, 269, 272, 273, 275, 276, 278, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 299, 302, 307, 308, 311, 327, 328, 344, 345, 349, 350, 367, 368, 369, 370, 371, 376, 377, 378, 379, 384, 388, 390, 392, 397, 402, 404, 406, 407, 409, 410, 416, 424, 427, 428, 431, 433, 437, 438, 442, 443, 445, 447, 449, 452, 456, 460, 461, 463, 464, 465, 467, 470, 472, 480, 483, 484, 486, 488, 491, 494, 497, 498, 499, 500, 501, 502, 505, 506, 535, 537, 539, 548, 551, 552, 553, 554, 555, 556, 560, 561, 563, 567, 568, 569, 571, 572, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 587, 593, 599, 606, 616, 617, 618, 647, 656, 659, 665, 666, 679, 684, 685, 686, 688, 690, 692, 693, 694, 695, 701, 706, 707, 708, 709, 710, 714, 716, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 732, 738, 740, 741, 742, 746, 753, 757, 775, 776, 777, 778, 779, 786, 787, 788, 789, 790, 792, 793, 794, 795, 800, 802, 803, 804, 805, 806, 807, 811, 812, 813, 818, 822, 828, 830, 831, 832, 833, 834, 835, 840, 842, 843, 846, 847, 848, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 867, 870, 876, 879, 883, 886, 889, 890, 905, 915, 917, 924, 932, 933, 934, 935, 936, 942, 943, 944, 945, 946, 972, 974, 976, 977, 979, 980, 986, 988, 989, 994, 998, 1001, 1002, 1013, 1014, 1017, 1018, 1024, 1030, 1052, 1055, 1056, 1060, 1063, 1069, 1070, 1071, 1072, 1073, 1074, 1077, 1078, 1086, 1094, 1102, 1103, 1104, 1107, 1108, 1109, 1113, 1114, 1117, 1119, 1120, 1121, 1123, 1124, 1127, 1131, 1144, 1147, 1150, 1157, 1167, 1168, 1198, 1211, 1224, 1227, 1231, 1240, 1249], "6": [1, 13, 18, 36, 37, 39, 40, 41, 42, 43, 44, 45, 67, 69, 71, 81, 83, 88, 89, 90, 105, 108, 109, 110, 111, 138, 158, 161, 165, 166, 167, 168, 169, 171, 172, 175, 180, 181, 182, 183, 184, 186, 192, 194, 196, 197, 199, 201, 202, 203, 205, 209, 210, 211, 212, 213, 214, 215, 217, 218, 221, 224, 225, 226, 227, 229, 230, 232, 234, 235, 236, 237, 238, 239, 240, 244, 247, 248, 249, 250, 251, 252, 254, 256, 257, 258, 259, 260, 261, 264, 266, 267, 269, 270, 271, 273, 275, 276, 283, 292, 293, 299, 302, 307, 311, 338, 345, 360, 361, 371, 376, 380, 394, 399, 400, 401, 412, 413, 415, 418, 419, 422, 424, 432, 433, 439, 442, 447, 449, 451, 472, 473, 474, 484, 498, 499, 500, 501, 520, 548, 551, 559, 562, 563, 564, 568, 570, 572, 575, 576, 577, 578, 579, 581, 582, 583, 587, 599, 606, 610, 617, 618, 647, 656, 659, 673, 692, 693, 694, 707, 710, 716, 721, 722, 740, 753, 757, 775, 778, 779, 780, 782, 783, 784, 785, 786, 787, 788, 791, 792, 793, 795, 800, 802, 803, 805, 807, 809, 813, 816, 818, 820, 822, 823, 824, 826, 828, 830, 831, 832, 835, 839, 842, 843, 846, 847, 853, 862, 863, 867, 870, 915, 921, 923, 926, 927, 936, 969, 989, 994, 1014, 1045, 1046, 1056, 1070, 1071, 1072, 1073, 1094, 1109, 1114, 1116, 1122, 1124, 1126, 1128, 1157, 1161, 1168, 1198, 1210, 1240, 1248, 1249], "7": [1, 21, 32, 36, 37, 39, 40, 41, 42, 43, 44, 45, 69, 81, 83, 88, 158, 161, 162, 164, 165, 166, 168, 169, 171, 175, 180, 182, 186, 192, 194, 197, 205, 210, 212, 214, 216, 217, 221, 224, 227, 229, 232, 234, 235, 237, 238, 239, 240, 244, 247, 249, 250, 251, 252, 258, 259, 260, 261, 267, 269, 270, 271, 299, 307, 311, 335, 361, 376, 380, 400, 402, 403, 417, 419, 429, 442, 447, 451, 472, 498, 499, 500, 501, 551, 563, 568, 572, 582, 599, 646, 659, 692, 693, 704, 710, 721, 722, 740, 757, 775, 780, 783, 785, 787, 791, 793, 795, 800, 802, 803, 807, 814, 816, 819, 820, 822, 823, 824, 828, 835, 867, 870, 883, 897, 942, 946, 953, 972, 973, 987, 989, 999, 1040, 1070, 1071, 1072, 1073, 1113, 1114, 1127, 1197, 1240, 1249], "float32": [1, 15, 37, 58, 83, 158, 178, 258, 259, 299, 719, 775, 867, 870, 1021, 1086, 1240], "lazi": [1, 64, 65, 66, 67, 69, 83, 88, 130, 146, 206, 223, 224, 299, 520, 712, 730, 733, 748, 757, 803, 804, 845, 848, 849, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 867, 870, 1248, 1249], "i16": [1, 83, 380, 400, 419, 591, 757, 870, 970, 1219, 1240, 1249], "i32": [1, 83, 105, 108, 112, 145, 146, 240, 299, 345, 384, 387, 388, 390, 392, 397, 421, 570, 591, 747, 757, 824, 867, 953, 957, 959, 967, 991, 1086, 1116, 1240, 1249], "f32": [1, 83, 158, 258, 299, 591, 757, 775, 867, 870, 1086, 1240], "i64": [1, 2, 15, 18, 21, 22, 26, 32, 61, 64, 66, 81, 82, 83, 84, 88, 105, 106, 107, 108, 109, 110, 111, 112, 118, 130, 157, 159, 160, 161, 165, 167, 168, 171, 172, 174, 175, 180, 181, 183, 184, 185, 186, 192, 194, 196, 198, 200, 202, 205, 206, 209, 210, 215, 216, 217, 222, 223, 224, 226, 229, 230, 232, 233, 234, 238, 240, 244, 247, 248, 250, 252, 255, 261, 263, 264, 265, 266, 267, 268, 269, 271, 273, 275, 276, 277, 278, 279, 282, 283, 284, 285, 286, 289, 292, 293, 299, 307, 309, 313, 329, 330, 331, 332, 333, 334, 335, 337, 338, 344, 350, 357, 358, 359, 360, 361, 368, 370, 371, 383, 408, 410, 411, 412, 413, 414, 415, 416, 428, 430, 431, 433, 434, 435, 436, 438, 439, 441, 442, 444, 447, 449, 450, 451, 452, 456, 457, 460, 461, 463, 464, 465, 467, 469, 472, 475, 476, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 509, 510, 514, 517, 518, 520, 535, 536, 537, 539, 540, 541, 542, 543, 544, 552, 553, 556, 557, 558, 559, 560, 563, 564, 565, 567, 568, 569, 570, 571, 572, 586, 588, 589, 591, 592, 593, 597, 598, 599, 626, 627, 647, 652, 653, 655, 656, 657, 658, 659, 665, 666, 667, 669, 672, 680, 685, 687, 689, 692, 693, 694, 695, 706, 707, 708, 709, 710, 714, 716, 717, 718, 719, 721, 722, 723, 724, 727, 728, 732, 736, 737, 740, 741, 742, 747, 753, 757, 773, 776, 778, 779, 782, 783, 784, 787, 788, 790, 791, 792, 793, 794, 795, 800, 803, 804, 805, 807, 809, 810, 813, 814, 815, 817, 818, 820, 821, 822, 824, 826, 828, 831, 832, 834, 835, 837, 838, 839, 840, 843, 846, 847, 848, 849, 852, 853, 854, 855, 856, 859, 862, 863, 867, 870, 872, 873, 876, 893, 894, 895, 896, 897, 899, 905, 917, 920, 924, 925, 926, 927, 933, 934, 949, 978, 980, 981, 982, 983, 984, 985, 986, 1001, 1002, 1004, 1005, 1008, 1009, 1013, 1026, 1053, 1054, 1056, 1057, 1058, 1059, 1060, 1062, 1065, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1081, 1082, 1088, 1093, 1107, 1112, 1113, 1114, 1116, 1120, 1123, 1127, 1131, 1132, 1135, 1139, 1143, 1144, 1148, 1149, 1198, 1209, 1211, 1218, 1224, 1225, 1231, 1240, 1248, 1249], "register_series_namespac": [1, 81, 82, 83], "math": [1, 15, 84, 369, 681, 682, 757, 921, 923, 1145, 1214, 1240], "mathshortcut": [1, 84], "": [1, 2, 16, 37, 39, 40, 45, 58, 64, 67, 72, 84, 105, 106, 112, 116, 117, 118, 119, 121, 127, 131, 132, 135, 136, 148, 157, 158, 167, 170, 175, 180, 185, 186, 188, 189, 196, 202, 205, 206, 215, 222, 224, 230, 232, 237, 240, 241, 248, 257, 263, 265, 266, 267, 268, 273, 274, 299, 383, 406, 409, 428, 434, 468, 489, 518, 520, 529, 536, 545, 546, 552, 553, 565, 570, 571, 599, 603, 611, 612, 613, 626, 632, 633, 635, 643, 644, 645, 649, 650, 653, 655, 674, 675, 676, 677, 683, 688, 691, 694, 695, 698, 699, 708, 711, 712, 721, 722, 723, 724, 727, 728, 736, 737, 739, 740, 741, 747, 753, 757, 773, 775, 783, 784, 794, 795, 797, 798, 804, 813, 824, 825, 832, 837, 838, 839, 840, 843, 844, 850, 855, 867, 870, 872, 873, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 898, 905, 906, 908, 909, 911, 912, 913, 914, 915, 916, 917, 920, 921, 922, 923, 924, 925, 926, 927, 932, 933, 934, 935, 936, 937, 938, 940, 942, 946, 948, 949, 952, 954, 955, 959, 961, 965, 966, 970, 973, 974, 976, 979, 987, 989, 990, 991, 995, 996, 997, 998, 999, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1012, 1013, 1017, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1045, 1046, 1047, 1048, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1065, 1066, 1067, 1068, 1069, 1074, 1075, 1076, 1077, 1078, 1080, 1082, 1083, 1084, 1085, 1086, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1097, 1098, 1100, 1101, 1102, 1103, 1104, 1107, 1108, 1109, 1112, 1113, 1114, 1115, 1116, 1117, 1119, 1120, 1121, 1122, 1123, 1124, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1135, 1137, 1139, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1154, 1155, 1157, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1168, 1169, 1174, 1175, 1177, 1179, 1180, 1183, 1186, 1187, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1206, 1207, 1209, 1210, 1211, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1240, 1244], "_": [1, 80, 84, 224, 257, 299, 489, 604, 612, 617, 618, 628, 633, 634, 911, 1155, 1163, 1168, 1169, 1179, 1185, 1217, 1240], "squar": [1, 84, 285, 468, 600, 757, 855, 1041, 1150, 1240], "cube": [1, 84, 348, 557, 757, 913, 1240], "s2": [1, 71, 89, 90, 141, 142, 178, 299, 915, 936, 994, 1026, 1040, 1049, 1081, 1094, 1222, 1231, 1240], "renam": [1, 108, 116, 117, 155, 176, 179, 187, 188, 189, 190, 195, 231, 240, 241, 253, 273, 274, 278, 280, 299, 309, 314, 362, 363, 364, 365, 366, 455, 459, 462, 467, 479, 492, 507, 516, 517, 519, 532, 540, 541, 542, 558, 573, 605, 615, 619, 620, 621, 622, 625, 630, 631, 637, 655, 657, 660, 661, 678, 698, 699, 720, 736, 739, 757, 796, 797, 798, 799, 808, 824, 825, 836, 843, 844, 848, 850, 867, 873, 877, 928, 929, 930, 931, 933, 1023, 1029, 1051, 1064, 1079, 1087, 1107, 1118, 1134, 1136, 1156, 1166, 1170, 1171, 1172, 1173, 1176, 1181, 1182, 1188, 1207, 1212, 1213, 1218, 1240], "n2": 1, "in_plac": [1, 194, 246, 271, 299, 1110, 1142, 1149, 1240], "true": [1, 6, 12, 13, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 37, 39, 40, 43, 45, 58, 59, 60, 64, 66, 68, 86, 87, 88, 105, 106, 110, 112, 114, 116, 117, 118, 120, 121, 122, 124, 127, 128, 130, 131, 133, 134, 135, 136, 139, 140, 141, 142, 143, 144, 146, 147, 148, 152, 154, 157, 158, 159, 160, 164, 169, 174, 178, 179, 183, 184, 185, 186, 187, 188, 189, 190, 196, 198, 199, 200, 203, 206, 207, 212, 213, 219, 220, 222, 224, 226, 234, 235, 236, 237, 238, 240, 248, 251, 255, 257, 259, 260, 263, 264, 265, 266, 267, 268, 269, 273, 279, 282, 284, 286, 287, 288, 289, 290, 291, 292, 299, 308, 309, 310, 311, 312, 313, 314, 325, 327, 328, 334, 339, 340, 342, 343, 345, 357, 358, 359, 360, 361, 368, 375, 377, 380, 383, 386, 395, 396, 399, 400, 402, 403, 404, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 422, 423, 424, 425, 426, 427, 441, 443, 444, 445, 448, 452, 453, 454, 456, 457, 458, 460, 461, 463, 464, 465, 466, 468, 470, 473, 474, 478, 486, 504, 507, 509, 515, 518, 520, 524, 525, 526, 527, 528, 529, 531, 532, 547, 548, 549, 551, 554, 555, 560, 565, 572, 575, 576, 577, 578, 579, 580, 581, 582, 583, 586, 591, 596, 598, 599, 602, 603, 604, 606, 607, 609, 614, 616, 625, 633, 634, 636, 643, 644, 645, 647, 649, 653, 655, 667, 670, 673, 674, 675, 676, 677, 678, 680, 683, 684, 688, 701, 703, 704, 710, 716, 722, 730, 733, 739, 744, 747, 748, 757, 773, 775, 776, 777, 778, 779, 786, 788, 790, 794, 795, 796, 797, 798, 799, 803, 804, 806, 808, 809, 813, 818, 822, 824, 826, 830, 832, 837, 838, 839, 840, 843, 849, 852, 854, 856, 857, 858, 859, 860, 861, 862, 867, 870, 874, 875, 877, 887, 889, 890, 896, 901, 906, 909, 912, 915, 916, 933, 940, 941, 943, 946, 948, 949, 950, 952, 956, 957, 959, 962, 964, 965, 966, 967, 969, 970, 971, 972, 973, 974, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 993, 994, 996, 997, 998, 1005, 1011, 1014, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1045, 1046, 1050, 1058, 1076, 1079, 1088, 1094, 1100, 1103, 1104, 1107, 1111, 1125, 1134, 1147, 1149, 1153, 1154, 1155, 1157, 1158, 1160, 1165, 1167, 1176, 1184, 1185, 1187, 1194, 1195, 1196, 1198, 1200, 1221, 1222, 1228, 1230, 1231, 1240, 1249], "s3": [1, 39, 120, 131, 132, 135, 136, 299, 1081, 1240], "n3": 1, "8": [1, 16, 36, 37, 39, 41, 42, 43, 44, 45, 57, 58, 64, 69, 70, 77, 80, 81, 83, 84, 88, 138, 144, 146, 158, 161, 162, 164, 165, 166, 167, 168, 169, 171, 175, 180, 182, 184, 192, 194, 202, 205, 209, 210, 212, 214, 217, 227, 229, 232, 235, 237, 238, 239, 240, 244, 247, 249, 250, 252, 258, 259, 260, 261, 267, 270, 271, 273, 299, 311, 313, 326, 358, 361, 367, 376, 442, 448, 451, 481, 483, 492, 498, 499, 500, 501, 537, 551, 557, 568, 569, 574, 591, 597, 599, 619, 622, 623, 624, 643, 673, 679, 688, 690, 693, 695, 707, 709, 714, 718, 721, 722, 723, 724, 725, 726, 727, 728, 729, 738, 741, 742, 746, 757, 775, 780, 783, 784, 785, 787, 791, 793, 800, 803, 807, 809, 818, 820, 823, 824, 828, 835, 843, 867, 870, 923, 932, 953, 1014, 1040, 1053, 1055, 1064, 1070, 1071, 1072, 1073, 1102, 1114, 1117, 1119, 1122, 1124, 1126, 1128, 1170, 1173, 1174, 1175, 1194, 1240, 1249], "9": [1, 14, 36, 37, 39, 40, 41, 42, 45, 64, 69, 80, 88, 138, 162, 164, 178, 187, 192, 197, 209, 234, 236, 237, 240, 251, 252, 267, 271, 273, 292, 299, 307, 311, 313, 326, 333, 334, 358, 361, 369, 376, 434, 442, 451, 457, 467, 481, 496, 504, 539, 551, 562, 568, 572, 574, 580, 582, 593, 597, 612, 646, 654, 686, 692, 693, 745, 757, 796, 800, 802, 807, 822, 824, 835, 843, 862, 867, 870, 891, 892, 895, 896, 934, 946, 957, 959, 967, 973, 987, 988, 1026, 1040, 1053, 1068, 1076, 1114, 1119, 1125, 1127, 1129, 1144, 1163, 1197, 1206, 1240], "27": [1, 84, 292, 361, 394, 401, 418, 757, 862, 1240, 1249], "16": [1, 40, 54, 74, 82, 138, 179, 186, 234, 273, 299, 358, 361, 451, 519, 537, 557, 572, 647, 692, 706, 707, 710, 757, 795, 822, 830, 843, 867, 870, 973, 987, 1087, 1102, 1134, 1145, 1198, 1214, 1240], "64": [1, 53, 56, 76, 82, 84, 137, 154, 355, 537, 557, 757, 1102, 1240], "25": [1, 32, 40, 84, 112, 146, 164, 186, 206, 234, 269, 273, 299, 370, 380, 382, 400, 403, 417, 419, 560, 572, 575, 576, 577, 578, 579, 581, 582, 583, 666, 701, 702, 704, 705, 706, 712, 722, 744, 745, 757, 795, 804, 811, 822, 841, 843, 867, 870, 934, 935, 948, 973, 987, 993, 1014, 1102, 1107, 1240], "125": [1, 40, 84, 299, 307, 757, 1102, 1240], "inner": [2, 61, 145, 205, 268, 299, 336, 371, 489, 508, 566, 664, 757, 803, 826, 840, 867, 898, 936, 1061, 1080, 1223, 1240], "polarsdatatyp": [2, 61, 116, 117, 130, 143, 144, 145, 146, 148, 155, 158, 209, 299, 314, 345, 428, 516, 518, 519, 520, 567, 614, 615, 678, 708, 719, 720, 721, 722, 730, 733, 748, 753, 757, 775, 867, 870, 877, 906, 1087, 1088, 1113, 1165, 1166, 1240], "pythondatatyp": [2, 61], "width": [2, 31, 40, 116, 117, 130, 225, 299, 302, 508, 867, 1080], "int": [2, 15, 17, 18, 19, 22, 30, 31, 37, 38, 40, 45, 49, 58, 60, 66, 69, 82, 108, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 127, 128, 130, 131, 133, 134, 135, 136, 137, 144, 145, 146, 147, 148, 149, 150, 155, 157, 159, 164, 170, 173, 174, 176, 180, 182, 184, 191, 192, 193, 195, 196, 201, 203, 204, 206, 208, 209, 210, 212, 217, 219, 220, 231, 232, 235, 238, 243, 244, 245, 247, 249, 250, 252, 253, 258, 261, 263, 267, 270, 272, 275, 276, 283, 293, 299, 307, 338, 344, 367, 370, 425, 426, 427, 431, 432, 433, 439, 441, 442, 444, 446, 447, 448, 472, 478, 481, 486, 487, 488, 497, 502, 503, 506, 507, 508, 509, 551, 553, 556, 557, 560, 563, 566, 568, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 590, 592, 597, 601, 611, 614, 615, 620, 623, 624, 625, 626, 630, 632, 634, 635, 646, 647, 652, 659, 660, 661, 665, 671, 673, 680, 688, 690, 700, 703, 706, 712, 714, 716, 717, 730, 733, 734, 735, 738, 739, 742, 743, 746, 748, 757, 773, 776, 788, 789, 790, 793, 800, 804, 807, 818, 828, 829, 831, 833, 835, 836, 837, 841, 842, 846, 847, 853, 863, 867, 884, 885, 905, 906, 915, 916, 932, 935, 995, 996, 997, 998, 1002, 1003, 1004, 1008, 1009, 1012, 1013, 1014, 1040, 1042, 1043, 1050, 1051, 1052, 1053, 1058, 1059, 1060, 1069, 1074, 1075, 1078, 1079, 1080, 1081, 1094, 1095, 1097, 1098, 1099, 1101, 1102, 1106, 1107, 1109, 1114, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1135, 1136, 1139, 1140, 1143, 1148, 1151, 1162, 1165, 1166, 1171, 1174, 1175, 1176, 1177, 1181, 1183, 1185, 1186, 1197, 1198, 1203, 1210, 1211, 1212, 1213, 1219, 1224, 1229, 1240, 1248, 1249], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 299, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 753, 757, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1206, 1207, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1240, 1248], "fix": [2, 15, 51, 121, 144, 146, 420, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 706, 757, 990, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1126, 1127, 1128, 1240], "length": [2, 61, 88, 116, 117, 130, 144, 184, 186, 187, 189, 190, 225, 234, 247, 299, 302, 367, 403, 417, 503, 509, 529, 567, 570, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 597, 617, 618, 620, 622, 623, 624, 630, 632, 652, 730, 733, 734, 735, 748, 757, 795, 796, 798, 799, 818, 822, 831, 867, 915, 932, 942, 973, 987, 1075, 1081, 1099, 1113, 1116, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1126, 1127, 1128, 1148, 1168, 1169, 1171, 1173, 1174, 1175, 1181, 1183, 1203, 1240], "paramet": [2, 5, 7, 8, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 50, 51, 58, 59, 60, 61, 64, 65, 66, 67, 69, 72, 80, 81, 82, 83, 84, 86, 87, 88, 90, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 154, 155, 157, 158, 159, 162, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 201, 203, 204, 205, 206, 208, 209, 210, 212, 213, 215, 216, 217, 219, 220, 222, 223, 224, 227, 229, 230, 231, 232, 234, 235, 236, 237, 238, 240, 241, 242, 244, 245, 247, 248, 249, 250, 251, 252, 253, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 278, 280, 283, 285, 291, 293, 299, 307, 309, 310, 311, 312, 313, 314, 324, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 350, 351, 352, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 375, 376, 377, 383, 399, 402, 403, 404, 406, 408, 409, 417, 420, 422, 423, 424, 425, 426, 427, 428, 431, 433, 434, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 451, 452, 457, 468, 470, 472, 477, 478, 479, 480, 481, 483, 486, 487, 488, 489, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 515, 516, 517, 518, 519, 520, 531, 535, 537, 540, 541, 542, 547, 548, 551, 552, 553, 556, 557, 558, 560, 561, 563, 565, 566, 567, 568, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 620, 621, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 652, 653, 655, 656, 657, 659, 660, 661, 665, 666, 667, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 753, 757, 773, 775, 776, 778, 779, 782, 783, 784, 786, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 803, 804, 807, 808, 809, 813, 814, 817, 818, 819, 820, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 850, 853, 855, 861, 863, 867, 870, 873, 874, 875, 876, 877, 886, 896, 899, 900, 901, 902, 903, 904, 905, 906, 910, 916, 917, 918, 919, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 941, 942, 943, 949, 969, 972, 973, 974, 976, 978, 979, 987, 990, 993, 994, 995, 996, 997, 998, 1001, 1002, 1003, 1004, 1005, 1008, 1009, 1012, 1013, 1014, 1017, 1018, 1028, 1036, 1037, 1041, 1043, 1049, 1050, 1051, 1052, 1053, 1055, 1058, 1059, 1060, 1061, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1078, 1079, 1080, 1081, 1082, 1087, 1088, 1102, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1139, 1140, 1143, 1147, 1148, 1149, 1151, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1162, 1163, 1164, 1165, 1166, 1167, 1171, 1172, 1174, 1175, 1176, 1177, 1178, 1179, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1200, 1203, 1204, 1207, 1211, 1212, 1213, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1229, 1230, 1231, 1240, 1248], "The": [2, 25, 38, 39, 40, 45, 60, 61, 64, 68, 71, 72, 80, 85, 86, 90, 105, 107, 108, 109, 111, 114, 116, 117, 118, 119, 121, 125, 126, 128, 130, 134, 135, 136, 139, 140, 141, 142, 150, 164, 166, 167, 168, 171, 172, 175, 184, 185, 186, 189, 191, 197, 203, 206, 209, 216, 222, 234, 235, 236, 237, 240, 241, 259, 266, 269, 273, 274, 276, 278, 285, 299, 309, 338, 339, 340, 341, 368, 372, 373, 380, 394, 399, 400, 403, 406, 417, 418, 428, 431, 434, 439, 446, 482, 486, 507, 518, 519, 520, 552, 560, 563, 566, 567, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 593, 596, 602, 607, 608, 611, 614, 615, 621, 623, 624, 631, 637, 638, 639, 640, 641, 642, 643, 712, 722, 734, 735, 736, 739, 747, 749, 750, 752, 753, 757, 758, 759, 762, 764, 765, 766, 784, 787, 791, 795, 798, 800, 802, 804, 807, 809, 814, 818, 822, 824, 825, 826, 839, 843, 844, 847, 848, 855, 867, 873, 876, 900, 901, 902, 916, 933, 934, 937, 938, 946, 964, 969, 970, 973, 976, 987, 988, 1001, 1002, 1005, 1012, 1054, 1058, 1087, 1088, 1107, 1109, 1113, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1144, 1147, 1153, 1158, 1159, 1165, 1166, 1172, 1174, 1175, 1182, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1232, 1234, 1236, 1240, 1241, 1245, 1246, 1247, 1249], "datatyp": [2, 37, 43, 58, 61, 78, 105, 107, 108, 109, 111, 113, 121, 123, 125, 126, 129, 134, 148, 168, 171, 178, 239, 299, 345, 428, 591, 664, 708, 719, 757, 769, 785, 787, 823, 826, 867, 877, 906, 934, 1028, 1035, 1037, 1039, 1088, 1141, 1223, 1240], "valu": [2, 5, 9, 15, 16, 17, 18, 22, 33, 35, 37, 40, 43, 58, 61, 62, 64, 68, 71, 78, 80, 88, 90, 108, 110, 116, 117, 118, 119, 121, 130, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 154, 156, 157, 164, 167, 169, 172, 173, 174, 175, 179, 184, 186, 189, 191, 192, 197, 201, 203, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 220, 222, 224, 226, 227, 229, 234, 235, 236, 237, 238, 244, 245, 248, 249, 250, 251, 252, 255, 256, 260, 263, 264, 267, 268, 269, 270, 281, 282, 284, 286, 287, 289, 290, 299, 306, 307, 308, 310, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 335, 337, 338, 340, 341, 342, 343, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 358, 361, 367, 368, 370, 372, 373, 376, 380, 394, 400, 418, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 463, 464, 465, 466, 469, 470, 471, 473, 474, 475, 476, 479, 480, 481, 482, 485, 487, 488, 490, 491, 493, 494, 495, 497, 502, 505, 506, 509, 510, 512, 514, 515, 518, 519, 520, 521, 522, 523, 534, 535, 536, 537, 538, 545, 546, 547, 548, 550, 552, 553, 556, 557, 560, 561, 563, 566, 567, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 586, 587, 588, 589, 590, 593, 594, 595, 596, 598, 599, 600, 602, 603, 605, 606, 607, 608, 609, 611, 614, 615, 616, 623, 624, 626, 627, 629, 632, 634, 635, 636, 652, 654, 656, 658, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 673, 674, 676, 679, 685, 687, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 709, 710, 715, 716, 718, 719, 723, 724, 725, 726, 727, 728, 729, 732, 733, 734, 735, 740, 741, 747, 757, 772, 773, 784, 789, 790, 791, 795, 798, 801, 802, 803, 804, 810, 811, 812, 813, 815, 816, 819, 820, 822, 826, 828, 829, 832, 833, 834, 837, 840, 841, 851, 852, 854, 856, 857, 859, 860, 867, 870, 872, 874, 875, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 894, 897, 899, 901, 902, 903, 904, 910, 914, 917, 918, 919, 921, 922, 923, 932, 933, 934, 935, 937, 938, 942, 946, 964, 970, 988, 994, 995, 996, 997, 998, 1001, 1002, 1003, 1004, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1020, 1022, 1023, 1024, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1038, 1042, 1043, 1045, 1046, 1047, 1048, 1051, 1052, 1053, 1054, 1057, 1059, 1060, 1062, 1063, 1065, 1066, 1067, 1069, 1074, 1077, 1078, 1082, 1087, 1089, 1090, 1092, 1093, 1095, 1097, 1098, 1099, 1101, 1102, 1106, 1107, 1108, 1109, 1113, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1131, 1132, 1133, 1134, 1135, 1136, 1139, 1140, 1144, 1145, 1146, 1147, 1153, 1154, 1156, 1157, 1158, 1159, 1160, 1162, 1163, 1164, 1165, 1166, 1167, 1174, 1175, 1177, 1178, 1180, 1183, 1185, 1186, 1187, 1203, 1206, 1210, 1211, 1212, 1213, 1214, 1215, 1221, 1222, 1223, 1226, 1228, 1230, 1231, 1240, 1249], "within": [2, 61, 139, 140, 141, 142, 185, 186, 187, 188, 189, 190, 191, 206, 234, 269, 299, 446, 563, 572, 599, 757, 795, 796, 798, 799, 804, 822, 867, 1012, 1240, 1248], "each": [2, 37, 40, 58, 61, 80, 117, 118, 134, 139, 140, 141, 142, 144, 163, 175, 184, 185, 186, 187, 188, 189, 190, 204, 206, 209, 222, 234, 238, 260, 266, 268, 269, 277, 278, 281, 283, 285, 293, 299, 368, 403, 417, 434, 455, 456, 459, 460, 488, 491, 492, 497, 506, 513, 520, 560, 563, 571, 577, 579, 581, 583, 586, 592, 599, 612, 617, 618, 619, 622, 634, 635, 680, 683, 687, 716, 717, 739, 747, 757, 778, 781, 791, 795, 796, 798, 799, 804, 818, 822, 839, 840, 848, 850, 851, 853, 855, 863, 867, 915, 933, 973, 987, 1023, 1024, 1029, 1030, 1060, 1063, 1064, 1069, 1078, 1107, 1109, 1117, 1131, 1143, 1163, 1168, 1169, 1170, 1173, 1185, 1186, 1209, 1240, 1249], "exampl": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 71, 72, 80, 81, 82, 83, 84, 88, 89, 90, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 121, 127, 130, 131, 132, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 178, 180, 181, 182, 183, 184, 185, 186, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 299, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 348, 349, 350, 353, 354, 355, 356, 357, 358, 359, 360, 361, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 386, 387, 388, 390, 392, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 623, 624, 626, 627, 628, 629, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 701, 702, 704, 706, 707, 708, 709, 710, 711, 712, 714, 716, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 753, 757, 769, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 828, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 905, 906, 908, 909, 911, 912, 913, 914, 915, 916, 917, 920, 921, 922, 923, 924, 925, 926, 927, 932, 933, 934, 935, 936, 937, 938, 940, 941, 942, 943, 944, 945, 946, 948, 949, 950, 952, 953, 954, 955, 956, 957, 959, 961, 962, 964, 965, 966, 967, 969, 970, 971, 972, 973, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 993, 994, 995, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1012, 1013, 1014, 1017, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1100, 1101, 1102, 1103, 1104, 1107, 1108, 1109, 1112, 1113, 1114, 1115, 1116, 1117, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1135, 1137, 1139, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1153, 1154, 1155, 1157, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1167, 1168, 1169, 1174, 1175, 1177, 1178, 1179, 1180, 1183, 1185, 1186, 1187, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1206, 1209, 1210, 1211, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1231, 1240, 1248], "dtype": [2, 15, 40, 48, 71, 72, 83, 89, 90, 105, 107, 109, 111, 112, 116, 117, 118, 119, 125, 126, 127, 130, 143, 144, 145, 146, 148, 154, 158, 186, 187, 189, 190, 206, 234, 258, 259, 260, 267, 276, 299, 314, 345, 346, 360, 361, 420, 428, 441, 477, 486, 507, 514, 516, 518, 519, 520, 565, 566, 572, 575, 576, 577, 578, 579, 581, 582, 583, 591, 614, 615, 643, 658, 660, 664, 669, 678, 680, 689, 708, 712, 716, 717, 719, 720, 721, 722, 730, 733, 739, 748, 757, 775, 795, 796, 798, 799, 804, 822, 847, 867, 870, 889, 890, 891, 892, 893, 894, 895, 896, 898, 906, 908, 909, 911, 916, 926, 927, 934, 935, 990, 994, 995, 1019, 1021, 1025, 1028, 1035, 1037, 1039, 1045, 1046, 1049, 1058, 1080, 1086, 1087, 1115, 1134, 1141, 1165, 1166, 1194, 1210, 1219, 1221, 1222, 1223, 1227, 1240, 1249], "method": [2, 3, 4, 5, 9, 36, 39, 40, 41, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 61, 62, 63, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 87, 88, 106, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 127, 128, 129, 136, 143, 152, 155, 167, 172, 176, 179, 185, 187, 188, 189, 190, 195, 197, 203, 209, 210, 212, 217, 220, 227, 231, 235, 236, 237, 244, 250, 253, 265, 273, 280, 285, 291, 299, 307, 310, 311, 314, 350, 362, 363, 364, 365, 366, 406, 409, 423, 424, 431, 438, 443, 445, 451, 455, 459, 462, 467, 470, 479, 492, 502, 507, 515, 516, 517, 519, 520, 535, 537, 539, 541, 542, 543, 544, 547, 548, 551, 557, 558, 561, 563, 573, 575, 576, 577, 578, 579, 581, 582, 583, 589, 605, 615, 619, 620, 621, 622, 625, 630, 631, 637, 639, 640, 641, 642, 646, 652, 656, 657, 660, 661, 666, 668, 673, 688, 722, 731, 749, 750, 752, 753, 757, 758, 759, 762, 763, 764, 765, 766, 769, 779, 782, 784, 796, 797, 798, 799, 802, 808, 819, 828, 836, 838, 843, 850, 855, 861, 867, 876, 877, 917, 928, 929, 930, 931, 976, 979, 1001, 1002, 1017, 1023, 1029, 1051, 1064, 1074, 1079, 1087, 1088, 1108, 1109, 1118, 1124, 1134, 1136, 1139, 1156, 1166, 1170, 1171, 1172, 1173, 1176, 1181, 1182, 1188, 1197, 1203, 1212, 1213, 1223, 1230, 1232, 1234, 1236, 1240, 1241, 1245, 1246, 1247], "attribut": [2, 5, 48, 49, 50, 51, 61, 72, 143, 299, 749, 750, 752, 753, 758, 759, 762, 764, 765, 766, 867, 1232, 1234, 1236, 1241, 1245, 1246, 1247], "arg": [3, 4, 46, 47, 52, 53, 54, 55, 56, 57, 62, 63, 67, 70, 71, 73, 74, 75, 76, 77, 78, 175, 223, 260, 299, 556, 683, 711, 757, 791, 817, 867, 1088, 1221, 1222, 1240], "kwarg": [3, 4, 46, 47, 52, 53, 54, 55, 56, 57, 62, 63, 67, 70, 71, 73, 74, 75, 76, 77, 78, 118, 162, 175, 223, 260, 299, 556, 757, 791, 817, 867, 1222, 1240, 1248], "order": [5, 15, 40, 58, 59, 60, 64, 66, 80, 86, 108, 118, 137, 139, 140, 157, 167, 175, 185, 186, 187, 188, 189, 190, 205, 222, 223, 224, 234, 238, 242, 248, 259, 263, 265, 269, 299, 324, 334, 337, 347, 372, 373, 434, 482, 497, 504, 510, 563, 572, 576, 577, 578, 579, 581, 583, 586, 587, 588, 598, 599, 629, 639, 640, 641, 642, 655, 667, 668, 670, 683, 747, 757, 768, 773, 784, 791, 794, 795, 796, 797, 798, 799, 803, 813, 822, 827, 832, 837, 838, 867, 886, 896, 899, 910, 912, 937, 938, 1005, 1036, 1054, 1069, 1076, 1082, 1109, 1115, 1131, 1133, 1137, 1149, 1180, 1207, 1225, 1226, 1228, 1240, 1249], "categoricalord": [5, 347, 910], "none": [5, 6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 48, 49, 58, 59, 60, 62, 64, 65, 66, 67, 69, 80, 87, 90, 105, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 155, 159, 163, 164, 167, 173, 174, 184, 186, 187, 189, 190, 191, 197, 201, 205, 206, 207, 209, 210, 212, 215, 217, 220, 221, 224, 234, 235, 238, 244, 245, 247, 248, 250, 255, 257, 260, 264, 265, 266, 267, 268, 269, 281, 299, 310, 312, 313, 314, 326, 327, 328, 338, 350, 356, 358, 361, 368, 372, 373, 379, 399, 402, 403, 417, 424, 425, 426, 427, 428, 431, 432, 433, 439, 446, 448, 451, 452, 461, 463, 464, 465, 471, 473, 474, 482, 487, 491, 497, 498, 499, 500, 501, 503, 509, 516, 518, 519, 520, 528, 531, 533, 548, 549, 550, 553, 557, 560, 563, 564, 567, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 586, 589, 590, 591, 592, 593, 597, 598, 602, 603, 606, 608, 609, 612, 614, 615, 616, 617, 618, 621, 623, 624, 625, 631, 632, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 647, 649, 652, 653, 654, 655, 664, 674, 675, 676, 677, 678, 680, 685, 687, 689, 691, 695, 701, 702, 703, 704, 705, 706, 708, 709, 716, 718, 719, 720, 721, 722, 724, 728, 733, 734, 735, 739, 741, 743, 744, 745, 747, 757, 776, 777, 779, 781, 784, 789, 790, 795, 796, 798, 799, 802, 803, 804, 806, 808, 809, 813, 816, 822, 826, 828, 829, 830, 831, 832, 838, 839, 840, 845, 850, 851, 855, 867, 870, 874, 875, 877, 884, 885, 889, 890, 916, 917, 933, 934, 936, 937, 938, 945, 954, 955, 956, 961, 972, 973, 987, 992, 993, 996, 997, 998, 1002, 1003, 1004, 1006, 1012, 1014, 1016, 1017, 1018, 1028, 1033, 1034, 1037, 1040, 1041, 1042, 1045, 1046, 1049, 1054, 1059, 1063, 1069, 1070, 1071, 1072, 1073, 1075, 1081, 1087, 1088, 1089, 1090, 1091, 1092, 1096, 1101, 1105, 1107, 1108, 1109, 1113, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1126, 1127, 1128, 1131, 1132, 1135, 1136, 1138, 1139, 1140, 1143, 1144, 1147, 1148, 1151, 1153, 1154, 1157, 1159, 1160, 1163, 1165, 1166, 1167, 1168, 1169, 1172, 1174, 1175, 1176, 1182, 1183, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1194, 1195, 1196, 1198, 1200, 1203, 1206, 1218, 1219, 1220, 1222, 1223, 1229, 1240, 1248], "physic": [5, 71, 90, 116, 117, 206, 299, 347, 664, 757, 774, 803, 804, 867, 910, 911, 1223, 1240], "A": [5, 18, 37, 40, 51, 58, 64, 67, 86, 87, 112, 116, 117, 118, 119, 130, 132, 137, 150, 178, 186, 205, 206, 211, 213, 218, 224, 251, 255, 267, 268, 269, 273, 274, 299, 306, 372, 373, 376, 423, 424, 431, 443, 445, 454, 458, 461, 463, 470, 509, 515, 518, 529, 547, 548, 569, 574, 575, 576, 577, 578, 579, 581, 582, 583, 603, 604, 605, 606, 611, 612, 613, 616, 626, 627, 628, 652, 686, 706, 707, 711, 757, 795, 803, 804, 820, 840, 843, 844, 867, 870, 937, 938, 942, 1002, 1119, 1120, 1121, 1123, 1126, 1127, 1128, 1154, 1155, 1156, 1157, 1162, 1163, 1164, 1167, 1177, 1178, 1179, 1203, 1240, 1248], "encod": [5, 51, 70, 116, 117, 130, 257, 299, 340, 440, 607, 654, 757, 901, 1158], "set": [5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 21, 22, 25, 30, 31, 32, 35, 37, 39, 40, 41, 42, 43, 44, 51, 58, 59, 60, 80, 81, 106, 108, 111, 116, 117, 118, 121, 122, 124, 127, 128, 130, 133, 134, 135, 136, 137, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 152, 154, 161, 167, 177, 185, 186, 187, 188, 189, 190, 191, 203, 206, 210, 212, 213, 215, 217, 234, 238, 240, 247, 250, 251, 257, 259, 264, 265, 267, 273, 299, 310, 312, 314, 350, 368, 420, 446, 457, 486, 497, 498, 499, 500, 501, 503, 507, 509, 518, 519, 520, 556, 560, 567, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 586, 592, 596, 597, 602, 621, 631, 632, 637, 638, 639, 640, 641, 642, 643, 644, 645, 649, 670, 674, 676, 680, 684, 701, 702, 704, 705, 709, 716, 717, 718, 730, 733, 734, 735, 739, 744, 745, 747, 748, 757, 769, 778, 784, 786, 794, 795, 796, 797, 798, 799, 803, 804, 808, 809, 813, 822, 824, 826, 831, 838, 843, 850, 855, 867, 874, 875, 912, 917, 933, 990, 1012, 1026, 1058, 1069, 1070, 1071, 1072, 1073, 1075, 1079, 1081, 1087, 1088, 1107, 1113, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1126, 1127, 1128, 1131, 1132, 1136, 1143, 1147, 1148, 1153, 1172, 1182, 1183, 1188, 1189, 1190, 1191, 1194, 1195, 1196, 1200, 1221, 1228, 1240, 1249], "lexic": [5, 347, 870, 910, 912], "appear": [5, 40, 108, 299, 668, 757, 1226, 1240], "default": [5, 9, 12, 14, 15, 19, 32, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 58, 60, 80, 87, 88, 105, 107, 108, 109, 110, 111, 112, 116, 117, 119, 121, 125, 126, 127, 128, 130, 139, 141, 143, 144, 145, 146, 147, 148, 152, 164, 167, 170, 185, 186, 187, 188, 189, 190, 191, 203, 205, 206, 213, 215, 222, 224, 234, 235, 236, 237, 238, 244, 249, 251, 257, 265, 267, 268, 270, 275, 299, 309, 310, 312, 347, 368, 402, 403, 417, 422, 424, 425, 426, 427, 446, 486, 497, 502, 503, 507, 509, 511, 519, 528, 545, 546, 548, 553, 560, 563, 567, 572, 575, 576, 577, 578, 579, 581, 582, 583, 586, 589, 592, 601, 602, 611, 621, 625, 631, 632, 637, 638, 639, 640, 643, 644, 645, 647, 649, 670, 671, 674, 676, 680, 684, 688, 690, 701, 702, 703, 704, 705, 709, 712, 716, 717, 718, 719, 730, 733, 738, 739, 744, 745, 746, 748, 757, 778, 779, 784, 786, 794, 795, 796, 797, 798, 799, 803, 804, 813, 822, 826, 828, 833, 838, 841, 846, 867, 874, 875, 910, 917, 933, 934, 972, 973, 987, 993, 995, 996, 997, 998, 1012, 1058, 1069, 1074, 1075, 1079, 1081, 1087, 1097, 1098, 1102, 1107, 1109, 1113, 1131, 1139, 1143, 1151, 1153, 1154, 1162, 1172, 1176, 1182, 1183, 1188, 1189, 1190, 1191, 1194, 1195, 1196, 1198, 1200, 1228, 1229, 1240, 1249], "classmethod": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 440, 757, 782, 867], "activ": [6, 12, 13, 23, 24, 26, 27, 28, 29, 33, 34, 483, 612, 1055, 1163], "bool": [6, 12, 13, 14, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 37, 39, 40, 43, 45, 58, 59, 60, 64, 80, 86, 87, 88, 89, 90, 105, 106, 110, 112, 116, 117, 118, 121, 122, 124, 126, 127, 128, 130, 133, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 154, 157, 158, 159, 160, 164, 169, 174, 175, 177, 178, 179, 183, 184, 185, 186, 187, 188, 189, 190, 194, 196, 198, 199, 200, 203, 205, 206, 213, 222, 224, 234, 235, 236, 237, 238, 242, 246, 248, 251, 255, 257, 259, 260, 263, 264, 265, 266, 268, 269, 271, 273, 282, 284, 286, 289, 299, 309, 310, 311, 312, 313, 314, 324, 327, 328, 334, 337, 339, 340, 342, 343, 345, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 386, 402, 404, 417, 422, 423, 424, 425, 426, 427, 443, 445, 448, 452, 453, 454, 456, 457, 458, 460, 461, 463, 464, 465, 466, 468, 470, 473, 474, 478, 483, 486, 497, 504, 507, 510, 515, 516, 518, 520, 524, 525, 526, 527, 528, 531, 547, 548, 549, 551, 554, 555, 560, 563, 565, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 586, 588, 591, 596, 598, 599, 602, 603, 604, 606, 607, 609, 625, 626, 627, 628, 633, 634, 636, 643, 644, 645, 647, 649, 655, 667, 670, 673, 674, 675, 676, 677, 678, 680, 683, 684, 688, 691, 692, 696, 701, 702, 703, 704, 705, 716, 717, 719, 722, 730, 733, 739, 744, 745, 747, 748, 757, 773, 775, 776, 778, 779, 786, 788, 790, 791, 794, 795, 796, 797, 798, 799, 803, 804, 808, 809, 813, 818, 822, 827, 830, 832, 837, 838, 839, 840, 843, 852, 854, 856, 859, 867, 870, 874, 875, 877, 886, 889, 890, 896, 899, 901, 906, 909, 912, 916, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 952, 972, 974, 987, 993, 994, 996, 997, 998, 1005, 1011, 1014, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1045, 1046, 1050, 1051, 1052, 1055, 1058, 1069, 1076, 1079, 1082, 1088, 1100, 1103, 1104, 1107, 1109, 1110, 1111, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1131, 1132, 1134, 1135, 1136, 1137, 1142, 1147, 1149, 1153, 1154, 1155, 1157, 1158, 1160, 1176, 1177, 1178, 1179, 1184, 1185, 1187, 1194, 1195, 1196, 1198, 1200, 1220, 1221, 1222, 1225, 1228, 1230, 1240, 1248], "decim": [6, 14, 15, 16, 32, 33, 37, 40, 58, 259, 299, 584, 646, 757, 867, 1129, 1197, 1240], "temporari": 6, "remov": [6, 9, 91, 116, 117, 130, 154, 165, 210, 212, 217, 250, 257, 299, 314, 417, 428, 517, 520, 540, 621, 631, 637, 638, 639, 640, 641, 642, 708, 757, 783, 867, 933, 973, 987, 1107, 1172, 1182, 1188, 1189, 1190, 1191, 1192, 1193, 1196, 1230, 1240], "onc": [6, 67, 116, 117, 121, 150, 209, 236, 238, 278, 299, 497, 520, 586, 641, 642, 757, 774, 848, 867, 1069, 1088, 1131, 1192, 1193, 1240], "stabil": [6, 191, 299, 446, 757, 1012, 1240], "current": [6, 7, 8, 10, 11, 35, 66, 106, 112, 118, 119, 128, 135, 159, 160, 205, 206, 299, 382, 403, 509, 553, 757, 769, 776, 777, 778, 803, 804, 867, 870, 916, 920, 940, 948, 973, 1102, 1240, 1248], "consid": [6, 87, 89, 90, 116, 117, 130, 136, 139, 140, 141, 142, 167, 169, 179, 202, 209, 215, 236, 265, 267, 268, 299, 314, 350, 367, 403, 448, 518, 520, 575, 576, 577, 578, 579, 581, 582, 583, 692, 710, 753, 757, 779, 784, 800, 807, 813, 838, 840, 855, 867, 909, 912, 917, 932, 973, 994, 1014, 1028, 1088, 1107, 1132, 1134, 1135, 1240], "beta": 6, "cfg": [7, 9, 22, 152], "previous": [7, 8], "save": [7, 8, 11, 186, 206, 234, 269, 299, 374, 382, 399, 403, 417, 572, 575, 576, 577, 578, 579, 581, 582, 583, 701, 702, 704, 705, 706, 744, 745, 753, 757, 769, 795, 804, 822, 867, 948, 969, 973, 987], "option": [7, 8, 9, 10, 11, 35, 39, 40, 49, 80, 116, 118, 120, 121, 122, 124, 128, 131, 132, 133, 135, 136, 138, 143, 144, 145, 146, 147, 148, 149, 186, 201, 206, 215, 255, 259, 264, 268, 299, 468, 573, 575, 576, 577, 578, 579, 581, 582, 583, 596, 604, 628, 632, 670, 719, 739, 747, 757, 769, 795, 803, 804, 813, 826, 840, 867, 870, 1037, 1041, 1118, 1120, 1121, 1122, 1123, 1124, 1126, 1127, 1128, 1147, 1155, 1179, 1183, 1218, 1228, 1240], "from": [7, 8, 9, 10, 11, 15, 21, 33, 37, 39, 40, 58, 64, 65, 66, 72, 80, 88, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 158, 164, 165, 170, 172, 177, 184, 186, 189, 203, 204, 205, 206, 207, 215, 224, 225, 229, 234, 235, 237, 238, 240, 241, 257, 264, 265, 267, 268, 269, 275, 299, 302, 357, 368, 369, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 424, 428, 440, 451, 468, 497, 509, 520, 545, 546, 548, 553, 556, 560, 562, 572, 574, 575, 576, 578, 581, 582, 583, 586, 599, 611, 612, 614, 615, 625, 639, 640, 641, 642, 643, 644, 645, 649, 668, 681, 682, 685, 700, 701, 702, 703, 704, 706, 733, 743, 744, 745, 753, 756, 757, 775, 782, 783, 788, 795, 798, 803, 804, 813, 820, 822, 824, 825, 838, 840, 845, 846, 867, 870, 933, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 995, 1001, 1037, 1041, 1069, 1081, 1097, 1098, 1099, 1102, 1107, 1119, 1131, 1162, 1163, 1165, 1166, 1176, 1192, 1193, 1194, 1195, 1196, 1200, 1231, 1240, 1248, 1249], "json": [7, 8, 10, 11, 43, 44, 125, 126, 132, 134, 299, 440, 533, 614, 615, 616, 654, 757, 769, 782, 826, 867, 1165, 1166, 1167, 1206], "produc": [7, 8, 145, 146, 148, 205, 299, 479, 480, 528, 721, 803, 808, 809, 867, 1051, 1052], "load_from_fil": [7, 10, 11], "file": [7, 8, 10, 11, 36, 37, 41, 42, 43, 44, 45, 58, 59, 60, 115, 116, 117, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 172, 299, 533, 782, 826, 867, 1001, 1240], "path": [8, 11, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 58, 59, 60, 115, 116, 117, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 299, 533, 588, 616, 757, 782, 826, 830, 867, 1137, 1167, 1240, 1249], "load": [8, 10, 11, 108, 110, 118, 120, 121, 127, 131, 132, 147, 149, 299, 757, 769, 800, 807, 867, 1249], "reset": [9, 152], "state": [9, 86, 87, 98, 692, 696, 769, 778, 779, 786, 788, 818, 830, 867], "note": [9, 15, 25, 39, 40, 64, 68, 69, 71, 80, 87, 89, 90, 105, 106, 107, 109, 111, 112, 116, 118, 119, 120, 121, 125, 126, 128, 131, 132, 136, 139, 141, 144, 146, 148, 150, 152, 154, 157, 162, 164, 173, 186, 187, 189, 190, 191, 201, 202, 203, 205, 206, 209, 220, 223, 224, 234, 235, 236, 237, 244, 256, 259, 263, 264, 268, 269, 273, 275, 276, 299, 350, 360, 361, 372, 373, 395, 396, 399, 403, 417, 446, 452, 461, 463, 467, 483, 486, 502, 507, 509, 520, 539, 541, 542, 543, 544, 558, 567, 572, 575, 576, 577, 578, 579, 580, 581, 582, 583, 589, 596, 603, 611, 612, 613, 617, 618, 626, 638, 639, 640, 643, 652, 657, 658, 666, 689, 691, 692, 701, 702, 704, 705, 706, 710, 719, 730, 732, 733, 744, 745, 747, 748, 753, 757, 768, 773, 779, 788, 789, 795, 796, 798, 799, 800, 804, 807, 820, 822, 828, 830, 832, 837, 840, 843, 846, 847, 867, 917, 926, 927, 934, 937, 938, 965, 966, 969, 987, 1011, 1012, 1055, 1058, 1074, 1079, 1088, 1113, 1125, 1132, 1135, 1139, 1142, 1147, 1154, 1162, 1163, 1164, 1168, 1169, 1177, 1189, 1190, 1191, 1194, 1203, 1210, 1221, 1240, 1244, 1248], "oper": [9, 39, 40, 71, 88, 90, 95, 96, 105, 107, 108, 109, 110, 111, 116, 118, 128, 155, 160, 172, 175, 178, 185, 188, 195, 196, 207, 209, 216, 220, 222, 223, 228, 232, 234, 237, 238, 244, 254, 259, 260, 264, 267, 277, 278, 299, 307, 308, 311, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 423, 424, 438, 443, 445, 467, 470, 497, 498, 499, 500, 501, 502, 509, 515, 532, 535, 537, 539, 541, 542, 547, 548, 551, 557, 558, 565, 572, 586, 589, 656, 657, 666, 673, 674, 676, 686, 687, 691, 707, 757, 769, 777, 788, 794, 797, 800, 803, 807, 813, 814, 822, 828, 848, 867, 920, 924, 925, 926, 927, 928, 929, 930, 931, 932, 1001, 1069, 1070, 1071, 1072, 1073, 1074, 1111, 1131, 1139, 1216, 1220, 1221, 1222, 1230, 1240], "environ": [9, 35, 128, 135, 147, 150], "ani": [9, 37, 39, 40, 45, 48, 58, 85, 105, 106, 107, 108, 109, 110, 111, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 128, 130, 131, 132, 133, 135, 143, 145, 146, 148, 152, 155, 162, 167, 172, 174, 175, 178, 201, 203, 204, 209, 213, 222, 223, 225, 235, 236, 237, 251, 255, 256, 259, 260, 265, 267, 268, 276, 299, 307, 310, 311, 314, 345, 404, 423, 424, 433, 434, 438, 441, 443, 445, 457, 470, 477, 483, 515, 516, 518, 519, 520, 532, 535, 537, 541, 542, 547, 548, 551, 552, 556, 558, 567, 568, 573, 574, 587, 602, 604, 625, 639, 640, 641, 642, 643, 644, 645, 647, 649, 656, 657, 660, 666, 673, 674, 677, 678, 688, 719, 722, 747, 757, 784, 790, 791, 817, 838, 840, 847, 867, 870, 874, 877, 974, 1001, 1004, 1008, 1026, 1040, 1049, 1055, 1087, 1088, 1113, 1114, 1118, 1119, 1132, 1133, 1136, 1153, 1155, 1176, 1194, 1195, 1196, 1198, 1200, 1212, 1220, 1221, 1222, 1240, 1248, 1249], "local": [9, 39, 118, 120, 131, 132, 135, 148, 299, 417, 554, 555, 757, 909, 911, 944, 945, 977, 987, 1103, 1104, 1240], "non": [9, 37, 39, 40, 49, 58, 80, 110, 137, 163, 187, 190, 204, 215, 234, 240, 241, 244, 264, 268, 273, 274, 299, 350, 356, 452, 509, 519, 553, 567, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 605, 606, 612, 617, 652, 675, 677, 685, 686, 687, 689, 695, 699, 706, 724, 728, 734, 735, 736, 739, 741, 757, 781, 796, 799, 813, 822, 824, 825, 828, 840, 843, 844, 867, 917, 934, 1018, 1081, 1102, 1113, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1126, 1127, 1128, 1139, 1156, 1157, 1163, 1168, 1203, 1221, 1240], "env": [9, 149], "back": [9, 80, 172, 260, 299, 552, 650, 757, 826, 867, 1001, 1201, 1222, 1240], "contain": [10, 37, 38, 39, 40, 58, 80, 85, 106, 107, 110, 112, 118, 119, 120, 131, 132, 139, 140, 145, 157, 167, 186, 189, 204, 220, 224, 263, 268, 281, 299, 310, 312, 314, 342, 343, 457, 519, 520, 602, 609, 611, 613, 616, 635, 636, 652, 674, 676, 689, 691, 722, 757, 773, 784, 795, 798, 818, 837, 840, 851, 867, 870, 874, 875, 933, 1087, 1094, 1107, 1153, 1160, 1162, 1164, 1167, 1186, 1187, 1203, 1216, 1240], "save_to_fil": 10, "json_str": 10, "written": [11, 36, 37, 40, 41, 42, 43, 44, 45, 58, 59, 60, 299, 826, 867], "leav": [11, 215, 299, 509, 813, 867], "directli": [11, 35, 66, 87, 118, 146, 148, 152, 237, 299, 425, 426, 427, 567, 733, 757, 779, 867, 996, 997, 998, 1113, 1240, 1249], "json_fil": 11, "ascii": [12, 25, 604, 617, 618, 620, 628, 630, 652, 1155, 1168, 1169, 1171, 1179, 1181, 1203], "charact": [12, 14, 17, 25, 31, 32, 33, 37, 38, 58, 116, 117, 119, 130, 299, 399, 610, 612, 617, 618, 620, 621, 622, 623, 624, 630, 631, 633, 634, 637, 638, 639, 640, 641, 642, 652, 818, 867, 870, 969, 1161, 1163, 1168, 1169, 1171, 1172, 1173, 1174, 1175, 1181, 1182, 1184, 1185, 1188, 1189, 1190, 1191, 1203], "displai": [12, 15, 16, 17, 18, 22, 24, 28, 30, 40, 184, 299], "tabl": [12, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 38, 39, 40, 65, 66, 67, 69, 105, 112, 116, 117, 120, 121, 130, 131, 132, 205, 224, 254, 260, 267, 268, 299, 803, 840, 867, 1222, 1240, 1248], "outlin": 12, "fals": [12, 13, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 33, 35, 37, 39, 40, 43, 45, 58, 59, 60, 80, 86, 87, 106, 110, 112, 116, 117, 118, 121, 122, 124, 126, 127, 128, 130, 133, 134, 135, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 154, 157, 158, 159, 160, 164, 169, 178, 183, 184, 185, 186, 187, 188, 189, 190, 194, 196, 198, 199, 200, 203, 205, 206, 207, 212, 213, 219, 220, 222, 224, 226, 234, 235, 236, 237, 238, 242, 246, 248, 251, 255, 257, 259, 260, 263, 264, 265, 268, 269, 271, 273, 282, 284, 286, 287, 289, 292, 299, 310, 311, 312, 314, 324, 327, 328, 334, 337, 339, 342, 343, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 386, 402, 404, 417, 422, 423, 424, 425, 426, 427, 445, 448, 452, 453, 454, 456, 457, 458, 460, 461, 463, 464, 465, 466, 468, 470, 473, 474, 478, 483, 486, 497, 504, 507, 510, 515, 516, 518, 520, 524, 527, 529, 531, 547, 548, 549, 551, 554, 555, 560, 563, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 586, 588, 591, 596, 598, 599, 602, 603, 604, 606, 609, 614, 625, 626, 627, 628, 633, 634, 636, 643, 644, 645, 647, 667, 670, 673, 674, 675, 676, 677, 680, 683, 684, 688, 691, 692, 696, 701, 702, 703, 704, 705, 716, 717, 719, 730, 733, 739, 744, 745, 747, 748, 757, 773, 775, 776, 777, 778, 779, 786, 788, 794, 795, 796, 797, 798, 799, 803, 804, 806, 808, 809, 818, 822, 827, 830, 832, 837, 838, 840, 843, 852, 854, 856, 857, 859, 862, 867, 870, 874, 875, 886, 889, 890, 896, 899, 906, 909, 912, 915, 916, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 952, 972, 974, 987, 993, 994, 996, 997, 998, 1005, 1011, 1018, 1019, 1020, 1022, 1024, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1041, 1045, 1046, 1050, 1055, 1058, 1069, 1076, 1079, 1082, 1094, 1100, 1103, 1104, 1107, 1109, 1110, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1131, 1134, 1137, 1142, 1147, 1149, 1153, 1154, 1155, 1157, 1160, 1165, 1176, 1177, 1178, 1179, 1184, 1185, 1187, 1194, 1195, 1196, 1198, 1221, 1222, 1225, 1228, 1230, 1231, 1240, 1248], "revert": [12, 14, 15], "utf8_full_condens": [12, 25, 112], "format": [12, 16, 20, 21, 25, 37, 40, 41, 42, 58, 115, 116, 117, 118, 130, 136, 171, 184, 203, 215, 236, 237, 256, 297, 299, 403, 406, 409, 531, 643, 644, 645, 649, 706, 787, 813, 826, 867, 976, 979, 1194, 1195, 1196, 1200, 1239], "style": [12, 25, 40, 118, 128, 224, 299], "abc": [12, 21, 23, 24, 25, 26, 27, 28, 29, 30, 307, 612, 626, 639, 757, 870, 1163, 1177], "xyz": [12, 21, 23, 24, 25, 26, 27, 28, 29, 30, 307, 606, 612, 757, 1157, 1163, 1218, 1240], "f64": [12, 14, 15, 16, 20, 23, 24, 26, 27, 28, 29, 30, 32, 61, 64, 80, 82, 84, 88, 106, 108, 136, 146, 159, 160, 162, 164, 165, 168, 173, 174, 178, 183, 184, 185, 186, 196, 197, 205, 206, 211, 212, 213, 214, 218, 224, 226, 227, 247, 248, 249, 251, 270, 273, 278, 282, 284, 286, 287, 288, 289, 291, 292, 299, 306, 309, 316, 317, 318, 319, 320, 321, 345, 348, 349, 353, 354, 355, 367, 368, 369, 372, 373, 404, 422, 423, 424, 425, 426, 427, 428, 429, 432, 433, 437, 438, 443, 445, 451, 461, 463, 464, 465, 467, 468, 470, 483, 494, 511, 512, 513, 515, 521, 522, 523, 534, 537, 539, 545, 546, 547, 548, 553, 557, 560, 561, 562, 563, 567, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 594, 595, 596, 600, 601, 662, 663, 666, 671, 681, 682, 685, 686, 688, 690, 707, 708, 722, 725, 726, 737, 738, 746, 753, 757, 776, 783, 789, 790, 794, 795, 802, 803, 804, 811, 812, 819, 832, 833, 841, 843, 845, 848, 852, 854, 856, 857, 858, 859, 861, 862, 867, 870, 878, 879, 880, 881, 882, 883, 913, 914, 921, 922, 923, 932, 933, 934, 937, 938, 974, 996, 997, 998, 999, 1003, 1007, 1014, 1017, 1055, 1066, 1083, 1084, 1085, 1102, 1107, 1109, 1113, 1119, 1121, 1122, 1124, 1125, 1126, 1128, 1129, 1130, 1145, 1146, 1150, 1214, 1215, 1227, 1240, 1249], "multi": [13, 40, 116, 117, 299, 428, 611, 757, 1162], "automat": [13, 66, 69, 105, 107, 108, 109, 111, 112, 116, 117, 118, 119, 121, 125, 126, 130, 134, 146, 148, 150, 240, 273, 299, 518, 519, 567, 638, 639, 640, 757, 824, 843, 867, 1087, 1113, 1189, 1190, 1191, 1240, 1248], "turn": [13, 58, 59, 60, 86, 87, 116, 117, 130, 650, 778, 779, 786, 788, 808, 809, 818, 867, 1201], "struct": [13, 112, 220, 240, 262, 266, 273, 299, 368, 448, 509, 560, 570, 571, 613, 614, 634, 635, 670, 692, 693, 695, 696, 697, 721, 757, 824, 839, 843, 855, 867, 933, 1081, 1107, 1116, 1117, 1164, 1165, 1183, 1185, 1186, 1240], "v": [13, 14, 45, 66, 67, 170, 299, 587, 757, 1133, 1240], "v2": [13, 122, 133], "out": [13, 19, 58, 59, 60, 112, 138, 234, 237, 299, 340, 486, 487, 507, 603, 607, 747, 822, 867, 901, 1058, 1059, 1079, 1154, 1158], "separ": [14, 15, 29, 32, 37, 58, 114, 116, 117, 130, 222, 224, 257, 264, 266, 299, 314, 484, 489, 520, 610, 687, 692, 693, 696, 697, 757, 839, 867, 1056, 1061, 1161, 1209, 1217, 1240], "set_thousands_separ": 14, "thousand": [14, 32], "group": [14, 32, 40, 45, 60, 64, 117, 185, 186, 187, 188, 189, 190, 204, 220, 222, 224, 234, 237, 267, 269, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 299, 308, 367, 430, 436, 441, 444, 483, 518, 520, 528, 530, 552, 563, 571, 572, 598, 599, 603, 611, 612, 613, 626, 670, 722, 757, 794, 795, 796, 797, 798, 799, 822, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 870, 932, 1055, 1117, 1154, 1162, 1163, 1164, 1177, 1228, 1240], "9876": 14, "54321": 14, "1010101": 14, "123456": [14, 870], "78": 14, "tbl_cell_numeric_align": [14, 15, 32], "right": [14, 15, 20, 21, 23, 32, 40, 116, 117, 139, 140, 141, 142, 186, 187, 189, 190, 205, 206, 234, 268, 299, 368, 425, 426, 427, 452, 498, 499, 500, 501, 560, 572, 575, 576, 577, 578, 579, 581, 582, 583, 587, 596, 630, 685, 701, 702, 704, 705, 744, 745, 757, 795, 796, 798, 799, 803, 804, 822, 840, 867, 933, 996, 997, 998, 1018, 1070, 1071, 1072, 1073, 1107, 1133, 1147, 1181, 1240], "thousands_separ": [14, 15, 32], "decimal_separ": [14, 32], "float_precis": [14, 15, 32, 37, 40, 58, 299, 867], "print": [14, 15, 16, 17, 18, 20, 21, 22, 24, 25, 30, 32, 33, 117, 138, 139, 141, 168, 184, 185, 204, 207, 258, 277, 299, 450, 531, 757, 778, 801, 867, 1026, 1219, 1240, 1249], "876": 14, "543": 14, "010": [14, 647, 1198], "101": [14, 32, 376, 647, 1198, 1249], "000": [14, 15, 32, 40, 299, 1249], "123": [14, 606, 612, 627, 652, 747, 870, 1157, 1163, 1178, 1203, 1218, 1240], "456": [14, 15, 376, 870, 942, 1218, 1240], "780": 14, "precis": [15, 16, 37, 40, 48, 49, 58, 118, 203, 236, 237, 256, 299, 375, 646, 867, 870, 941, 1197], "control": [15, 16, 40, 69, 87, 88, 144, 299, 567, 757, 779, 786, 867, 1113, 1240], "number": [15, 16, 17, 18, 19, 22, 30, 37, 38, 40, 45, 58, 60, 71, 80, 90, 99, 105, 107, 109, 111, 114, 116, 117, 119, 121, 125, 126, 127, 128, 130, 134, 135, 137, 144, 146, 147, 149, 150, 157, 159, 163, 170, 171, 173, 174, 184, 192, 203, 204, 207, 208, 219, 220, 238, 244, 245, 249, 252, 263, 267, 270, 281, 283, 293, 299, 325, 338, 344, 356, 367, 368, 370, 384, 387, 392, 394, 404, 418, 419, 421, 425, 426, 427, 431, 433, 439, 447, 461, 463, 471, 472, 481, 488, 491, 492, 497, 502, 506, 509, 556, 560, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 589, 590, 592, 601, 617, 618, 619, 622, 626, 634, 635, 646, 659, 665, 671, 688, 689, 690, 691, 706, 714, 734, 735, 738, 742, 746, 757, 773, 776, 781, 787, 788, 789, 790, 800, 807, 818, 828, 829, 833, 835, 837, 841, 851, 853, 863, 867, 905, 916, 932, 933, 935, 950, 953, 962, 964, 974, 988, 989, 991, 995, 996, 997, 998, 1002, 1004, 1013, 1025, 1042, 1043, 1053, 1060, 1063, 1064, 1069, 1074, 1078, 1081, 1094, 1095, 1107, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1126, 1127, 1128, 1129, 1130, 1131, 1139, 1140, 1143, 1151, 1168, 1169, 1170, 1173, 1177, 1185, 1186, 1197, 1211, 1224, 1229, 1240, 1249], "place": [15, 16, 37, 58, 157, 166, 172, 194, 195, 196, 224, 230, 232, 237, 245, 248, 263, 271, 299, 324, 489, 590, 598, 757, 773, 829, 832, 837, 867, 876, 886, 1001, 1061, 1110, 1140, 1149, 1240], "float": [15, 16, 37, 40, 52, 53, 58, 121, 136, 139, 140, 141, 142, 143, 146, 148, 154, 164, 170, 173, 206, 227, 238, 245, 291, 299, 349, 368, 372, 373, 404, 422, 423, 424, 425, 426, 427, 432, 437, 443, 445, 451, 454, 458, 461, 463, 464, 465, 470, 478, 497, 511, 515, 521, 534, 545, 546, 547, 548, 557, 560, 561, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 586, 666, 731, 733, 757, 789, 804, 819, 829, 830, 861, 867, 870, 906, 914, 933, 934, 936, 937, 938, 955, 956, 974, 993, 995, 996, 997, 998, 1003, 1007, 1014, 1025, 1041, 1050, 1051, 1052, 1069, 1083, 1097, 1098, 1106, 1107, 1108, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1126, 1127, 1128, 1129, 1131, 1132, 1133, 1135, 1136, 1147, 1151, 1210, 1221, 1229, 1240, 1249], "point": [15, 16, 40, 52, 53, 146, 148, 173, 186, 189, 207, 299, 349, 368, 372, 404, 432, 437, 461, 463, 497, 520, 584, 586, 757, 789, 795, 798, 808, 809, 820, 867, 914, 933, 937, 974, 1003, 1007, 1025, 1069, 1107, 1129, 1131, 1221, 1240], "standard": [15, 40, 249, 259, 299, 387, 426, 581, 596, 601, 616, 738, 753, 757, 833, 867, 953, 997, 1147, 1151, 1167, 1240, 1249], "behaviour": [15, 80, 88, 167, 299, 603, 611, 612, 626, 666, 757, 784, 867, 1154, 1162, 1163, 1177], "when": [15, 19, 22, 24, 28, 37, 40, 45, 48, 58, 60, 69, 71, 72, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 116, 117, 118, 119, 121, 122, 124, 127, 128, 130, 131, 133, 134, 136, 139, 140, 141, 142, 146, 148, 155, 157, 168, 170, 172, 174, 178, 186, 187, 189, 190, 205, 209, 223, 234, 235, 237, 240, 241, 244, 248, 257, 259, 263, 265, 268, 274, 299, 350, 425, 426, 427, 433, 502, 509, 519, 529, 556, 567, 571, 572, 589, 598, 599, 604, 617, 618, 628, 638, 639, 640, 643, 683, 692, 696, 710, 757, 773, 790, 795, 796, 798, 799, 803, 808, 809, 822, 824, 825, 828, 832, 837, 838, 840, 844, 867, 917, 995, 996, 997, 998, 1001, 1004, 1074, 1087, 1113, 1117, 1132, 1135, 1139, 1155, 1168, 1169, 1179, 1189, 1190, 1191, 1194, 1217, 1240], "larger": [15, 58, 59, 60, 688, 778, 867], "should": [15, 38, 40, 58, 59, 60, 88, 105, 107, 109, 111, 120, 125, 126, 128, 130, 134, 136, 143, 144, 148, 157, 165, 203, 206, 209, 235, 236, 237, 256, 257, 263, 266, 285, 299, 308, 347, 367, 420, 428, 461, 463, 483, 520, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 587, 596, 670, 706, 719, 722, 734, 735, 747, 757, 773, 783, 788, 803, 804, 809, 826, 830, 832, 837, 839, 867, 870, 910, 932, 990, 1055, 1088, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1126, 1127, 1128, 1133, 1147, 1228, 1240], "ensur": [15, 40, 119, 145, 146, 148, 185, 188, 222, 235, 299, 452, 518, 757, 794, 797, 808, 809, 867, 870, 1221, 1240], "awar": [15, 203, 236, 237, 256, 299, 604, 628, 788, 867, 1155, 1179, 1196], "both": [15, 30, 37, 58, 71, 89, 90, 186, 187, 189, 190, 205, 206, 216, 234, 235, 268, 299, 313, 350, 368, 428, 452, 560, 572, 575, 576, 577, 578, 579, 581, 582, 583, 701, 702, 704, 705, 744, 745, 753, 757, 768, 795, 796, 798, 799, 803, 804, 814, 822, 840, 867, 917, 1018, 1028, 1240], "limit": [15, 16, 60, 118, 119, 130, 174, 299, 338, 351, 352, 433, 439, 757, 790, 800, 867, 918, 919, 1004, 1240], "represent": [15, 43, 44, 258, 299, 347, 380, 384, 387, 388, 390, 392, 394, 397, 400, 401, 404, 418, 419, 421, 664, 757, 786, 806, 867, 910, 911, 946, 950, 952, 953, 957, 959, 962, 964, 967, 970, 971, 974, 988, 989, 991, 1219, 1223, 1240], "look": [15, 186, 299, 339, 509, 518, 757, 795, 867, 900], "appli": [15, 25, 37, 40, 58, 64, 88, 130, 143, 146, 148, 178, 209, 223, 285, 299, 378, 379, 380, 384, 386, 387, 388, 390, 392, 394, 397, 400, 401, 404, 407, 418, 419, 421, 426, 427, 516, 518, 520, 556, 573, 575, 576, 578, 582, 626, 643, 644, 645, 649, 692, 693, 696, 697, 710, 720, 721, 722, 732, 747, 757, 800, 807, 808, 809, 817, 855, 867, 917, 944, 945, 946, 950, 952, 953, 957, 959, 962, 964, 967, 970, 971, 974, 977, 988, 989, 991, 997, 998, 1088, 1118, 1120, 1121, 1123, 1127, 1177, 1194, 1195, 1196, 1200, 1240], "float64": [15, 37, 40, 58, 108, 116, 146, 168, 170, 178, 239, 260, 273, 299, 316, 317, 318, 319, 320, 321, 345, 353, 354, 355, 369, 404, 428, 461, 463, 562, 594, 595, 662, 663, 708, 730, 733, 748, 757, 785, 823, 843, 867, 870, 974, 1222, 1227, 1240], "doe": [15, 37, 39, 58, 80, 88, 99, 105, 107, 108, 109, 111, 112, 116, 117, 118, 120, 121, 125, 126, 130, 131, 134, 136, 160, 172, 191, 204, 205, 225, 235, 236, 237, 265, 273, 276, 299, 302, 420, 446, 509, 519, 639, 640, 668, 753, 757, 777, 788, 803, 809, 838, 843, 847, 867, 920, 990, 1001, 1011, 1012, 1087, 1142, 1230, 1240, 1244], "cover": 15, "nativ": [15, 116, 118, 121, 122, 124, 128, 144, 203, 209, 236, 237, 256, 285, 299, 520, 722, 757, 763, 855, 1088, 1240, 1249], "level": [15, 40, 45, 60, 130, 133, 134, 135, 146, 178, 209, 220, 299, 434, 757, 800, 807, 867], "larg": [15, 16, 19, 80, 118], "maximum": [15, 31, 37, 58, 116, 117, 130, 136, 144, 145, 146, 148, 184, 186, 210, 211, 299, 329, 475, 521, 545, 554, 563, 723, 724, 757, 795, 810, 867, 891, 954, 1047, 1089, 1097, 1103, 1109, 1240], "import": [15, 21, 33, 36, 37, 39, 40, 41, 42, 45, 48, 80, 105, 106, 109, 110, 119, 130, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 158, 164, 165, 167, 184, 186, 204, 206, 215, 222, 224, 225, 257, 259, 260, 267, 269, 299, 302, 369, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 386, 387, 388, 390, 392, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 434, 574, 575, 576, 578, 581, 582, 583, 681, 682, 701, 702, 704, 706, 708, 744, 745, 753, 757, 769, 775, 779, 782, 783, 784, 795, 804, 809, 813, 826, 867, 921, 923, 940, 941, 942, 943, 944, 945, 946, 948, 949, 950, 952, 953, 954, 955, 956, 957, 959, 961, 962, 964, 965, 966, 967, 969, 970, 971, 972, 973, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 1022, 1027, 1031, 1032, 1037, 1119, 1145, 1214, 1240, 1244, 1249], "pi": [15, 369, 757, 921, 923, 1145, 1214, 1240], "e": [15, 36, 37, 39, 41, 42, 45, 58, 106, 115, 116, 117, 121, 122, 123, 124, 125, 126, 127, 128, 129, 133, 136, 184, 192, 202, 252, 254, 259, 267, 299, 307, 314, 422, 428, 452, 511, 520, 525, 526, 528, 529, 530, 531, 532, 591, 596, 639, 640, 708, 722, 747, 757, 782, 806, 820, 867, 870, 993, 994, 1018, 1134, 1147, 1221, 1240, 1249], "const": 15, "15": [15, 40, 138, 145, 186, 196, 209, 234, 299, 367, 370, 396, 403, 417, 556, 572, 582, 615, 693, 744, 757, 795, 822, 867, 932, 935, 973, 987, 1166, 1240], "141592653589793": 15, "718281828459045": [15, 422, 511, 757, 993, 1083, 1240], "align": [15, 20, 21, 40, 80, 88, 299], "numer": [15, 21, 37, 40, 58, 158, 165, 206, 215, 224, 267, 299, 307, 350, 438, 452, 513, 535, 537, 557, 566, 591, 613, 652, 656, 666, 757, 769, 775, 783, 804, 813, 867, 870, 917, 934, 994, 1018, 1035, 1134, 1141, 1164, 1203, 1221, 1240, 1249], "cleanli": [15, 184, 299], "line": [15, 25, 40, 116, 117, 121, 130, 184, 198, 200, 225, 299, 302, 611, 1162], "up": [15, 40, 72, 116, 117, 119, 130, 203, 206, 236, 237, 256, 299, 314, 349, 520, 757, 803, 804, 809, 867, 870, 914, 1240], "xx": [15, 81, 83, 145, 148, 708, 870], "yy": [15, 81, 83, 145, 148, 870], "11111111": 15, "44444444444": 15, "100000": [15, 32], "987654321": 15, "23456789": 15, "11": [15, 21, 45, 60, 106, 138, 146, 234, 299, 309, 395, 396, 399, 403, 417, 451, 553, 563, 572, 574, 582, 597, 673, 740, 745, 757, 778, 779, 800, 807, 818, 822, 835, 867, 870, 969, 973, 987, 1088, 1119, 1240], "111": 15, "100": [15, 22, 32, 40, 108, 111, 116, 117, 125, 130, 134, 244, 299, 567, 589, 604, 614, 615, 628, 646, 757, 828, 867, 1084, 1113, 1120, 1121, 1123, 1139, 1155, 1165, 1166, 1179, 1197, 1240, 1249], "988": 15, "44": [15, 216, 299, 371, 757, 814, 867], "444": 15, "23": [15, 138, 186, 234, 299, 376, 380, 384, 400, 403, 419, 572, 575, 576, 578, 581, 582, 583, 703, 706, 743, 744, 745, 757, 795, 822, 867, 870, 942, 950, 1249], "789": [15, 870], "fmt": [16, 450, 711, 757, 801, 867], "floatfmt": 16, "mix": [16, 934, 1196, 1240], "how": [16, 39, 40, 80, 88, 108, 111, 119, 128, 135, 167, 205, 224, 267, 268, 299, 347, 370, 402, 403, 417, 451, 479, 480, 481, 552, 566, 580, 614, 615, 643, 645, 703, 747, 757, 784, 803, 840, 867, 910, 935, 972, 973, 987, 1051, 1052, 1053, 1125, 1165, 1166, 1194, 1196, 1240], "full": [16, 48, 80, 85, 88, 116, 117, 120, 130, 131, 132, 136, 186, 187, 189, 190, 234, 299, 572, 643, 644, 645, 649, 757, 795, 796, 798, 799, 808, 809, 822, 867, 870, 1194, 1195, 1196, 1200, 1249], "scientif": 16, "notat": [16, 40, 299], "small": [16, 119, 145, 207, 299, 403, 788, 867, 1249], "2304980958725870923": 16, "1e6": 16, "1e": [16, 139, 140, 141, 142], "230498": 16, "0000e": 16, "230498095872587": 16, "1000000": [16, 985], "00000001": [16, 673, 757], "plai": [17, 687], "sam": 17, "As": [17, 71, 89, 90, 105, 107, 108, 109, 111, 121, 125, 126, 134, 299, 509, 747, 867], "time": [17, 39, 48, 50, 64, 69, 85, 86, 87, 128, 130, 172, 186, 187, 189, 190, 206, 234, 269, 299, 344, 374, 375, 376, 377, 378, 382, 383, 399, 402, 403, 406, 408, 409, 417, 420, 477, 478, 509, 571, 572, 575, 576, 577, 578, 579, 581, 582, 583, 592, 643, 645, 649, 664, 665, 686, 687, 701, 702, 703, 704, 705, 706, 712, 744, 745, 757, 778, 779, 795, 796, 798, 799, 804, 818, 822, 867, 870, 905, 940, 941, 942, 943, 948, 949, 969, 972, 973, 976, 978, 979, 987, 990, 1001, 1049, 1051, 1052, 1117, 1143, 1194, 1196, 1200, 1223, 1224, 1240, 1249], "goe": 17, "By": [17, 19, 35, 80, 116, 117, 130, 186, 205, 206, 234, 244, 249, 268, 269, 270, 299, 399, 403, 417, 502, 572, 575, 576, 577, 578, 579, 581, 582, 583, 589, 601, 671, 688, 690, 701, 702, 704, 705, 706, 719, 738, 744, 745, 746, 757, 778, 795, 803, 804, 822, 828, 833, 841, 867, 969, 973, 987, 1074, 1139, 1151, 1221, 1229, 1240], "begin": [17, 40, 299, 425, 426, 427, 611, 757, 996, 997, 998, 1162, 1240], "beauti": 17, "friendship": 17, "len_byt": [17, 618, 619, 1169, 1170], "len": [17, 40, 144, 146, 204, 299, 356, 357, 492, 520, 757, 1064, 1240], "u32": [17, 64, 118, 156, 158, 163, 221, 275, 276, 281, 290, 292, 299, 308, 315, 322, 323, 324, 325, 326, 329, 330, 356, 357, 448, 471, 475, 476, 480, 491, 538, 550, 563, 571, 575, 576, 578, 581, 582, 583, 587, 606, 617, 618, 664, 668, 674, 679, 683, 684, 689, 691, 716, 729, 757, 772, 775, 781, 816, 846, 847, 851, 860, 862, 867, 886, 887, 888, 891, 892, 906, 911, 1014, 1047, 1048, 1052, 1063, 1109, 1117, 1157, 1168, 1169, 1223, 1226, 1228, 1240], "37": 17, "beaut": 17, "48": [17, 234, 299, 572, 757, 822, 867], "fmt_str_length": 17, "50": [17, 32, 40, 164, 172, 184, 299, 350, 403, 417, 757, 917, 934, 987, 1240], "element": [18, 19, 30, 145, 148, 157, 163, 201, 224, 235, 249, 263, 270, 299, 314, 316, 317, 318, 319, 320, 321, 344, 348, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 372, 373, 429, 430, 434, 446, 457, 471, 479, 480, 482, 483, 484, 491, 492, 498, 499, 500, 501, 512, 513, 520, 552, 553, 563, 566, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 587, 593, 594, 595, 600, 601, 634, 635, 646, 662, 663, 665, 671, 688, 690, 734, 735, 738, 746, 757, 773, 781, 832, 833, 837, 841, 867, 877, 878, 879, 880, 881, 882, 883, 905, 913, 916, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 937, 938, 999, 1000, 1005, 1013, 1026, 1040, 1042, 1043, 1051, 1052, 1054, 1055, 1056, 1063, 1064, 1070, 1071, 1072, 1073, 1084, 1085, 1088, 1102, 1109, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1133, 1144, 1145, 1146, 1150, 1151, 1185, 1186, 1197, 1211, 1214, 1215, 1219, 1224, 1225, 1229, 1240], "empti": [18, 36, 37, 58, 96, 108, 116, 117, 121, 127, 130, 159, 160, 186, 199, 215, 299, 719, 736, 776, 777, 795, 813, 867, 870, 916, 920, 1021, 1240], "alwai": [18, 37, 39, 58, 64, 116, 145, 185, 188, 209, 285, 299, 528, 643, 701, 747, 809, 867, 1088, 1194, 1240, 1248, 1249], "neg": [18, 49, 137, 186, 187, 189, 190, 192, 208, 234, 244, 245, 247, 252, 276, 299, 502, 503, 556, 572, 589, 590, 597, 632, 757, 795, 796, 798, 799, 822, 828, 829, 831, 846, 847, 867, 1013, 1043, 1074, 1075, 1139, 1140, 1148, 1183, 1211, 1240], "result": [18, 37, 43, 44, 45, 58, 59, 60, 80, 88, 109, 111, 118, 119, 120, 121, 130, 133, 135, 136, 148, 172, 186, 189, 191, 205, 220, 224, 234, 237, 244, 245, 260, 269, 276, 278, 299, 403, 406, 409, 417, 425, 426, 427, 431, 446, 468, 508, 509, 518, 520, 552, 560, 567, 568, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 588, 589, 590, 633, 634, 645, 666, 691, 692, 693, 696, 697, 701, 702, 703, 704, 705, 706, 721, 730, 733, 734, 735, 748, 757, 774, 778, 795, 796, 798, 799, 803, 808, 809, 818, 822, 826, 828, 829, 847, 848, 867, 876, 933, 973, 976, 979, 987, 996, 997, 998, 1001, 1012, 1041, 1080, 1088, 1107, 1113, 1114, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1126, 1127, 1128, 1137, 1139, 1140, 1184, 1185, 1196, 1221, 1240, 1248, 1249], "being": [18, 87, 116, 117, 118, 130, 136, 158, 171, 257, 267, 268, 299, 314, 367, 403, 448, 575, 576, 577, 578, 579, 581, 582, 583, 707, 757, 775, 779, 787, 788, 840, 867, 912, 932, 973, 1014, 1107, 1240, 1249], "content": [18, 592, 757, 1143, 1240], "final": [18, 40, 80, 135, 299, 425, 426, 427, 757, 788, 867, 996, 997, 998, 1240], "item": [18, 88, 117, 184, 235, 238, 299, 370, 430, 478, 481, 487, 489, 497, 586, 635, 757, 935, 1000, 1050, 1053, 1059, 1061, 1069, 1131, 1186, 1240], "num": [18, 40, 262, 299, 452, 757, 1018, 1240], "fmt_table_cell_list_len": 18, "10": [18, 21, 22, 32, 36, 37, 39, 40, 41, 42, 45, 60, 64, 80, 88, 112, 119, 130, 138, 146, 148, 160, 172, 183, 184, 186, 192, 194, 196, 197, 202, 219, 223, 224, 226, 230, 232, 234, 240, 252, 273, 278, 282, 284, 286, 287, 288, 289, 290, 291, 292, 299, 309, 313, 322, 323, 324, 326, 350, 358, 361, 370, 374, 376, 378, 379, 382, 384, 388, 390, 392, 395, 396, 397, 402, 403, 404, 407, 417, 420, 446, 447, 451, 457, 467, 472, 481, 488, 503, 506, 512, 528, 530, 539, 553, 556, 567, 572, 597, 647, 659, 673, 685, 692, 701, 704, 707, 710, 712, 714, 719, 721, 742, 745, 757, 778, 779, 795, 800, 802, 807, 817, 818, 822, 824, 834, 835, 843, 848, 852, 854, 856, 857, 858, 859, 860, 861, 862, 867, 870, 917, 935, 940, 942, 948, 972, 987, 990, 993, 1013, 1026, 1043, 1053, 1060, 1075, 1078, 1084, 1088, 1102, 1113, 1132, 1135, 1198, 1211, 1240, 1249], "size": [19, 45, 60, 116, 117, 118, 144, 145, 146, 148, 150, 170, 267, 299, 568, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 680, 716, 717, 734, 735, 757, 778, 867, 995, 1114, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1240, 1249], "overwrit": [19, 38, 39, 105, 107, 108, 109, 111, 116, 117, 125, 126, 130, 134, 154, 268, 299, 309, 757, 788, 867], "chunk": [19, 60, 114, 116, 117, 128, 130, 133, 134, 135, 146, 148, 172, 204, 219, 299, 313, 564, 757, 867, 876, 915, 1001, 1010, 1094, 1110, 1216, 1240], "stream": [19, 41, 42, 58, 59, 60, 86, 87, 124, 157, 185, 188, 205, 263, 265, 299, 518, 757, 773, 778, 779, 786, 788, 794, 797, 803, 808, 809, 813, 818, 830, 832, 837, 838, 867], "engin": [19, 38, 118, 119, 121, 150, 185, 188, 205, 209, 265, 285, 299, 518, 757, 794, 797, 803, 808, 809, 813, 838, 855, 867, 1088, 1240], "determin": [19, 37, 40, 58, 78, 80, 88, 108, 111, 116, 117, 118, 121, 127, 128, 130, 135, 137, 155, 165, 178, 186, 189, 203, 204, 209, 224, 234, 264, 269, 299, 347, 386, 402, 403, 417, 448, 509, 519, 528, 560, 566, 567, 575, 576, 577, 578, 579, 581, 582, 583, 596, 604, 614, 615, 643, 645, 646, 703, 730, 733, 748, 757, 795, 798, 822, 867, 910, 952, 972, 973, 987, 1014, 1081, 1087, 1107, 1113, 1147, 1155, 1165, 1166, 1194, 1196, 1197, 1240], "schema": [19, 33, 36, 38, 39, 64, 81, 82, 83, 88, 100, 101, 103, 105, 107, 108, 109, 111, 116, 117, 118, 119, 123, 125, 126, 128, 129, 130, 134, 135, 144, 146, 155, 159, 160, 168, 170, 204, 209, 216, 220, 259, 299, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 379, 508, 509, 528, 614, 615, 673, 739, 757, 776, 777, 785, 808, 809, 814, 826, 850, 855, 867, 870, 897, 920, 1165, 1166, 1240], "thread": [19, 37, 58, 87, 114, 116, 117, 119, 150, 299, 314, 483, 520, 757, 779, 867, 1055], "pool": [19, 87, 150, 779, 867], "For": [19, 39, 40, 116, 117, 119, 120, 121, 130, 131, 132, 167, 172, 205, 206, 225, 234, 285, 299, 302, 425, 426, 427, 509, 520, 529, 565, 596, 603, 611, 612, 613, 626, 692, 696, 706, 710, 711, 753, 757, 784, 804, 822, 855, 867, 996, 997, 998, 1001, 1028, 1111, 1147, 1154, 1162, 1163, 1164, 1177, 1221, 1240, 1244], "some": [19, 35, 40, 71, 90, 108, 116, 117, 118, 121, 130, 154, 167, 299, 753, 784, 867, 1026, 1240, 1249], "dataset": [19, 45, 51, 116, 117, 128, 130, 136, 205, 299, 468, 757, 769, 803, 808, 809, 867, 1041, 1240], "esp": 19, "have": [19, 35, 39, 40, 48, 71, 80, 90, 106, 115, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 146, 148, 172, 203, 205, 228, 234, 236, 237, 256, 276, 299, 367, 425, 426, 427, 520, 529, 563, 567, 572, 613, 757, 782, 803, 813, 822, 830, 846, 847, 867, 870, 932, 934, 996, 997, 998, 1001, 1011, 1109, 1113, 1196, 1240, 1249], "too": [19, 571, 757, 788, 867], "optimist": 19, "lead": [19, 45, 112, 136, 186, 187, 189, 190, 213, 234, 244, 251, 299, 441, 444, 502, 518, 520, 572, 588, 589, 621, 637, 638, 640, 660, 688, 757, 795, 796, 798, 799, 808, 809, 822, 828, 850, 855, 867, 1074, 1088, 1137, 1139, 1172, 1188, 1189, 1191, 1240], "memori": [19, 60, 88, 105, 106, 109, 110, 111, 116, 117, 118, 121, 122, 128, 130, 133, 134, 135, 154, 172, 209, 237, 246, 285, 299, 552, 564, 591, 757, 778, 867, 1001, 1088, 1110, 1141, 1142, 1240], "error": [19, 39, 87, 116, 117, 130, 158, 224, 235, 299, 309, 340, 345, 467, 486, 489, 507, 539, 603, 607, 611, 613, 614, 616, 643, 644, 645, 649, 757, 775, 779, 850, 855, 867, 901, 906, 1058, 1061, 1079, 1154, 1158, 1162, 1164, 1165, 1167, 1194, 1195, 1196, 1200, 1240], "row": [19, 25, 30, 37, 38, 40, 43, 45, 58, 60, 80, 81, 83, 88, 97, 99, 104, 108, 109, 111, 112, 116, 117, 118, 121, 122, 124, 125, 128, 130, 133, 134, 135, 136, 139, 140, 144, 146, 155, 157, 159, 167, 172, 175, 178, 180, 184, 185, 186, 188, 191, 192, 198, 200, 201, 203, 204, 205, 206, 207, 208, 209, 215, 220, 237, 238, 247, 252, 253, 256, 258, 263, 265, 267, 268, 275, 276, 281, 283, 285, 293, 299, 325, 430, 442, 447, 472, 484, 509, 552, 553, 568, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 597, 599, 610, 614, 615, 659, 661, 680, 683, 689, 691, 696, 697, 710, 714, 716, 717, 732, 734, 735, 742, 747, 757, 773, 776, 778, 784, 788, 791, 792, 793, 795, 800, 803, 804, 805, 807, 809, 813, 831, 835, 836, 837, 838, 840, 846, 847, 851, 853, 855, 863, 867, 1000, 1001, 1009, 1013, 1056, 1102, 1114, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1148, 1161, 1165, 1166, 1211, 1213, 1240, 1249], "per": [19, 37, 40, 58, 144, 146, 157, 184, 220, 221, 241, 248, 263, 274, 288, 290, 291, 299, 314, 483, 486, 487, 507, 520, 599, 670, 683, 757, 773, 825, 832, 837, 844, 858, 860, 861, 867, 1055, 1058, 1059, 1079, 1228, 1240], "everi": [19, 37, 58, 116, 117, 130, 180, 186, 189, 253, 256, 269, 299, 327, 328, 329, 330, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 403, 417, 430, 442, 475, 476, 481, 484, 487, 488, 498, 503, 506, 571, 610, 661, 692, 693, 696, 697, 757, 788, 793, 795, 798, 836, 867, 889, 890, 891, 892, 924, 925, 926, 927, 928, 929, 930, 931, 932, 973, 987, 1000, 1009, 1011, 1047, 1048, 1053, 1056, 1059, 1060, 1070, 1075, 1078, 1117, 1161, 1213, 1240], "process": [19, 37, 58, 59, 60, 116, 117, 118, 130, 150, 299, 778, 867], "liter": [20, 21, 25, 39, 118, 121, 147, 148, 149, 240, 241, 244, 268, 273, 274, 299, 309, 339, 350, 376, 423, 424, 431, 438, 443, 445, 452, 470, 515, 519, 535, 537, 547, 548, 557, 567, 603, 606, 626, 627, 656, 666, 675, 677, 685, 686, 687, 695, 699, 700, 703, 719, 724, 728, 736, 739, 741, 743, 757, 790, 824, 825, 828, 840, 843, 844, 867, 870, 900, 917, 942, 1002, 1018, 1113, 1132, 1135, 1139, 1154, 1157, 1177, 1178, 1240], "left": [20, 21, 40, 66, 80, 139, 140, 141, 142, 186, 187, 189, 190, 205, 206, 234, 268, 299, 368, 425, 426, 427, 451, 452, 560, 572, 575, 576, 577, 578, 579, 581, 582, 583, 587, 620, 664, 685, 692, 693, 696, 697, 701, 702, 704, 705, 710, 732, 744, 745, 747, 757, 795, 796, 798, 799, 803, 804, 822, 840, 867, 933, 996, 997, 998, 1018, 1107, 1133, 1171, 1223, 1240], "center": [20, 21, 40, 299, 425, 426, 427, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 757, 996, 997, 998, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1126, 1127, 1128, 1240], "cell": [20, 21, 40, 299], "valueerror": [20, 25], "recognis": [20, 21, 25, 143], "column_abc": 20, "column_xyz": 20, "keyerror": 21, "datetim": [21, 37, 40, 58, 80, 112, 121, 146, 158, 164, 184, 186, 187, 189, 190, 204, 206, 225, 234, 269, 299, 302, 374, 375, 376, 377, 378, 380, 382, 383, 384, 386, 387, 388, 390, 392, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 478, 572, 575, 576, 577, 578, 579, 581, 582, 583, 643, 645, 664, 701, 702, 704, 705, 706, 712, 719, 744, 745, 757, 775, 795, 796, 798, 799, 804, 822, 867, 870, 939, 940, 941, 942, 943, 944, 946, 948, 949, 950, 952, 953, 954, 955, 956, 957, 959, 961, 962, 964, 965, 966, 967, 969, 970, 971, 972, 973, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 1037, 1050, 1051, 1052, 1097, 1098, 1132, 1136, 1194, 1196, 1223, 1240], "date": [21, 40, 48, 80, 116, 117, 119, 121, 127, 130, 136, 146, 158, 164, 184, 186, 187, 189, 190, 204, 206, 225, 234, 299, 302, 375, 376, 377, 380, 383, 386, 387, 394, 395, 396, 399, 400, 401, 402, 403, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 478, 572, 575, 576, 577, 578, 579, 581, 582, 583, 643, 644, 664, 701, 702, 704, 705, 712, 719, 743, 757, 775, 795, 796, 798, 799, 804, 822, 867, 870, 941, 942, 943, 946, 949, 950, 952, 953, 954, 956, 957, 961, 962, 964, 965, 966, 967, 969, 970, 971, 972, 973, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 991, 1037, 1050, 1051, 1052, 1097, 1098, 1132, 1136, 1194, 1195, 1223, 1240], "333": [21, 585, 757, 1130, 1240], "mno": [21, 25], "2023": [21, 40, 112, 138, 204, 299, 376, 706, 719, 870, 942], "29": [21, 146, 374, 395, 940, 965], "2001": [21, 375, 380, 383, 386, 394, 399, 400, 401, 403, 408, 417, 418, 419, 420, 575, 576, 578, 581, 582, 583, 643, 757, 870, 941, 946, 949, 950, 952, 954, 955, 956, 957, 959, 961, 962, 964, 967, 969, 970, 971, 973, 978, 987, 988, 989, 990, 991, 1194], "null": [21, 37, 39, 58, 66, 80, 88, 108, 116, 117, 126, 130, 136, 154, 157, 159, 163, 164, 167, 169, 174, 178, 179, 197, 205, 212, 213, 214, 221, 224, 227, 244, 245, 248, 249, 250, 251, 255, 260, 263, 266, 268, 270, 273, 281, 299, 310, 312, 313, 314, 324, 327, 328, 338, 340, 350, 356, 358, 361, 370, 372, 373, 399, 410, 411, 412, 413, 414, 415, 416, 424, 425, 426, 427, 428, 431, 432, 433, 439, 451, 461, 463, 464, 465, 471, 473, 474, 481, 482, 485, 486, 487, 490, 491, 498, 499, 500, 501, 502, 507, 509, 520, 548, 549, 550, 553, 564, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 589, 590, 591, 593, 598, 602, 603, 605, 606, 607, 608, 609, 611, 612, 613, 614, 616, 617, 618, 623, 624, 625, 632, 634, 635, 636, 647, 652, 653, 654, 655, 664, 674, 675, 676, 677, 685, 686, 687, 689, 691, 695, 708, 719, 724, 728, 734, 735, 739, 741, 747, 757, 773, 776, 781, 784, 790, 802, 803, 816, 826, 828, 829, 832, 837, 839, 840, 843, 845, 851, 867, 874, 875, 877, 886, 889, 890, 901, 916, 917, 935, 937, 938, 980, 981, 982, 983, 984, 985, 986, 994, 996, 997, 998, 1002, 1004, 1011, 1017, 1033, 1034, 1042, 1045, 1046, 1049, 1053, 1054, 1057, 1058, 1059, 1062, 1063, 1071, 1073, 1074, 1079, 1081, 1088, 1101, 1102, 1116, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1134, 1139, 1140, 1144, 1153, 1154, 1156, 1157, 1158, 1159, 1160, 1162, 1163, 1164, 1165, 1167, 1168, 1169, 1174, 1175, 1176, 1183, 1185, 1186, 1187, 1198, 1203, 1219, 1221, 1222, 1223, 1230, 1240, 1248, 1249], "07": [21, 376, 402, 403, 417, 643, 701, 704, 712, 870, 942, 972, 1194], "05": [21, 136, 139, 140, 141, 142, 146, 158, 206, 269, 299, 376, 377, 378, 379, 384, 388, 390, 392, 397, 402, 404, 406, 407, 409, 410, 701, 704, 775, 804, 867, 870, 942, 943, 944, 945, 972, 973, 976, 977, 979, 980, 987], "visibl": [22, 170, 299, 995, 1240], "eg": [22, 30, 40, 88, 119, 152, 299, 403, 643, 645, 666, 757, 1011, 1194, 1196, 1240], "low": [22, 118, 150, 560, 757, 1107, 1240], "rang": [22, 40, 118, 119, 164, 170, 186, 204, 299, 369, 380, 394, 400, 401, 403, 417, 418, 451, 680, 686, 700, 701, 702, 703, 704, 705, 716, 717, 743, 744, 745, 757, 795, 867, 934, 946, 964, 970, 971, 973, 987, 988, 995, 1102, 1240], "98": [22, 196, 299, 344, 441, 444, 598, 646, 665, 757, 1197], "99": [22, 40, 173, 174, 196, 199, 268, 299, 308, 344, 431, 433, 441, 444, 598, 665, 747, 757, 789, 790, 840, 867, 993, 1002, 1240], "tbl_col": 22, "95": [22, 308, 757], "96": [22, 308, 757], "97": [22, 196, 299, 308, 757], "move": [23, 237, 299, 425, 426, 427, 575, 576, 578, 582, 757, 996, 997, 998, 1120, 1121, 1123, 1127, 1240], "inlin": [23, 237, 299, 603, 611, 612, 626, 1154, 1162, 1163, 1177], "parenthes": 23, "inform": [24, 28, 38, 85, 120, 128, 131, 132, 135, 139, 141, 162, 164, 225, 299, 302, 468, 596, 603, 611, 612, 626, 757, 818, 867, 911, 1041, 1147, 1154, 1162, 1163, 1177, 1240, 1244], "below": [24, 39, 120, 131, 132, 167, 186, 224, 299, 433, 701, 702, 704, 705, 744, 745, 747, 753, 757, 784, 795, 867], "ascii_ful": 25, "ascii_full_condens": 25, "ascii_no_bord": 25, "ascii_borders_onli": 25, "ascii_borders_only_condens": 25, "ascii_horizontal_onli": 25, "ascii_markdown": 25, "utf8_ful": [25, 80, 112], "utf8_no_bord": 25, "utf8_borders_onli": 25, "utf8_horizontal_onli": 25, "noth": [25, 611, 616, 1162, 1167], "rounded_corn": 25, "border": 25, "includ": [25, 35, 37, 39, 40, 58, 85, 118, 120, 131, 132, 146, 157, 164, 170, 222, 237, 263, 264, 267, 268, 299, 368, 404, 448, 452, 560, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 633, 634, 638, 639, 692, 696, 734, 735, 757, 773, 837, 840, 867, 870, 933, 934, 974, 995, 1014, 1018, 1107, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1184, 1185, 1189, 1230, 1240], "divid": [25, 368, 403, 417, 425, 426, 427, 468, 560, 757, 933, 973, 987, 996, 997, 998, 1041, 1107, 1240], "same": [25, 39, 40, 68, 71, 80, 86, 87, 88, 89, 90, 122, 130, 139, 140, 141, 142, 144, 152, 175, 185, 205, 209, 224, 237, 248, 265, 273, 274, 278, 285, 299, 306, 313, 336, 372, 373, 434, 441, 444, 508, 524, 527, 552, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 599, 617, 655, 757, 778, 779, 791, 794, 803, 808, 809, 832, 838, 843, 844, 848, 867, 872, 877, 898, 933, 937, 938, 942, 1080, 1088, 1107, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1126, 1127, 1128, 1168, 1231, 1240], "dens": [25, 184, 299, 563, 757, 1109, 1240], "space": [25, 186, 299, 795, 867], "horizont": [25, 88, 178, 194, 210, 211, 212, 213, 217, 218, 250, 251, 267, 299, 675, 677, 686, 687, 692, 693, 695, 696, 697, 699, 707, 710, 724, 728, 732, 741], "markdown": 25, "compat": [25, 40, 45, 60, 299, 603, 605, 606, 611, 612, 613, 626, 627, 867, 870, 1154, 1156, 1157, 1162, 1163, 1164, 1177, 1178], "utf8": [25, 116, 117, 130], "No": [25, 650, 1201], "round": [25, 40, 82, 112, 118, 299, 349, 355, 437, 585, 662, 757, 914, 1007, 1130, 1240], "corner": [25, 40, 112, 299], "op": [25, 148, 299, 566, 757, 867, 1196, 1240], "one": [25, 37, 38, 40, 58, 69, 80, 97, 105, 107, 108, 109, 110, 111, 116, 117, 121, 125, 126, 127, 130, 147, 148, 149, 152, 174, 175, 184, 185, 186, 187, 189, 190, 203, 215, 224, 234, 235, 236, 242, 244, 259, 262, 279, 299, 308, 368, 433, 434, 441, 444, 502, 509, 513, 571, 572, 589, 598, 612, 628, 722, 737, 747, 753, 757, 790, 791, 794, 795, 796, 798, 799, 813, 822, 827, 828, 845, 849, 867, 876, 933, 1004, 1037, 1074, 1081, 1085, 1107, 1117, 1139, 1163, 1179, 1204, 1240, 1244], "more": [25, 40, 43, 45, 60, 69, 80, 88, 89, 90, 104, 105, 106, 107, 108, 109, 110, 111, 118, 119, 120, 121, 125, 126, 127, 128, 131, 132, 139, 141, 146, 148, 152, 162, 164, 175, 202, 203, 207, 209, 215, 220, 225, 235, 236, 238, 259, 265, 285, 299, 302, 311, 314, 337, 434, 468, 497, 510, 513, 518, 520, 551, 586, 596, 612, 617, 643, 644, 645, 667, 708, 737, 747, 757, 813, 838, 867, 870, 877, 899, 911, 934, 1037, 1041, 1069, 1082, 1088, 1131, 1147, 1163, 1168, 1194, 1195, 1196, 1225, 1240, 1244, 1249], "semigraph": 25, "box": [25, 209, 299], "draw": [25, 30, 145, 1249], "found": [25, 37, 40, 58, 66, 92, 101, 103, 108, 112, 168, 299, 587, 616, 641, 642, 643, 645, 757, 867, 1133, 1167, 1192, 1193, 1194, 1196, 1240, 1248], "unicod": 25, "block": [25, 87, 185, 188, 265, 299, 747, 779, 794, 797, 820, 838, 846, 847, 855, 867, 1132, 1135, 1240], "http": [25, 40, 41, 42, 106, 118, 119, 154, 162, 299, 611, 613, 1162, 1164], "en": [25, 40, 299], "wikipedia": 25, "org": [25, 41, 42, 106, 118, 119, 154, 162, 299], "wiki": 25, "drawing_charact": 25, "box_draw": 25, "tbl_format": 25, "tbl_hide_column_data_typ": 25, "tbl_hide_dataframe_shap": 25, "hide": [26, 27, 28, 29, 40, 299], "etc": [26, 39, 40, 116, 120, 122, 124, 131, 132, 133, 299, 757, 870, 1132, 1135, 1240], "between": [29, 88, 143, 144, 146, 148, 162, 227, 291, 299, 345, 370, 371, 452, 481, 489, 498, 499, 500, 501, 553, 560, 561, 579, 602, 681, 682, 688, 690, 731, 734, 735, 757, 819, 861, 867, 906, 911, 935, 936, 1018, 1053, 1061, 1070, 1071, 1072, 1073, 1102, 1107, 1108, 1124, 1153, 1240], "set_tbl_column_data_type_inlin": 29, "max": [30, 40, 45, 60, 64, 150, 164, 174, 185, 211, 224, 234, 299, 351, 358, 363, 433, 509, 552, 563, 567, 572, 575, 588, 635, 724, 737, 757, 790, 794, 822, 867, 918, 924, 928, 934, 1004, 1081, 1109, 1120, 1137, 1186, 1240], "tbl_row": 30, "also": [32, 37, 40, 58, 69, 71, 108, 118, 121, 127, 130, 144, 145, 146, 147, 148, 152, 168, 185, 186, 187, 189, 190, 216, 220, 234, 236, 240, 248, 268, 273, 276, 299, 358, 361, 399, 402, 434, 452, 520, 563, 567, 575, 576, 577, 578, 579, 581, 582, 583, 599, 638, 639, 692, 693, 696, 697, 701, 710, 712, 732, 747, 756, 757, 763, 794, 795, 796, 798, 799, 814, 822, 824, 832, 840, 843, 845, 847, 867, 870, 972, 1018, 1109, 1113, 1156, 1157, 1189, 1240, 1244], "char": [32, 612, 1163], "omit": [32, 108, 112, 144, 146, 148, 152, 220, 237, 299, 716, 744, 745, 870], "set_decimal_separ": 32, "x": [32, 66, 67, 72, 80, 88, 106, 112, 116, 117, 119, 130, 144, 146, 154, 170, 194, 198, 200, 205, 215, 224, 225, 236, 237, 267, 299, 302, 307, 309, 311, 369, 423, 424, 438, 443, 445, 446, 470, 477, 489, 513, 515, 517, 518, 520, 535, 537, 540, 541, 542, 543, 544, 547, 548, 551, 557, 558, 566, 567, 571, 593, 596, 634, 656, 657, 664, 666, 673, 675, 677, 681, 682, 692, 693, 695, 710, 719, 721, 724, 728, 732, 741, 747, 757, 803, 809, 813, 831, 867, 870, 911, 1004, 1039, 1088, 1113, 1144, 1147, 1185, 1223, 1240, 1248], "1234567": 32, "987654": [32, 870], "10101": 32, "y": [32, 72, 80, 88, 106, 112, 144, 146, 154, 170, 198, 200, 205, 215, 224, 225, 236, 237, 267, 299, 302, 307, 309, 311, 406, 409, 423, 424, 443, 445, 470, 477, 489, 515, 517, 520, 540, 541, 542, 543, 544, 547, 548, 551, 558, 566, 567, 571, 643, 644, 645, 657, 666, 673, 675, 677, 681, 682, 695, 706, 719, 724, 728, 741, 757, 803, 813, 831, 867, 870, 911, 976, 979, 1113, 1194, 1195, 1196, 1240], "1234": [32, 585, 757, 1130, 1240], "7654321": 32, "234": 32, "567": 32, "987": 32, "654": 32, "00": [32, 40, 146, 186, 206, 269, 299, 374, 375, 377, 382, 395, 396, 399, 402, 403, 406, 409, 410, 411, 412, 413, 414, 415, 416, 417, 420, 575, 576, 578, 581, 582, 583, 643, 645, 649, 704, 706, 744, 745, 757, 795, 804, 867, 870, 940, 941, 943, 944, 945, 948, 949, 950, 956, 957, 962, 965, 966, 967, 969, 972, 973, 977, 978, 980, 981, 982, 983, 984, 985, 986, 987, 990, 1194, 1196, 1200], "321": [32, 1249], "strip": [33, 621, 631, 638, 639, 640, 641, 642, 1172, 1182, 1189, 1190, 1191], "trail": [33, 184, 299, 631, 637, 638, 639, 1182, 1188, 1189, 1190], "zero": [33, 40, 105, 106, 115, 116, 117, 122, 124, 128, 145, 154, 174, 203, 235, 254, 260, 299, 433, 509, 513, 587, 596, 652, 666, 757, 776, 790, 867, 916, 1004, 1081, 1147, 1203, 1216, 1221, 1222, 1240], "enabl": [33, 34, 71, 89, 90, 139, 140, 141, 142, 151, 240, 273, 299, 310, 312, 567, 588, 604, 628, 670, 753, 757, 778, 824, 843, 867, 874, 875, 1113, 1137, 1155, 1179, 1228, 1240], "d": [33, 36, 37, 39, 40, 41, 42, 45, 108, 136, 184, 186, 191, 192, 196, 205, 252, 254, 267, 271, 282, 284, 286, 287, 288, 289, 290, 291, 292, 299, 307, 309, 383, 406, 409, 452, 556, 591, 606, 612, 634, 643, 644, 645, 685, 706, 712, 757, 795, 803, 852, 854, 856, 857, 858, 859, 860, 861, 862, 867, 911, 949, 976, 979, 1018, 1049, 1157, 1163, 1185, 1194, 1195, 1196, 1240], "01": [33, 80, 146, 158, 164, 184, 186, 234, 269, 299, 374, 375, 376, 377, 378, 379, 383, 384, 387, 388, 390, 392, 394, 395, 396, 397, 399, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 572, 575, 576, 578, 581, 582, 583, 643, 644, 645, 649, 701, 702, 704, 706, 757, 775, 795, 822, 867, 870, 941, 942, 943, 944, 945, 949, 950, 956, 957, 962, 965, 966, 967, 969, 972, 973, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 990, 1194, 1195, 1196, 1200], "6789": 33, "scale": [33, 49, 170, 299, 520, 556, 646, 757, 995, 1197, 1240], "trim_decimal_zero": 33, "01000": 33, "67890": 33, "addit": [34, 39, 40, 108, 120, 121, 131, 132, 144, 165, 167, 171, 185, 188, 222, 240, 241, 242, 248, 266, 273, 274, 278, 299, 307, 382, 428, 431, 552, 599, 603, 611, 612, 626, 683, 685, 686, 687, 708, 736, 739, 757, 783, 787, 794, 797, 824, 825, 827, 832, 839, 843, 844, 848, 867, 940, 948, 1002, 1154, 1162, 1163, 1177, 1240, 1244], "verbos": [34, 139, 141, 152, 612, 1163], "debug": [34, 778, 788, 808, 809, 867, 1249], "log": [34, 82, 344, 422, 513, 537, 557, 665, 757, 905, 993, 1224, 1240], "do_polars_oper": 34, "if_set": 35, "env_onli": 35, "dict": [35, 39, 40, 45, 67, 81, 83, 85, 105, 107, 108, 109, 110, 111, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 146, 177, 203, 222, 229, 235, 236, 237, 239, 255, 256, 264, 299, 519, 571, 757, 820, 823, 867, 1087, 1240], "show": [35, 40, 68, 164, 167, 184, 207, 221, 299, 448, 757, 784, 818, 830, 867, 1014, 1240], "variabl": [35, 61, 66, 128, 135, 147, 150, 215, 257, 299, 813, 867, 1217, 1240, 1248], "chang": [35, 80, 87, 116, 117, 118, 136, 267, 268, 269, 275, 299, 314, 367, 368, 370, 403, 448, 519, 520, 553, 560, 571, 575, 576, 577, 578, 579, 581, 582, 583, 708, 757, 779, 840, 846, 867, 911, 912, 932, 933, 973, 1014, 1087, 1102, 1107, 1117, 1142, 1240], "restrict": [35, 635, 1186], "dictionari": [35, 40, 72, 105, 107, 108, 109, 111, 116, 117, 118, 119, 123, 125, 126, 129, 130, 134, 203, 222, 235, 236, 237, 255, 256, 299, 519, 757, 867, 1087, 1240], "those": [35, 40, 116, 121, 237, 268, 299, 563, 611, 708, 722, 757, 840, 867, 870, 1109, 1162, 1240], "been": [35, 40, 154, 155, 176, 179, 187, 188, 189, 190, 195, 231, 253, 280, 299, 314, 362, 363, 364, 365, 366, 455, 459, 462, 467, 479, 492, 507, 516, 517, 519, 520, 558, 563, 573, 575, 576, 577, 578, 579, 581, 582, 583, 605, 615, 619, 620, 621, 622, 625, 630, 631, 637, 657, 660, 661, 678, 698, 699, 720, 757, 796, 797, 798, 799, 808, 836, 850, 867, 877, 928, 929, 930, 931, 1023, 1029, 1051, 1064, 1079, 1087, 1109, 1118, 1134, 1136, 1156, 1166, 1170, 1171, 1172, 1173, 1176, 1181, 1182, 1188, 1212, 1213, 1240], "set_fmt_float": 35, "via": [35, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133, 134, 135, 203, 236, 299, 314, 520, 613, 757, 782, 867, 1164], "set_stat": 35, "all_stat": 35, "binaryio": [36, 41, 42, 115, 116, 121, 122, 124, 127, 299], "bytesio": [36, 37, 40, 41, 42, 45, 115, 116, 117, 121, 122, 123, 124, 125, 126, 127, 128, 129, 299, 782, 867], "compress": [36, 41, 42, 45, 59, 60, 299, 867], "avrocompress": [36, 299], "uncompress": [36, 41, 42, 45, 60, 122, 133, 299, 867], "write": [36, 37, 38, 39, 40, 41, 42, 43, 45, 58, 59, 60, 117, 122, 152, 299, 350, 533, 757, 806, 830, 867, 917, 1240], "apach": [36, 41, 42, 45, 115, 118, 119, 132, 299, 769], "avro": [36, 115, 299, 769], "writeabl": [36, 37, 41, 42, 43, 44, 45, 299], "like": [36, 37, 39, 41, 42, 43, 44, 45, 87, 106, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 186, 198, 200, 205, 259, 299, 374, 483, 532, 563, 611, 639, 640, 670, 753, 757, 779, 782, 795, 867, 940, 1055, 1109, 1162, 1228, 1240], "object": [36, 37, 39, 40, 41, 42, 43, 44, 45, 69, 72, 88, 106, 107, 112, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 144, 146, 148, 154, 185, 186, 188, 189, 206, 207, 234, 237, 259, 260, 299, 701, 702, 704, 705, 719, 744, 745, 769, 782, 795, 796, 798, 799, 804, 822, 867, 870, 907, 939, 1044, 1152, 1216, 1240], "snappi": [36, 45, 60, 299, 867], "deflat": [36, 299], "pathlib": [36, 37, 41, 42, 45, 130, 299], "foo": [36, 37, 39, 41, 42, 43, 44, 45, 68, 158, 161, 162, 165, 166, 167, 168, 169, 172, 175, 178, 181, 182, 183, 191, 192, 193, 194, 196, 197, 199, 205, 209, 210, 211, 212, 213, 214, 217, 218, 221, 224, 227, 229, 230, 232, 235, 238, 239, 240, 243, 247, 249, 250, 251, 252, 254, 256, 257, 258, 259, 260, 261, 264, 265, 266, 270, 271, 272, 277, 299, 346, 368, 399, 442, 447, 450, 472, 524, 527, 528, 529, 530, 531, 532, 560, 568, 602, 606, 608, 610, 612, 613, 629, 633, 635, 638, 639, 640, 641, 642, 648, 651, 659, 679, 688, 690, 709, 713, 714, 718, 723, 725, 726, 727, 729, 731, 736, 738, 742, 746, 747, 753, 757, 775, 780, 783, 784, 785, 791, 801, 802, 803, 816, 820, 823, 824, 838, 839, 842, 845, 867, 870, 908, 933, 969, 1061, 1107, 1114, 1157, 1159, 1161, 1163, 1164, 1180, 1186, 1192, 1193, 1199, 1202, 1240], "bar": [36, 37, 39, 41, 42, 43, 44, 45, 68, 158, 161, 162, 165, 166, 167, 168, 169, 172, 175, 178, 181, 182, 183, 192, 194, 196, 197, 199, 205, 209, 210, 211, 212, 213, 214, 217, 218, 221, 224, 227, 229, 230, 232, 235, 238, 239, 240, 247, 249, 250, 251, 252, 254, 256, 257, 258, 259, 260, 261, 265, 266, 270, 271, 277, 299, 346, 450, 524, 525, 526, 527, 528, 529, 530, 531, 532, 596, 606, 608, 610, 612, 613, 629, 633, 635, 641, 642, 679, 688, 690, 709, 714, 718, 723, 725, 726, 727, 729, 736, 738, 742, 746, 747, 753, 757, 775, 780, 783, 784, 785, 791, 801, 802, 803, 816, 820, 823, 824, 838, 839, 842, 867, 870, 908, 1061, 1147, 1157, 1159, 1161, 1163, 1164, 1180, 1186, 1192, 1193, 1240], "ham": [36, 37, 39, 41, 42, 45, 158, 161, 162, 165, 166, 167, 168, 169, 175, 182, 191, 192, 194, 205, 210, 212, 214, 217, 221, 227, 229, 232, 235, 238, 239, 240, 247, 249, 250, 252, 257, 258, 259, 260, 261, 265, 270, 271, 299, 346, 531, 775, 780, 783, 784, 785, 791, 803, 816, 820, 823, 824, 838, 845, 867, 908], "dirpath": [36, 37, 41, 42, 45, 130, 299], "new_fil": [36, 37, 41, 42, 45, 299], "textiowrapp": [37, 299], "include_bom": [37, 58, 299, 867], "include_head": [37, 40, 58, 117, 264, 299, 867], "line_termin": [37, 58, 299, 867], "quote_char": [37, 58, 116, 117, 130, 299, 867], "batch_siz": [37, 58, 116, 117, 118, 134, 136, 299, 867], "1024": [37, 45, 58, 60, 116, 117, 118, 134, 299, 867], "datetime_format": [37, 58, 299, 867], "date_format": [37, 58, 299, 867], "time_format": [37, 58, 299, 867], "null_valu": [37, 58, 116, 117, 130, 299, 867], "quote_styl": [37, 58, 299, 867], "csvquotestyl": [37, 58, 299, 867], "comma": [37, 299], "csv": [37, 58, 59, 60, 116, 117, 121, 130, 299, 769, 867], "If": [37, 38, 39, 40, 41, 42, 43, 44, 45, 58, 60, 64, 71, 85, 87, 88, 105, 106, 107, 108, 109, 110, 111, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 133, 134, 135, 136, 139, 140, 141, 142, 147, 154, 155, 157, 167, 172, 184, 186, 187, 189, 190, 192, 201, 202, 203, 206, 208, 209, 213, 220, 224, 234, 236, 237, 238, 244, 247, 251, 252, 256, 257, 259, 263, 264, 265, 267, 268, 299, 310, 312, 314, 376, 395, 396, 434, 448, 468, 497, 502, 503, 509, 518, 520, 531, 552, 560, 563, 565, 567, 568, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 586, 587, 589, 592, 596, 597, 602, 612, 613, 614, 615, 621, 631, 632, 633, 634, 635, 637, 638, 639, 640, 643, 644, 645, 649, 652, 670, 674, 676, 678, 680, 684, 688, 689, 691, 692, 701, 702, 704, 705, 706, 709, 710, 716, 717, 718, 719, 722, 730, 733, 734, 735, 739, 744, 745, 747, 748, 757, 773, 778, 779, 784, 786, 795, 796, 798, 799, 803, 804, 809, 813, 820, 822, 826, 828, 831, 837, 838, 840, 850, 855, 867, 870, 874, 875, 877, 917, 933, 942, 965, 966, 1001, 1011, 1013, 1014, 1040, 1041, 1043, 1069, 1074, 1075, 1081, 1088, 1107, 1109, 1111, 1113, 1114, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1131, 1133, 1137, 1139, 1143, 1147, 1148, 1153, 1163, 1164, 1165, 1166, 1172, 1182, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1194, 1195, 1196, 1200, 1203, 1211, 1216, 1221, 1228, 1230, 1240, 1248], "instead": [37, 43, 44, 64, 68, 80, 87, 88, 116, 117, 118, 121, 127, 128, 130, 136, 146, 184, 186, 202, 203, 209, 220, 222, 225, 235, 236, 237, 240, 241, 244, 245, 260, 273, 274, 275, 299, 302, 324, 351, 352, 368, 379, 381, 385, 389, 391, 393, 398, 402, 405, 417, 428, 502, 518, 560, 589, 590, 617, 618, 621, 631, 637, 638, 639, 640, 641, 642, 643, 645, 652, 672, 680, 684, 701, 702, 703, 704, 705, 706, 709, 716, 717, 718, 730, 733, 739, 744, 745, 748, 757, 779, 789, 795, 824, 825, 826, 828, 829, 840, 843, 844, 846, 867, 870, 886, 918, 919, 933, 945, 947, 951, 958, 960, 963, 968, 972, 975, 987, 1019, 1025, 1028, 1035, 1037, 1039, 1074, 1107, 1132, 1135, 1139, 1140, 1168, 1169, 1172, 1182, 1188, 1189, 1190, 1191, 1194, 1196, 1203, 1222, 1240, 1244, 1248], "whether": [37, 58, 109, 111, 148, 151, 157, 169, 179, 202, 242, 263, 299, 310, 312, 327, 328, 386, 404, 473, 474, 588, 757, 773, 808, 809, 827, 832, 837, 867, 870, 874, 875, 889, 890, 909, 912, 952, 974, 994, 1045, 1046, 1134, 1240, 1248], "utf": [37, 58, 70, 299, 867], "bom": [37, 58, 299, 867], "header": [37, 40, 45, 58, 60, 112, 116, 117, 121, 130, 168, 224, 264, 299, 867], "field": [37, 39, 58, 72, 101, 103, 108, 259, 266, 299, 509, 570, 612, 613, 614, 634, 635, 655, 692, 693, 696, 697, 721, 739, 757, 839, 867, 933, 1081, 1107, 1116, 1164, 1183, 1185, 1186, 1207, 1209, 1240], "symbol": [37, 58, 116, 117, 130, 299, 757, 867], "end": [37, 40, 58, 116, 117, 128, 130, 186, 299, 339, 342, 343, 374, 403, 428, 452, 503, 603, 609, 612, 623, 632, 636, 639, 642, 680, 701, 702, 704, 705, 708, 716, 717, 744, 745, 747, 757, 795, 800, 807, 818, 867, 870, 903, 940, 973, 1018, 1075, 1160, 1163, 1174, 1183, 1187, 1240], "byte": [37, 45, 58, 60, 116, 117, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 170, 299, 617, 619, 867, 995, 1168, 1170, 1240], "quot": [37, 38, 58, 116, 117, 119, 130, 299, 867], "specifi": [37, 40, 58, 80, 92, 101, 103, 121, 127, 146, 157, 158, 165, 170, 171, 174, 185, 186, 187, 188, 189, 190, 205, 222, 234, 235, 237, 240, 241, 242, 244, 248, 263, 266, 273, 274, 278, 299, 350, 425, 426, 427, 428, 433, 552, 566, 567, 575, 576, 577, 578, 579, 581, 582, 583, 589, 599, 683, 685, 686, 687, 701, 702, 704, 705, 708, 736, 739, 744, 745, 757, 773, 775, 783, 787, 790, 794, 795, 796, 797, 798, 799, 803, 822, 824, 825, 827, 828, 832, 837, 839, 843, 844, 848, 867, 917, 995, 996, 997, 998, 1004, 1113, 1139, 1240], "defin": [37, 40, 48, 58, 118, 143, 144, 146, 155, 158, 167, 171, 186, 187, 189, 190, 209, 220, 223, 234, 268, 280, 285, 299, 314, 452, 486, 507, 520, 556, 560, 571, 572, 575, 576, 577, 578, 579, 581, 582, 583, 678, 701, 702, 704, 705, 719, 722, 739, 744, 745, 757, 775, 784, 787, 795, 796, 798, 799, 817, 822, 840, 850, 855, 867, 870, 877, 1018, 1058, 1088, 1107, 1117, 1240], "chrono": [37, 58, 299, 406, 409, 643, 644, 645, 649, 867, 976, 979, 1194, 1195, 1196, 1200], "rust": [37, 45, 58, 98, 118, 122, 124, 128, 209, 285, 299, 613, 867, 1088, 1164, 1240], "crate": [37, 58, 299, 603, 605, 606, 611, 612, 613, 626, 627, 643, 644, 645, 649, 867, 870, 1154, 1156, 1157, 1162, 1163, 1164, 1177, 1178, 1194, 1195, 1196, 1200], "fraction": [37, 58, 139, 140, 141, 142, 238, 299, 404, 497, 553, 586, 643, 645, 757, 867, 974, 1069, 1102, 1131, 1194, 1196, 1240], "second": [37, 58, 139, 140, 141, 142, 145, 186, 206, 234, 269, 299, 384, 388, 390, 392, 397, 399, 403, 416, 417, 572, 575, 576, 577, 578, 579, 581, 582, 583, 643, 645, 701, 702, 703, 704, 705, 706, 743, 744, 745, 747, 757, 795, 804, 822, 867, 870, 969, 973, 986, 987, 1194, 1196, 1249], "infer": [37, 58, 72, 105, 107, 108, 109, 110, 111, 116, 117, 118, 121, 125, 126, 128, 130, 134, 135, 155, 209, 299, 417, 568, 614, 615, 643, 644, 645, 646, 649, 733, 757, 867, 973, 987, 1114, 1165, 1166, 1194, 1195, 1196, 1197, 1200, 1240], "timeunit": [37, 48, 50, 58, 299, 375, 376, 408, 420, 645, 701, 702, 703, 704, 705, 706, 867, 870, 941, 942, 978, 990, 1196], "frame": [37, 38, 40, 58, 64, 65, 66, 67, 68, 69, 80, 87, 88, 108, 117, 121, 127, 139, 140, 146, 158, 159, 203, 204, 209, 216, 220, 223, 235, 236, 237, 260, 267, 268, 299, 775, 776, 814, 817, 840, 867, 870, 916, 1240, 1248, 1249], "repres": [37, 40, 58, 62, 78, 105, 107, 109, 110, 111, 118, 121, 249, 270, 277, 299, 461, 463, 518, 601, 671, 674, 688, 690, 706, 708, 719, 721, 722, 734, 735, 738, 746, 753, 757, 833, 841, 867, 1132, 1136, 1151, 1229, 1240], "necessari": [37, 58, 71, 90, 121, 259, 299, 867], "non_numer": [37, 58, 299, 867], "never": [37, 58, 118, 164, 205, 235, 299, 803, 867], "strategi": [37, 58, 80, 88, 116, 143, 144, 145, 146, 148, 174, 186, 189, 205, 206, 219, 268, 299, 314, 433, 509, 520, 757, 790, 795, 798, 803, 804, 840, 867, 1004, 1081, 1240], "put": [37, 58, 299, 867], "around": [37, 58, 299, 867], "thei": [37, 40, 58, 71, 87, 88, 89, 90, 108, 130, 152, 207, 237, 299, 628, 639, 640, 757, 779, 867, 870], "record": [37, 42, 58, 124, 136, 206, 259, 299, 804, 867], "termin": [37, 58, 299, 867], "indistinguish": [37, 58, 299, 867], "even": [37, 58, 116, 299, 556, 560, 757, 867, 1107, 1240], "invalid": [37, 58, 116, 117, 130, 299, 614, 616, 647, 666, 757, 867, 1165, 1167, 1198], "g": [37, 58, 115, 116, 117, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 133, 136, 154, 202, 259, 267, 299, 307, 314, 428, 520, 591, 708, 757, 782, 820, 867, 994, 1134, 1221, 1240, 1249], "pars": [37, 58, 64, 116, 117, 119, 121, 126, 130, 133, 134, 157, 185, 188, 240, 241, 244, 248, 263, 273, 274, 278, 299, 350, 452, 519, 552, 567, 599, 614, 615, 625, 646, 647, 675, 677, 683, 685, 686, 687, 695, 699, 712, 724, 728, 736, 737, 739, 741, 747, 757, 773, 794, 797, 824, 825, 828, 832, 837, 843, 844, 848, 867, 917, 1018, 1113, 1139, 1165, 1166, 1176, 1196, 1197, 1198, 1240], "valid": [37, 40, 48, 51, 58, 64, 118, 122, 124, 128, 148, 152, 170, 205, 299, 367, 603, 605, 606, 611, 612, 613, 616, 626, 627, 747, 757, 803, 867, 870, 932, 995, 1011, 1154, 1156, 1157, 1162, 1163, 1164, 1167, 1177, 1178, 1240], "integ": [37, 40, 54, 55, 56, 57, 58, 74, 75, 76, 77, 137, 144, 146, 147, 149, 167, 186, 234, 257, 299, 311, 349, 404, 437, 438, 551, 560, 565, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 625, 647, 673, 680, 712, 716, 717, 733, 757, 784, 795, 822, 867, 870, 914, 974, 1007, 1028, 1107, 1111, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1132, 1136, 1176, 1198, 1240, 1248, 1249], "aren": [37, 58, 299, 867], "t": [37, 39, 58, 66, 67, 88, 116, 121, 127, 130, 186, 209, 223, 265, 267, 299, 314, 367, 374, 382, 402, 422, 425, 426, 427, 483, 520, 552, 556, 611, 640, 643, 645, 747, 757, 795, 817, 838, 867, 870, 932, 972, 993, 994, 996, 997, 998, 1055, 1088, 1134, 1162, 1190, 1191, 1194, 1196, 1221, 1230, 1240], "strictli": [37, 58, 71, 90, 299, 788, 867], "table_nam": [38, 40, 299], "connect": [38, 116, 118, 119, 122, 124, 128, 133, 135, 136, 299, 770], "if_table_exist": [38, 299], "dbwritemod": [38, 299], "fail": [38, 39, 106, 120, 122, 126, 128, 131, 135, 139, 140, 154, 265, 299, 325, 407, 509, 643, 644, 645, 649, 757, 838, 867, 1088, 1194, 1195, 1196, 1200, 1240], "dbwriteengin": [38, 299], "sqlalchemi": [38, 118, 138, 299], "databas": [38, 118, 119, 299, 769], "qualifi": [38, 299], "creat": [38, 40, 71, 90, 105, 109, 111, 118, 119, 131, 132, 144, 145, 146, 147, 148, 149, 159, 160, 186, 187, 190, 221, 224, 225, 234, 269, 273, 276, 299, 376, 403, 417, 509, 564, 572, 575, 576, 578, 581, 582, 583, 632, 686, 700, 701, 702, 703, 704, 705, 706, 743, 744, 745, 753, 757, 776, 777, 786, 795, 796, 799, 822, 843, 847, 867, 916, 920, 933, 942, 973, 987, 1099, 1107, 1110, 1183, 1221, 1240, 1248, 1249], "append": [38, 39, 146, 172, 205, 206, 299, 564, 747, 757, 803, 804, 867, 1001, 1240], "your": [38, 40, 71, 80, 90, 116, 117, 118, 119, 121, 136, 203, 209, 236, 237, 240, 256, 273, 278, 285, 299, 314, 520, 613, 643, 644, 645, 652, 722, 757, 800, 807, 809, 824, 843, 848, 855, 867, 1088, 1164, 1194, 1195, 1196, 1203, 1240, 1249], "special": [38, 116, 117, 119, 130, 276, 299, 574, 612, 757, 847, 867, 877, 1088, 1119, 1163, 1240], "uri": [38, 39, 118, 119, 120, 131, 132, 299], "postgresql": [38, 118, 119, 299, 552, 757], "user": [38, 118, 119, 155, 209, 223, 280, 285, 299, 314, 518, 520, 556, 588, 678, 722, 757, 817, 850, 855, 867, 877, 1088, 1137, 1240], "pass": [38, 39, 40, 45, 67, 80, 107, 118, 119, 121, 128, 130, 135, 136, 139, 141, 144, 146, 148, 157, 162, 165, 185, 186, 189, 192, 208, 222, 223, 225, 234, 240, 244, 248, 252, 263, 269, 273, 278, 299, 302, 314, 383, 399, 402, 431, 450, 502, 519, 520, 552, 556, 567, 572, 575, 576, 577, 578, 579, 581, 582, 583, 589, 599, 638, 639, 640, 674, 683, 689, 691, 701, 712, 739, 747, 753, 757, 773, 783, 794, 795, 796, 798, 799, 801, 808, 809, 817, 822, 824, 828, 830, 832, 837, 843, 848, 855, 867, 877, 949, 972, 1002, 1013, 1043, 1074, 1087, 1088, 1113, 1139, 1189, 1190, 1191, 1211, 1240, 1244], "server": [38, 118, 119, 299], "port": [38, 116, 118, 119, 122, 124, 133, 299], "sqlite": [38, 118, 299], "db": [38, 119, 299], "replac": [38, 39, 116, 117, 130, 173, 174, 231, 232, 264, 273, 274, 299, 376, 402, 518, 519, 627, 628, 757, 789, 843, 844, 867, 942, 972, 1087, 1132, 1135, 1136, 1178, 1179, 1240], "insert": [38, 116, 117, 122, 124, 128, 130, 133, 134, 135, 195, 196, 230, 264, 266, 299, 587, 602, 652, 757, 839, 867, 1133, 1153, 1203, 1240], "mode": [38, 39, 58, 59, 60, 64, 139, 141, 224, 299, 612, 730, 733, 748, 757, 778, 867, 1163, 1240, 1248], "new": [38, 39, 40, 121, 130, 152, 180, 194, 195, 196, 209, 220, 221, 229, 230, 253, 264, 266, 267, 268, 273, 274, 299, 309, 376, 430, 442, 451, 517, 540, 567, 571, 626, 627, 634, 635, 653, 655, 661, 753, 757, 769, 793, 820, 836, 839, 840, 843, 844, 850, 855, 867, 873, 942, 1000, 1009, 1099, 1112, 1113, 1117, 1177, 1178, 1185, 1186, 1204, 1207, 1213, 1218, 1240, 1248], "alreadi": [38, 39, 299, 367, 483, 670, 757, 932, 1055, 1228, 1240], "adbc": [38, 118, 119, 299], "affect": [38, 139, 140, 141, 142, 299], "driver": [38, 118, 119, 299], "provid": [38, 40, 67, 116, 117, 119, 120, 128, 130, 131, 132, 135, 146, 148, 175, 201, 299, 340, 341, 428, 448, 509, 518, 520, 607, 608, 611, 614, 616, 639, 640, 641, 642, 712, 739, 757, 769, 791, 867, 901, 902, 1014, 1040, 1088, 1158, 1159, 1162, 1165, 1167, 1240, 1248, 1249], "otherwis": [38, 85, 118, 121, 145, 150, 209, 216, 237, 240, 285, 299, 340, 350, 368, 425, 426, 427, 509, 520, 528, 556, 560, 565, 576, 577, 578, 579, 581, 583, 603, 607, 674, 689, 691, 722, 747, 757, 814, 824, 855, 867, 901, 917, 933, 996, 997, 998, 1081, 1088, 1107, 1111, 1132, 1135, 1154, 1158, 1240], "deltalak": [39, 120, 131, 138, 299], "deltat": [39, 299], "ignor": [39, 145, 146, 148, 212, 213, 250, 251, 268, 299, 310, 312, 370, 402, 425, 426, 427, 481, 545, 546, 602, 674, 676, 757, 874, 875, 935, 972, 996, 997, 998, 1053, 1097, 1098, 1153, 1240], "merg": [39, 216, 299, 814, 867], "overwrite_schema": [39, 299], "storage_opt": [39, 116, 120, 122, 124, 128, 131, 132, 133, 135, 299], "delta_write_opt": [39, 299], "delta_merge_opt": [39, 299], "tablemerg": [39, 299], "delta": [39, 50, 120, 131, 249, 270, 299, 581, 583, 601, 671, 688, 690, 734, 735, 738, 746, 757, 769, 833, 841, 867, 1126, 1128, 1151, 1229, 1240], "handl": [39, 88, 112, 116, 117, 130, 136, 299, 370, 481, 652, 757, 778, 867, 935, 1053, 1203, 1240], "throw": [39, 158, 299, 345, 614, 616, 757, 775, 867, 906, 1165, 1167, 1240], "add": [39, 40, 117, 172, 186, 189, 209, 273, 274, 275, 276, 299, 368, 541, 542, 558, 560, 657, 706, 710, 747, 757, 795, 798, 803, 843, 844, 845, 846, 847, 867, 1001, 1240], "anyth": [39, 235, 299], "updat": [39, 164, 299, 867], "extra": [39, 45, 60, 116, 117, 120, 121, 122, 124, 130, 131, 132, 133, 172, 186, 299, 757, 795, 867, 1001, 1240], "storag": [39, 116, 120, 122, 124, 128, 131, 132, 133, 135, 299], "backend": [39, 118, 119, 120, 131, 132, 299], "cloud": [39, 118, 120, 128, 131, 132, 135, 136, 299], "configur": [39, 120, 131, 132, 152, 299], "authent": [39, 120, 131, 132, 299], "see": [39, 40, 41, 42, 48, 118, 119, 120, 121, 128, 131, 132, 135, 139, 140, 141, 142, 146, 148, 162, 186, 205, 223, 224, 225, 299, 302, 350, 433, 468, 518, 596, 603, 611, 612, 626, 701, 702, 704, 705, 732, 744, 745, 753, 757, 778, 795, 867, 870, 911, 917, 1041, 1147, 1154, 1162, 1163, 1177, 1240, 1244, 1249], "here": [39, 40, 45, 105, 107, 108, 109, 111, 118, 119, 120, 125, 126, 128, 131, 132, 134, 135, 144, 146, 148, 299, 520, 613, 616, 757, 867, 1167], "gc": [39, 120, 131, 132, 299], "azur": [39, 120, 128, 131, 132, 135, 299], "keyword": [39, 67, 120, 128, 131, 162, 223, 235, 240, 241, 273, 274, 278, 299, 434, 556, 736, 739, 747, 757, 817, 824, 825, 843, 844, 848, 867, 1240], "argument": [39, 45, 90, 116, 120, 128, 130, 131, 162, 165, 171, 185, 186, 187, 188, 189, 190, 210, 212, 217, 222, 223, 224, 234, 240, 241, 242, 248, 250, 260, 266, 269, 273, 274, 278, 299, 403, 417, 428, 434, 452, 552, 556, 572, 575, 576, 577, 578, 579, 581, 582, 583, 599, 638, 639, 640, 674, 681, 682, 683, 685, 686, 687, 689, 691, 708, 736, 739, 747, 757, 783, 787, 794, 795, 796, 797, 798, 799, 817, 822, 824, 825, 827, 832, 839, 843, 844, 848, 867, 973, 987, 1018, 1189, 1190, 1191, 1222, 1240], "while": [39, 87, 117, 120, 121, 131, 146, 148, 152, 203, 215, 264, 268, 299, 618, 779, 813, 840, 867, 1011, 1169, 1240], "lake": [39, 120, 131, 299, 769], "typeerror": [39, 299], "unsupport": [39, 299], "arrowinvaliderror": [39, 299], "could": [39, 78, 93, 158, 299, 345, 692, 696, 706, 710, 757, 775, 784, 867, 906, 1011, 1240], "primit": [39, 299, 457, 757, 1221, 1240], "tablenotfounderror": [39, 299], "doesn": [39, 116, 130, 186, 299, 422, 757, 795, 867, 993, 1230, 1240], "action": [39, 299], "trigger": [39, 260, 299, 757, 1222, 1240], "categor": [39, 51, 71, 89, 90, 106, 139, 140, 141, 142, 205, 257, 299, 346, 347, 368, 560, 567, 664, 757, 870, 907, 908, 909, 910, 911, 912, 933, 1107, 1113, 1223, 1240], "protocol": [39, 106, 119, 154, 299], "nullabl": [39, 299], "To": [39, 87, 173, 210, 212, 217, 250, 299, 350, 372, 373, 433, 603, 611, 612, 626, 639, 640, 641, 642, 650, 757, 789, 867, 917, 937, 938, 1011, 1154, 1162, 1163, 1177, 1201, 1221, 1240], "pyarrow": [39, 45, 105, 106, 110, 116, 119, 120, 122, 124, 128, 131, 136, 138, 254, 259, 260, 299, 770, 1216, 1220, 1221, 1222, 1240], "ha": [39, 40, 80, 87, 118, 121, 130, 154, 155, 176, 179, 186, 187, 188, 189, 190, 195, 231, 234, 253, 269, 275, 280, 299, 314, 344, 362, 363, 364, 365, 366, 367, 455, 459, 462, 467, 479, 492, 507, 516, 517, 519, 529, 558, 572, 573, 575, 576, 577, 578, 579, 581, 582, 583, 605, 615, 619, 620, 621, 622, 625, 630, 631, 637, 657, 660, 661, 665, 678, 698, 699, 709, 718, 720, 753, 757, 779, 795, 796, 797, 798, 799, 808, 822, 836, 846, 850, 855, 867, 877, 905, 916, 928, 929, 930, 931, 932, 934, 1011, 1023, 1025, 1029, 1051, 1064, 1079, 1087, 1118, 1134, 1136, 1156, 1166, 1170, 1171, 1172, 1173, 1176, 1181, 1182, 1188, 1212, 1213, 1224, 1240], "last": [39, 139, 140, 141, 142, 157, 192, 206, 208, 224, 237, 248, 252, 263, 265, 293, 299, 324, 367, 380, 395, 400, 418, 459, 460, 467, 487, 506, 509, 539, 541, 542, 543, 544, 558, 598, 635, 657, 659, 708, 742, 757, 773, 804, 832, 835, 837, 838, 863, 867, 870, 886, 932, 946, 965, 970, 988, 1013, 1029, 1030, 1043, 1059, 1078, 1186, 1211, 1240], "filesystem": [39, 120, 131, 132, 299], "table_path": [39, 120, 131, 132, 299], "match": [39, 40, 48, 88, 99, 105, 107, 108, 109, 111, 125, 126, 134, 139, 140, 141, 142, 174, 205, 206, 235, 268, 299, 526, 567, 580, 603, 604, 605, 606, 609, 611, 612, 614, 616, 626, 627, 628, 636, 643, 644, 645, 708, 747, 757, 790, 803, 804, 840, 867, 870, 1028, 1037, 1113, 1125, 1154, 1155, 1156, 1157, 1160, 1162, 1163, 1165, 1167, 1177, 1178, 1179, 1187, 1194, 1195, 1196, 1240], "version": [39, 85, 90, 120, 121, 131, 138, 154, 155, 176, 179, 186, 187, 188, 189, 190, 191, 195, 210, 212, 217, 231, 245, 250, 253, 275, 280, 299, 314, 351, 352, 362, 363, 364, 365, 366, 379, 381, 385, 389, 391, 393, 395, 396, 398, 402, 405, 417, 446, 455, 459, 462, 467, 479, 492, 507, 516, 517, 519, 558, 573, 590, 604, 605, 615, 619, 620, 621, 622, 625, 630, 631, 637, 643, 645, 657, 660, 661, 672, 678, 698, 699, 701, 703, 708, 720, 732, 757, 795, 796, 797, 798, 799, 808, 829, 836, 846, 850, 867, 877, 918, 919, 928, 929, 930, 931, 933, 945, 947, 951, 958, 960, 963, 965, 966, 968, 972, 973, 975, 987, 1012, 1019, 1023, 1025, 1028, 1029, 1035, 1037, 1039, 1051, 1064, 1079, 1087, 1107, 1118, 1134, 1136, 1140, 1155, 1156, 1166, 1170, 1171, 1172, 1173, 1176, 1181, 1182, 1188, 1194, 1196, 1212, 1213, 1230, 1240], "old": [39, 229, 299, 567, 757, 820, 867, 1113, 1240], "existing_table_path": [39, 299], "store": [39, 116, 128, 132, 172, 203, 236, 299, 346, 908, 1001, 1240], "bucket": [39, 120, 131, 132, 135, 299, 403, 417, 448, 757, 973, 987, 1014, 1240], "prefix": [39, 152, 299, 309, 343, 517, 540, 542, 543, 544, 636, 640, 641, 652, 657, 757, 870, 904, 1187, 1192, 1203], "aws_region": [39, 131, 135, 299], "the_aws_region": [39, 299], "aws_access_key_id": [39, 120, 131, 135, 299], "the_aws_access_key_id": [39, 120, 131, 132, 299], "aws_secret_access_kei": [39, 120, 131, 135, 299], "the_aws_secret_access_kei": [39, 120, 131, 132, 299], "pa": [39, 105, 136, 299], "check": [39, 48, 116, 117, 130, 139, 140, 141, 142, 151, 169, 179, 186, 187, 189, 190, 199, 201, 205, 234, 299, 339, 342, 343, 452, 457, 478, 572, 603, 609, 636, 757, 795, 796, 798, 799, 803, 808, 809, 822, 867, 900, 903, 904, 994, 1019, 1021, 1025, 1026, 1028, 1035, 1036, 1037, 1039, 1040, 1050, 1134, 1154, 1160, 1187, 1240], "doc": [39, 41, 42, 119, 139, 141, 162, 299], "evolut": [39, 299], "yet": [39, 299], "packag": [39, 118, 121, 299], "therefor": [39, 106, 170, 299, 520, 747, 757, 995, 1240], "effect": [39, 40, 178, 186, 189, 259, 299, 382, 520, 701, 702, 757, 795, 798, 846, 847, 867, 940, 948], "predic": [39, 58, 59, 60, 86, 87, 130, 133, 134, 135, 136, 175, 201, 235, 299, 434, 672, 710, 747, 757, 778, 779, 786, 788, 791, 808, 809, 818, 820, 830, 846, 847, 867, 1005, 1132, 1135, 1240], "source_alia": [39, 299], "target_alia": [39, 299], "when_matched_update_al": [39, 299], "when_not_matched_insert_al": [39, 299], "execut": [39, 65, 66, 68, 71, 88, 118, 207, 299, 483, 670, 757, 774, 808, 809, 818, 867, 1055, 1228, 1240, 1248], "workbook": [40, 121, 299], "worksheet": [40, 121, 127, 299], "posit": [40, 165, 171, 185, 188, 222, 240, 241, 242, 244, 248, 266, 273, 274, 278, 299, 425, 426, 427, 428, 502, 552, 560, 589, 599, 613, 625, 647, 681, 682, 683, 685, 686, 687, 708, 736, 739, 757, 783, 787, 794, 797, 824, 825, 827, 828, 832, 839, 843, 844, 848, 867, 996, 997, 998, 1074, 1107, 1139, 1164, 1176, 1198, 1240], "tupl": [40, 119, 121, 127, 155, 203, 209, 235, 236, 237, 243, 277, 299, 568, 757, 818, 830, 867, 870, 1114, 1240], "a1": [40, 81, 83, 299], "table_styl": [40, 299], "column_format": [40, 299], "columnformatdict": [40, 299], "dtype_format": [40, 299], "oneormoredatatyp": [40, 144, 299, 1037, 1240], "conditional_format": [40, 299], "conditionalformatdict": [40, 299], "header_format": [40, 299], "column_tot": [40, 299], "columntotalsdefinit": [40, 299], "column_width": [40, 299], "columnwidthsdefinit": [40, 299], "row_tot": [40, 299], "rowtotalsdefinit": [40, 299], "row_height": [40, 299], "sparklin": [40, 299], "sequenc": [40, 72, 80, 105, 107, 108, 109, 111, 116, 117, 118, 121, 125, 126, 127, 130, 134, 144, 145, 146, 157, 164, 171, 172, 205, 206, 215, 220, 222, 223, 224, 237, 248, 257, 263, 267, 268, 269, 299, 368, 457, 509, 516, 518, 556, 560, 567, 599, 641, 642, 655, 678, 683, 692, 693, 696, 697, 710, 712, 720, 721, 722, 732, 737, 757, 773, 787, 803, 804, 813, 817, 832, 837, 840, 867, 933, 934, 1001, 1081, 1107, 1113, 1132, 1136, 1207, 1240], "formula": [40, 299, 422, 757, 993, 1240], "autofilt": [40, 299], "autofit": [40, 299], "hidden_column": [40, 299], "selectortyp": [40, 299, 708, 870], "hide_gridlin": [40, 299], "sheet_zoom": [40, 299], "freeze_pan": [40, 299], "excel": [40, 121, 299], "open": [40, 115, 116, 117, 121, 122, 123, 124, 125, 126, 127, 128, 129, 133, 135, 299, 782, 867], "xlsxwriter": [40, 138, 299], "close": [40, 118, 186, 187, 189, 190, 234, 299, 368, 452, 513, 560, 572, 575, 576, 577, 578, 579, 581, 582, 583, 596, 701, 702, 704, 705, 744, 745, 757, 795, 796, 798, 799, 822, 867, 933, 1018, 1107, 1147, 1240], "xlsx": [40, 121, 299], "work": [40, 49, 51, 106, 117, 136, 230, 241, 274, 299, 310, 312, 314, 337, 349, 350, 428, 437, 483, 510, 520, 552, 571, 617, 618, 667, 757, 825, 844, 867, 870, 874, 875, 899, 914, 917, 1007, 1055, 1082, 1168, 1169, 1225, 1240], "directori": [40, 45, 128, 299], "sheet1": [40, 299], "medium": [40, 299], "kei": [40, 80, 85, 88, 128, 132, 135, 186, 203, 205, 206, 216, 222, 224, 229, 233, 236, 237, 268, 299, 434, 520, 567, 739, 757, 788, 795, 803, 804, 814, 820, 821, 840, 867, 1113, 1240], "follow": [40, 45, 85, 116, 117, 120, 130, 131, 132, 139, 186, 206, 209, 223, 234, 269, 299, 399, 403, 417, 556, 563, 572, 575, 576, 577, 578, 579, 580, 581, 582, 583, 655, 666, 701, 702, 704, 705, 722, 744, 745, 747, 749, 750, 752, 757, 758, 759, 762, 764, 765, 766, 795, 804, 817, 822, 867, 969, 973, 987, 1109, 1132, 1135, 1232, 1234, 1236, 1240, 1241, 1245, 1246, 1247, 1249], "first_column": [40, 299], "last_column": [40, 299], "banded_column": [40, 299], "banded_row": [40, 299], "sheet": [40, 121, 127, 299], "chart": [40, 299, 818, 867], "subsequ": [40, 69, 228, 260, 299, 509, 747, 786, 867], "colnam": [40, 130, 146, 168, 299, 747, 785, 867], "given": [40, 64, 65, 80, 105, 107, 108, 109, 111, 116, 117, 118, 119, 121, 125, 126, 127, 130, 134, 135, 141, 142, 143, 144, 146, 147, 148, 149, 155, 157, 170, 171, 173, 186, 187, 189, 190, 201, 209, 222, 223, 234, 235, 237, 244, 245, 248, 263, 268, 299, 350, 374, 377, 406, 408, 409, 422, 448, 452, 478, 502, 509, 511, 520, 552, 556, 563, 566, 568, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 587, 589, 590, 612, 613, 623, 624, 643, 645, 652, 655, 678, 708, 720, 721, 722, 733, 734, 735, 757, 773, 787, 795, 796, 798, 799, 808, 809, 817, 822, 828, 829, 832, 837, 840, 850, 855, 867, 870, 877, 917, 940, 943, 976, 978, 979, 993, 995, 1014, 1018, 1040, 1050, 1074, 1081, 1083, 1086, 1088, 1099, 1109, 1114, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1133, 1139, 1140, 1163, 1164, 1174, 1175, 1194, 1196, 1203, 1227, 1231, 1240, 1248, 1249], "dd": [40, 299], "mm": [40, 299], "yyyi": [40, 299], "overridden": [40, 105, 107, 109, 111, 125, 126, 150, 299, 867], "basi": [40, 146, 299], "param": [40, 105, 107, 108, 109, 111, 116, 117, 125, 126, 130, 145, 146, 148, 235, 299, 867], "It": [40, 71, 90, 164, 216, 223, 276, 285, 299, 528, 571, 753, 757, 808, 809, 814, 847, 855, 867, 1132, 1135, 1240], "float_dtyp": [40, 299], "simplifi": [40, 58, 59, 60, 86, 87, 299, 778, 779, 786, 788, 818, 830, 867], "uniform": [40, 299, 560, 757, 1107, 1240], "condit": [40, 167, 175, 235, 299, 434, 609, 636, 684, 710, 747, 757, 784, 791, 867], "suppli": [40, 105, 107, 108, 109, 111, 118, 125, 126, 134, 175, 235, 299, 434, 556, 757, 791, 867], "typenam": [40, 299], "3_color_scal": [40, 299], "data_bar": [40, 299], "make": [40, 72, 88, 105, 110, 116, 117, 122, 124, 128, 133, 216, 220, 228, 269, 299, 426, 427, 448, 543, 544, 552, 566, 634, 757, 814, 867, 997, 998, 1014, 1185, 1240, 1249], "icon": [40, 299], "multipl": [40, 67, 86, 87, 88, 116, 117, 121, 127, 130, 133, 134, 135, 144, 148, 157, 165, 170, 172, 175, 185, 186, 194, 204, 222, 224, 237, 240, 242, 248, 263, 268, 273, 278, 299, 486, 507, 525, 529, 536, 537, 552, 567, 568, 571, 575, 576, 577, 578, 579, 581, 582, 583, 599, 683, 696, 697, 710, 720, 721, 723, 727, 732, 737, 740, 747, 753, 757, 773, 778, 779, 783, 791, 794, 795, 824, 827, 832, 837, 840, 843, 848, 855, 867, 876, 995, 1001, 1058, 1079, 1093, 1113, 1114, 1240], "singl": [40, 65, 80, 87, 88, 116, 117, 118, 119, 121, 128, 130, 135, 144, 158, 165, 166, 167, 172, 181, 191, 201, 205, 209, 222, 235, 237, 248, 299, 314, 350, 399, 441, 444, 446, 479, 480, 486, 507, 518, 520, 564, 567, 568, 599, 602, 672, 678, 683, 686, 687, 717, 721, 722, 737, 745, 757, 775, 778, 783, 784, 803, 832, 867, 917, 969, 1001, 1012, 1051, 1052, 1058, 1110, 1113, 1114, 1153, 1216, 1240], "across": [40, 80, 119, 191, 211, 213, 218, 251, 299, 446, 675, 677, 692, 693, 695, 699, 724, 728, 741, 757, 1012, 1240], "heatmap": [40, 299], "min": [40, 45, 60, 164, 174, 218, 224, 234, 299, 352, 359, 364, 433, 552, 563, 572, 578, 728, 736, 757, 790, 822, 867, 919, 925, 929, 934, 1004, 1109, 1123, 1240, 1249], "entir": [40, 299, 778, 867], "made": [40, 118, 299, 1221, 1240], "abov": [40, 139, 224, 299, 747], "than": [40, 58, 59, 60, 104, 109, 111, 116, 117, 118, 121, 127, 130, 136, 146, 148, 159, 185, 188, 203, 206, 209, 222, 235, 236, 238, 267, 285, 299, 443, 445, 470, 497, 515, 520, 531, 560, 571, 586, 596, 617, 623, 624, 635, 652, 688, 701, 722, 757, 778, 794, 797, 804, 855, 867, 1069, 1088, 1107, 1117, 1131, 1147, 1168, 1174, 1175, 1186, 1203, 1240, 1249], "bold": [40, 299], "font_color": [40, 299], "702963": [40, 299], "total": [40, 170, 281, 299, 381, 385, 389, 391, 393, 398, 405, 410, 411, 412, 413, 414, 415, 416, 471, 491, 689, 691, 757, 851, 947, 951, 958, 960, 963, 968, 975, 980, 981, 982, 983, 984, 985, 986, 995, 1042, 1063, 1240], "export": [40, 203, 204, 236, 237, 256, 259, 299, 753], "associ": [40, 65, 67, 80, 119, 145, 237, 299], "sum": [40, 64, 170, 178, 185, 186, 201, 224, 234, 251, 278, 299, 360, 361, 366, 422, 434, 509, 520, 528, 530, 531, 532, 567, 572, 582, 672, 674, 692, 694, 695, 696, 698, 699, 710, 722, 732, 741, 757, 778, 779, 782, 786, 788, 794, 795, 816, 818, 822, 826, 830, 848, 867, 870, 926, 927, 931, 993, 995, 1127, 1240], "must": [40, 106, 107, 120, 131, 132, 136, 164, 171, 186, 187, 189, 190, 206, 216, 234, 235, 299, 368, 509, 518, 560, 567, 572, 575, 576, 577, 578, 579, 581, 582, 583, 747, 757, 787, 795, 796, 798, 799, 804, 808, 809, 814, 822, 867, 933, 934, 1107, 1113, 1240], "funcnam": [40, 299], "averag": [40, 299, 425, 426, 427, 563, 757, 996, 997, 998, 1109, 1240], "count_num": [40, 299], "count": [40, 64, 116, 117, 122, 124, 128, 130, 133, 134, 135, 136, 156, 164, 186, 206, 220, 221, 224, 234, 264, 268, 269, 275, 276, 285, 290, 299, 315, 357, 362, 399, 448, 471, 479, 480, 491, 520, 528, 530, 538, 550, 572, 575, 576, 577, 578, 579, 581, 582, 583, 605, 606, 668, 670, 679, 691, 716, 729, 757, 772, 795, 804, 816, 822, 846, 847, 855, 860, 867, 934, 969, 1009, 1014, 1042, 1051, 1052, 1063, 1095, 1101, 1156, 1157, 1226, 1228, 1240], "std_dev": [40, 299], "var": [40, 149, 299, 583, 757, 867, 1240], "pixel": [40, 299], "unit": [40, 48, 50, 139, 140, 141, 142, 146, 148, 170, 299, 375, 376, 383, 408, 420, 514, 529, 643, 645, 669, 701, 702, 703, 704, 705, 706, 712, 757, 818, 867, 870, 941, 942, 949, 978, 990, 995, 1086, 1194, 1196, 1227, 1240, 1249], "hand": [40, 116, 117, 130, 299, 498, 499, 500, 501, 1070, 1071, 1072, 1073], "side": [40, 186, 187, 189, 190, 234, 299, 452, 498, 499, 500, 501, 572, 575, 576, 577, 578, 579, 581, 582, 583, 587, 701, 702, 704, 705, 744, 745, 757, 795, 796, 798, 799, 822, 867, 1018, 1070, 1071, 1072, 1073, 1133, 1240], "call": [40, 68, 71, 90, 117, 118, 139, 140, 141, 142, 146, 148, 152, 185, 186, 189, 207, 209, 234, 298, 299, 314, 358, 361, 467, 520, 539, 541, 542, 543, 544, 558, 592, 657, 753, 757, 770, 794, 795, 796, 798, 799, 822, 866, 867, 870, 877, 1088, 1143, 1240], "ad": [40, 108, 121, 186, 189, 264, 268, 273, 274, 299, 313, 431, 692, 693, 696, 697, 757, 795, 798, 840, 843, 844, 867, 933, 1002, 1107, 1240], "wise": [40, 80, 118, 178, 299, 316, 317, 318, 319, 320, 321, 353, 354, 355, 429, 512, 593, 594, 595, 662, 663, 696, 697, 710, 732, 757, 878, 879, 880, 881, 882, 883, 921, 922, 923, 999, 1084, 1085, 1144, 1145, 1146, 1214, 1215, 1240], "particip": [40, 299], "distinct": [40, 148, 222, 299, 337, 455, 456, 459, 460, 510, 563, 571, 706, 757, 899, 1023, 1024, 1029, 1030, 1082, 1109, 1117, 1240, 1249], "referenc": [40, 299, 655], "differ": [40, 116, 136, 139, 141, 172, 186, 191, 203, 234, 236, 237, 256, 264, 299, 370, 380, 399, 400, 402, 418, 424, 446, 481, 498, 500, 509, 520, 545, 546, 548, 567, 643, 668, 709, 712, 718, 757, 786, 795, 822, 867, 870, 911, 935, 946, 969, 970, 972, 988, 994, 1001, 1012, 1053, 1070, 1072, 1088, 1097, 1098, 1113, 1134, 1194, 1240], "row_index": [40, 299], "height": [40, 167, 299], "intersect": [40, 299, 499, 870, 1071], "bodi": [40, 299], "start": [40, 115, 116, 117, 118, 119, 122, 124, 127, 128, 130, 133, 134, 135, 150, 180, 185, 186, 188, 189, 207, 247, 253, 269, 275, 276, 299, 339, 342, 343, 380, 394, 400, 403, 417, 418, 428, 442, 452, 503, 575, 576, 578, 581, 582, 583, 597, 603, 609, 612, 624, 632, 636, 640, 641, 652, 661, 680, 692, 696, 701, 702, 704, 705, 710, 716, 717, 744, 745, 747, 757, 793, 794, 795, 797, 798, 818, 831, 836, 846, 847, 867, 870, 904, 941, 943, 946, 949, 950, 957, 959, 962, 964, 967, 970, 973, 978, 987, 988, 1009, 1018, 1075, 1148, 1160, 1163, 1175, 1183, 1187, 1203, 1213, 1240, 1249], "unless": [40, 80, 107, 260, 299, 638, 639, 733, 867, 1189, 1222, 1230, 1240], "marker": [40, 299], "compliant": [40, 299], "case": [40, 71, 80, 87, 105, 107, 108, 109, 111, 118, 125, 126, 134, 135, 150, 155, 172, 186, 187, 189, 190, 203, 209, 234, 236, 237, 256, 299, 374, 517, 518, 528, 529, 540, 572, 603, 604, 612, 626, 628, 757, 779, 795, 796, 798, 799, 822, 867, 870, 940, 1001, 1154, 1155, 1163, 1177, 1179, 1240], "three": [40, 262, 299, 368, 560, 587, 757, 933, 1081, 1107, 1240], "avail": [40, 114, 118, 119, 120, 131, 132, 144, 152, 224, 298, 299, 563, 749, 750, 752, 756, 757, 758, 759, 762, 763, 764, 765, 766, 769, 770, 788, 866, 867, 870, 934, 1109, 1232, 1234, 1236, 1240, 1241, 1245, 1246, 1247], "insert_befor": [40, 299], "insert_aft": [40, 299], "respect": [40, 299, 604, 628, 870, 1155, 1179], "direct": [40, 119, 128, 132, 135, 139, 244, 267, 299, 502, 589, 757, 828, 867, 1074, 1139, 1240], "far": [40, 299], "strongli": [40, 150, 209, 235, 285, 299, 520, 757, 1088, 1240], "advis": [40, 71, 90, 207, 299], "structur": [40, 96, 100, 102, 172, 223, 237, 259, 299, 556, 757, 817, 867, 1001, 1240], "wherev": [40, 209, 285, 299, 520, 757, 1088, 1240], "possibl": [40, 116, 157, 185, 188, 203, 209, 236, 263, 265, 285, 299, 514, 520, 528, 574, 635, 669, 757, 773, 794, 797, 832, 837, 838, 867, 1088, 1119, 1186, 1240], "simpl": [40, 148, 220, 299, 708], "colx": [40, 69, 299, 543, 544, 870, 1249], "coli": [40, 299, 543, 544, 870, 1249], "after": [40, 69, 88, 108, 115, 116, 117, 122, 124, 128, 130, 133, 134, 135, 172, 266, 298, 299, 428, 519, 552, 563, 652, 757, 839, 867, 1001, 1087, 1109, 1203, 1240], "befor": [40, 116, 118, 121, 130, 136, 139, 140, 141, 142, 150, 152, 172, 186, 189, 206, 266, 299, 360, 361, 367, 519, 552, 553, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 652, 658, 734, 735, 757, 795, 798, 801, 804, 839, 867, 926, 927, 932, 1001, 1087, 1102, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1203, 1210, 1240], "most": [40, 66, 105, 116, 117, 119, 130, 139, 140, 141, 142, 299, 529, 536, 553, 635, 757, 1093, 1102, 1186, 1240, 1248], "mandatori": [40, 299], "return_dtyp": [40, 155, 209, 299, 314, 516, 518, 519, 520, 567, 678, 720, 721, 722, 757, 877, 1087, 1088, 1113, 1240], "latter": [40, 172, 299, 1001, 1240], "appropri": [40, 136, 259, 299, 563, 757, 1109, 1240], "pure": [40, 299, 1221, 1240], "actual": [40, 108, 146, 148, 237, 299, 1142, 1240], "indic": [40, 115, 116, 117, 118, 122, 124, 128, 130, 135, 143, 144, 148, 186, 187, 189, 190, 234, 237, 242, 244, 257, 299, 325, 441, 448, 453, 454, 455, 456, 458, 459, 460, 461, 463, 464, 465, 486, 502, 507, 524, 525, 526, 527, 572, 575, 576, 577, 578, 579, 581, 582, 583, 587, 589, 593, 660, 683, 684, 757, 795, 796, 798, 799, 822, 827, 828, 867, 870, 1008, 1014, 1022, 1023, 1024, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1058, 1074, 1079, 1132, 1133, 1136, 1139, 1144, 1212, 1217, 1240, 1249], "calcul": [40, 80, 186, 249, 270, 299, 370, 425, 426, 427, 468, 481, 498, 514, 580, 596, 601, 669, 671, 688, 690, 734, 735, 738, 746, 757, 795, 833, 841, 867, 935, 996, 997, 998, 1041, 1053, 1070, 1125, 1147, 1151, 1229, 1240], "individu": [40, 60, 146, 152, 234, 259, 299, 520, 612, 757, 778, 822, 867, 915, 1163, 1240], "gridlin": [40, 299], "zoom": [40, 299], "freez": [40, 299], "pane": [40, 299], "top": [40, 263, 299, 837, 867], "index": [40, 106, 110, 113, 138, 154, 176, 180, 182, 186, 187, 189, 190, 195, 196, 201, 203, 206, 224, 231, 232, 234, 235, 236, 244, 247, 253, 259, 261, 268, 269, 275, 276, 299, 308, 322, 323, 324, 326, 329, 330, 399, 441, 442, 444, 475, 476, 486, 487, 502, 503, 507, 509, 572, 575, 576, 577, 578, 579, 581, 582, 583, 587, 589, 597, 611, 632, 660, 661, 689, 716, 757, 793, 795, 796, 798, 799, 804, 822, 828, 831, 836, 840, 846, 847, 867, 884, 885, 886, 887, 888, 891, 892, 969, 1008, 1040, 1047, 1048, 1058, 1059, 1074, 1075, 1079, 1081, 1099, 1132, 1133, 1136, 1139, 1148, 1162, 1183, 1212, 1213, 1240], "thu": [40, 172, 299, 688, 1001, 1240], "altern": [40, 299, 753], "a2": [40, 81, 83, 299], "occur": [40, 86, 87, 299, 479, 480, 536, 563, 757, 778, 779, 786, 788, 818, 830, 867, 1051, 1052, 1093, 1109, 1240], "equival": [40, 105, 107, 108, 109, 111, 120, 125, 126, 134, 186, 201, 220, 299, 307, 311, 423, 424, 438, 443, 445, 470, 515, 535, 537, 547, 548, 551, 557, 618, 656, 666, 673, 757, 795, 867, 1040, 1169, 1199, 1201, 1202, 1240], "top_row": [40, 299], "top_col": [40, 299], "base": [40, 46, 167, 175, 186, 187, 189, 190, 234, 299, 374, 382, 422, 425, 426, 427, 434, 448, 511, 512, 560, 567, 572, 625, 647, 757, 784, 791, 795, 796, 798, 799, 822, 867, 870, 940, 948, 993, 996, 997, 998, 1014, 1083, 1084, 1107, 1113, 1176, 1198, 1231, 1240, 1249], "scroll": [40, 299], "region": [40, 132, 299], "initit": [40, 299], "5th": [40, 299], "properti": [40, 154, 161, 168, 177, 193, 225, 239, 243, 272, 276, 299, 780, 785, 823, 842, 847, 867, 870, 1249], "readthedoc": [40, 299], "io": [40, 123, 128, 129, 132, 299, 782, 826, 867], "html": [40, 41, 42, 106, 118, 154, 162, 299], "definit": [40, 144, 299, 468, 757, 1041, 1240], "take": [40, 121, 127, 146, 152, 178, 180, 186, 189, 213, 216, 223, 224, 253, 259, 299, 399, 434, 441, 442, 486, 599, 661, 701, 702, 707, 709, 718, 757, 793, 795, 798, 814, 836, 867, 969, 1008, 1009, 1058, 1213, 1231, 1240], "care": [40, 299, 314, 520, 588, 757, 1137, 1240], "rel": [40, 119, 120, 131, 132, 139, 140, 141, 142, 299, 399, 425, 426, 427, 577, 579, 581, 583, 757, 969, 996, 997, 998, 1240], "working_with_conditional_format": [40, 299], "similarli": [40, 108, 186, 206, 234, 269, 299, 399, 403, 417, 572, 575, 576, 577, 578, 579, 581, 582, 583, 701, 702, 704, 705, 744, 745, 757, 795, 804, 822, 867, 969, 973, 987], "well": [40, 116, 117, 118, 130, 224, 299, 452, 757, 1018, 1240], "adjac": [40, 299], "two": [40, 69, 71, 89, 90, 107, 109, 111, 119, 178, 215, 216, 224, 262, 279, 285, 299, 308, 371, 376, 441, 444, 509, 560, 598, 681, 682, 688, 690, 734, 735, 757, 813, 814, 849, 855, 867, 936, 942, 1081, 1107, 1240], "help": [40, 139, 140, 141, 142, 225, 299, 302, 788, 867, 1244], "where": [40, 64, 80, 118, 119, 145, 167, 172, 186, 203, 215, 236, 249, 268, 270, 299, 325, 419, 422, 424, 548, 566, 587, 596, 599, 601, 628, 671, 684, 688, 690, 734, 735, 738, 746, 747, 757, 784, 795, 813, 833, 840, 841, 867, 887, 989, 993, 1001, 1133, 1147, 1151, 1179, 1229, 1231, 1240, 1248], "working_with_sparklin": [40, 299], "inject": [40, 80, 299], "locat": [40, 172, 231, 232, 261, 266, 299, 587, 757, 839, 867, 1001, 1008, 1132, 1133, 1136, 1212, 1240], "syntax": [40, 175, 209, 220, 299, 603, 611, 612, 626, 716, 753, 791, 830, 867, 1154, 1162, 1163, 1177, 1240], "correctli": [40, 121, 299], "microsoft": [40, 299], "com": [40, 119, 299, 425, 426, 427, 611, 612, 613, 757, 996, 997, 998, 1162, 1163, 1164, 1240], "u": [40, 48, 50, 67, 135, 299, 375, 376, 383, 408, 420, 643, 645, 701, 702, 703, 704, 705, 706, 712, 870, 941, 942, 949, 978, 990, 1194, 1196], "offic": [40, 299], "f5ed2452": [40, 299], "2337": [40, 299], "4f71": [40, 299], "bed3": [40, 299], "c8ae6d2b276": [40, 299], "instanti": [40, 118, 240, 273, 299, 824, 843, 867], "basic": [40, 299, 1249], "random": [40, 41, 137, 144, 146, 148, 191, 238, 299, 446, 497, 563, 586, 592, 670, 757, 769, 1012, 1069, 1109, 1131, 1143, 1228, 1240], "dtm": [40, 299, 376, 870, 942], "500": [40, 268, 299, 378, 379, 384, 388, 390, 392, 397, 404, 407, 788, 840, 867, 957, 959, 967, 1120, 1121, 1123, 1240], "val": [40, 233, 299, 520, 556, 664, 747, 757, 821, 867], "10_000": [40, 299], "20_000": [40, 299], "30_000": [40, 299], "increas": [40, 80, 116, 128, 135, 299, 367, 571, 757, 932, 1117, 1240], "b4": [40, 299], "light": [40, 299], "twice": [40, 121, 299], "titl": [40, 64, 299], "explicit": [40, 118, 130, 144, 268, 299, 732, 840, 867], "integr": [40, 299, 1249], "multi_fram": [40, 299], "wb": [40, 299], "coordin": [40, 299], "advanc": [40, 121, 224, 299, 509, 1081, 1249], "min_color": [40, 299], "76933c": [40, 299], "mid_color": [40, 299], "c4d79b": [40, 299], "max_color": [40, 299], "ebf1d": [40, 299], "data_bar_2010": [40, 299], "bar_color": [40, 299], "9bbb59": [40, 299], "bar_negative_color_sam": [40, 299], "bar_negative_border_color_sam": [40, 299], "white": [40, 299], "w": [40, 66, 67, 186, 189, 237, 299, 606, 611, 613, 675, 677, 795, 798, 867, 870, 1157, 1162, 1164, 1190], "get_worksheet_by_nam": [40, 299], "fmt_titl": [40, 299], "add_format": [40, 299], "4f6228": [40, 299], "font_siz": [40, 299], "12": [40, 80, 112, 145, 146, 186, 202, 206, 234, 245, 269, 299, 309, 351, 352, 360, 374, 376, 380, 394, 395, 396, 399, 400, 401, 403, 417, 418, 419, 467, 517, 553, 558, 562, 572, 582, 590, 591, 606, 620, 630, 646, 657, 693, 700, 701, 702, 703, 704, 705, 721, 744, 745, 757, 795, 800, 804, 807, 822, 829, 830, 835, 867, 870, 918, 919, 940, 942, 964, 973, 987, 1088, 1129, 1140, 1157, 1171, 1181, 1197, 1240, 1249], "ital": [40, 299], "customis": [40, 299], "trend": [40, 299], "win_loss": [40, 299], "subtl": [40, 299], "tone": [40, 299], "hidden": [40, 299], "id": [40, 88, 132, 264, 276, 285, 299, 571, 626, 627, 668, 757, 847, 855, 867, 1117, 1226, 1240, 1249], "q1": [40, 299], "55": [40, 82, 299], "20": [40, 146, 172, 194, 196, 216, 223, 226, 230, 232, 299, 322, 323, 324, 370, 378, 379, 384, 388, 390, 392, 397, 403, 404, 407, 417, 446, 451, 556, 575, 576, 578, 672, 708, 712, 719, 744, 757, 814, 817, 867, 870, 935, 945, 973, 987, 999, 1240], "35": [40, 299, 370, 757, 935, 1240], "q2": [40, 299], "30": [40, 172, 186, 194, 223, 230, 232, 255, 273, 299, 322, 323, 324, 370, 376, 378, 379, 384, 388, 390, 392, 394, 395, 397, 401, 402, 403, 404, 407, 410, 417, 418, 446, 591, 719, 744, 757, 795, 817, 843, 867, 870, 935, 942, 965, 972, 973, 980, 987, 1240, 1249], "60": [40, 172, 299, 384, 390, 392, 404, 416, 582, 643, 757, 970, 974, 986, 1194], "q3": [40, 299], "40": [40, 138, 172, 223, 299, 403, 417, 446, 646, 757, 817, 867, 953, 987, 1197], "80": [40, 299], "q4": [40, 299], "75": [40, 164, 299, 311, 551, 560, 575, 576, 577, 578, 581, 582, 583, 722, 757, 934, 1014, 1107, 1240, 1249], "account": [40, 112, 119, 132, 299, 399, 425, 426, 427, 757, 969, 996, 997, 998, 1240], "flavour": [40, 118, 299], "integer_dtyp": [40, 240, 299, 824, 867, 870], "0_": [40, 299], "just": [40, 130, 215, 299, 813, 867], "unifi": [40, 299, 870], "2_color_scal": [40, 299], "95b3d7": [40, 299], "ffffff": [40, 299], "standardis": [40, 299], "z": [40, 66, 72, 88, 112, 144, 146, 170, 198, 200, 205, 215, 236, 237, 267, 299, 307, 309, 311, 446, 477, 517, 520, 540, 541, 542, 543, 544, 551, 558, 566, 567, 604, 612, 628, 643, 645, 657, 675, 677, 695, 724, 728, 733, 741, 757, 803, 813, 831, 867, 870, 1004, 1113, 1155, 1163, 1179, 1194, 1196, 1240, 1248], "score": [40, 299], "conjunct": [40, 89, 121, 127, 299, 689, 716], "a123": [40, 299], "b345": [40, 299], "c567": [40, 299], "d789": [40, 299], "e101": [40, 299], "45": [40, 138, 234, 299, 376, 403, 417, 572, 582, 606, 612, 654, 681, 682, 719, 744, 757, 822, 867, 870, 942, 973, 987, 1157, 1163, 1206, 1249], "85": [40, 299, 1249], "font": [40, 299], "consola": [40, 299], "stdev": [40, 299], "ipccompress": [41, 42, 299], "arrow": [41, 42, 59, 105, 106, 118, 119, 122, 124, 133, 203, 236, 237, 254, 256, 299, 867, 1216, 1221, 1240], "ipc": [41, 42, 59, 122, 123, 124, 133, 136, 299, 769, 867], "binari": [41, 118, 121, 299, 339, 341, 342, 343, 870, 900, 903, 904], "feather": [41, 122, 133, 299, 769], "access": [41, 81, 82, 83, 84, 128, 132, 135, 154, 203, 235, 236, 299, 613, 845, 867, 1164, 1249], "python": [41, 42, 63, 106, 116, 117, 118, 138, 139, 141, 154, 203, 209, 236, 237, 256, 285, 299, 314, 376, 516, 518, 520, 613, 701, 702, 704, 705, 744, 745, 747, 757, 763, 855, 877, 942, 954, 955, 956, 961, 1088, 1164, 1220, 1240], "lz4": [41, 42, 45, 59, 60, 299, 867], "zstd": [41, 42, 45, 59, 60, 299, 867], "batch": [42, 114, 117, 118, 124, 134, 136, 299, 778, 808, 809, 867], "iobas": [43, 44, 125, 126, 299, 533, 782, 826, 867], "pretti": [43, 299], "row_ori": [43, 299], "serial": [43, 44, 299, 782, 867], "orient": [43, 81, 83, 109, 111, 299, 867], "slower": [43, 109, 111, 121, 185, 188, 209, 222, 269, 285, 299, 520, 722, 757, 794, 797, 855, 867, 1088, 1240], "common": [43, 80, 86, 87, 88, 268, 299, 517, 540, 757, 763, 778, 779, 786, 788, 818, 830, 840, 867], "write_ndjson": [43, 299], "bit_set": [43, 299, 826, 867], "newlin": [44, 126, 134, 299], "delimit": [44, 58, 126, 134, 224, 257, 299, 602, 867, 1153, 1217, 1240], "parquetcompress": [45, 299], "compression_level": [45, 60, 299, 867], "statist": [45, 60, 116, 117, 128, 135, 164, 299, 426, 427, 468, 575, 576, 577, 578, 579, 580, 581, 582, 583, 596, 757, 867, 934, 997, 998, 1041, 1125, 1147, 1240], "row_group_s": [45, 60, 299, 867], "data_page_s": [45, 299], "use_pyarrow": [45, 116, 122, 124, 128, 259, 299, 1220, 1221, 1240], "pyarrow_opt": [45, 120, 128, 131, 299], "parquet": [45, 60, 128, 129, 135, 299, 769, 867], "gzip": [45, 60, 299, 867], "lzo": [45, 60, 299, 867], "brotli": [45, 60, 299, 867], "choos": [45, 59, 60, 186, 224, 299, 795, 867], "good": [45, 59, 60, 203, 299, 867], "perform": [45, 59, 60, 80, 96, 106, 116, 117, 118, 122, 128, 130, 133, 134, 135, 154, 157, 185, 186, 187, 188, 189, 190, 206, 209, 210, 212, 217, 228, 234, 237, 250, 263, 285, 299, 314, 509, 520, 552, 572, 604, 617, 618, 628, 643, 644, 645, 757, 773, 795, 796, 798, 799, 804, 822, 832, 837, 846, 847, 867, 1088, 1155, 1168, 1169, 1179, 1194, 1195, 1196, 1240], "fast": [45, 59, 60, 147, 149, 299, 431, 588, 757, 867, 1002, 1137, 1240, 1249], "decompress": [45, 59, 60, 299, 867], "backward": [45, 60, 174, 206, 299, 338, 396, 433, 757, 790, 804, 867, 966, 1004, 1240], "guarante": [45, 60, 106, 116, 117, 164, 191, 265, 299, 446, 757, 788, 838, 867, 1011, 1012, 1240], "deal": [45, 60, 203, 299, 310, 312, 402, 403, 417, 563, 643, 645, 674, 676, 703, 757, 867, 874, 875, 972, 973, 987, 1109, 1194, 1196, 1240], "older": [45, 60, 299, 867], "reader": [45, 60, 114, 116, 117, 122, 124, 128, 299, 770, 867], "higher": [45, 60, 227, 291, 299, 561, 579, 731, 757, 819, 861, 867, 1108, 1124, 1240], "mean": [45, 60, 116, 117, 122, 128, 130, 164, 174, 185, 186, 206, 213, 224, 234, 269, 278, 299, 399, 403, 417, 430, 433, 572, 575, 576, 577, 578, 579, 581, 582, 583, 596, 611, 701, 702, 704, 705, 706, 744, 745, 747, 757, 790, 794, 795, 804, 808, 809, 822, 848, 867, 934, 969, 973, 987, 1000, 1004, 1011, 1121, 1147, 1162, 1240], "smaller": [45, 60, 170, 299, 788, 867, 995, 1240], "disk": [45, 58, 59, 60, 122, 299, 830, 867], "22": [45, 60, 145, 299, 380, 400, 403, 417, 419, 420, 574, 575, 576, 578, 581, 582, 583, 643, 757, 867, 870, 973, 987, 990, 1119, 1194, 1240, 1249], "comput": [45, 60, 86, 88, 93, 170, 185, 206, 260, 265, 278, 291, 299, 306, 316, 317, 318, 319, 320, 321, 331, 332, 335, 348, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 371, 422, 429, 468, 493, 494, 495, 498, 499, 500, 501, 511, 512, 513, 536, 552, 553, 559, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 593, 594, 595, 596, 600, 662, 663, 670, 675, 677, 681, 682, 683, 688, 690, 707, 734, 735, 747, 757, 778, 794, 801, 803, 804, 838, 845, 848, 861, 867, 872, 878, 879, 880, 881, 882, 883, 893, 894, 897, 913, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 936, 993, 995, 999, 1041, 1065, 1066, 1067, 1070, 1071, 1072, 1073, 1083, 1084, 1085, 1093, 1102, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1144, 1145, 1146, 1147, 1150, 1214, 1215, 1222, 1228, 1240], "512": [45, 118, 203, 299, 557, 757, 1102, 1240], "page": [45, 60, 122, 128, 133, 135, 299, 757, 769, 867, 1240], "implement": [45, 106, 118, 154, 191, 209, 225, 285, 299, 302, 446, 467, 520, 539, 541, 542, 543, 544, 558, 657, 722, 757, 855, 1012, 1088, 1132, 1135, 1240, 1244], "At": [45, 299], "moment": [45, 162, 299, 468, 596, 757, 1041, 1147, 1240], "write_t": [45, 299], "partition_col": [45, 119, 299], "write_to_dataset": [45, 299], "similar": [45, 150, 178, 206, 244, 299, 406, 409, 502, 552, 589, 689, 747, 757, 788, 804, 828, 867, 976, 979, 1074, 1139, 1240], "spark": [45, 299], "partit": [45, 119, 120, 128, 131, 135, 136, 204, 222, 299], "we": [45, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 164, 186, 206, 234, 269, 299, 399, 403, 417, 448, 483, 509, 518, 520, 572, 575, 576, 577, 578, 579, 581, 582, 583, 613, 625, 647, 701, 702, 704, 705, 719, 744, 745, 747, 757, 782, 795, 804, 808, 809, 822, 867, 877, 969, 973, 987, 1014, 1055, 1088, 1164, 1176, 1198, 1240], "use_pyarrow_write_to_dataset": [45, 299], "first": [45, 80, 116, 117, 121, 125, 130, 134, 139, 140, 141, 142, 145, 155, 184, 186, 189, 192, 206, 208, 209, 219, 223, 224, 252, 257, 258, 264, 265, 269, 276, 283, 299, 324, 326, 367, 370, 396, 399, 403, 447, 455, 456, 472, 481, 483, 487, 488, 509, 519, 529, 556, 587, 599, 611, 614, 616, 626, 627, 685, 692, 708, 710, 714, 747, 757, 778, 795, 798, 800, 804, 807, 817, 838, 845, 847, 853, 867, 870, 886, 932, 934, 935, 966, 969, 973, 1013, 1023, 1024, 1043, 1053, 1055, 1059, 1060, 1081, 1087, 1133, 1162, 1164, 1165, 1167, 1177, 1178, 1211, 1219, 1240, 1249], "watermark": [45, 299], "partitioned_object": [45, 299], "calendar": [47, 48, 186, 206, 234, 269, 299, 387, 399, 403, 417, 421, 572, 575, 576, 577, 578, 579, 581, 582, 583, 701, 702, 704, 705, 706, 744, 745, 757, 795, 804, 822, 867, 953, 969, 973, 987, 991], "time_unit": [48, 50, 375, 376, 383, 408, 420, 645, 701, 702, 703, 704, 705, 706, 712, 870, 941, 942, 949, 978, 990, 1196], "time_zon": [48, 377, 379, 402, 645, 701, 702, 703, 704, 705, 870, 940, 943, 948, 972, 1196], "timezon": [48, 379, 870], "m": [48, 50, 67, 205, 299, 374, 375, 376, 382, 383, 406, 408, 409, 420, 611, 643, 644, 645, 649, 701, 702, 703, 704, 705, 706, 712, 803, 867, 870, 940, 941, 942, 948, 949, 976, 978, 979, 990, 1162, 1194, 1195, 1196, 1200], "zone": [48, 374, 377, 402, 645, 701, 702, 703, 704, 705, 870, 940, 943, 972, 1196], "zoneinfo": [48, 870], "run": [48, 58, 59, 60, 86, 87, 147, 149, 185, 188, 207, 209, 224, 241, 265, 274, 285, 299, 314, 367, 483, 518, 520, 570, 571, 618, 736, 757, 778, 779, 786, 788, 794, 797, 808, 809, 813, 818, 825, 830, 838, 844, 867, 870, 932, 1055, 1088, 1116, 1117, 1169, 1240, 1248, 1249], "available_timezon": [48, 870], "128": [49, 82, 1102, 1240], "bit": [49, 52, 53, 54, 55, 56, 57, 74, 75, 76, 77, 565, 603, 757, 1111, 1154, 1240], "experiment": [49, 51, 87, 136, 267, 268, 299, 367, 403, 448, 520, 575, 576, 577, 578, 579, 581, 582, 583, 757, 779, 840, 867, 912, 932, 973, 1014, 1107, 1240], "progress": [49, 51], "expect": [49, 51, 97, 99, 104, 116, 118, 130, 509, 520, 719, 757, 806, 808, 809, 867], "categori": [51, 71, 90, 257, 299, 346, 347, 368, 448, 560, 757, 908, 910, 933, 1014, 1107, 1240], "iter": [51, 86, 87, 88, 105, 118, 147, 149, 157, 175, 185, 186, 187, 188, 189, 190, 202, 203, 204, 234, 235, 236, 237, 240, 241, 242, 248, 263, 264, 273, 274, 277, 278, 299, 367, 434, 552, 599, 675, 677, 683, 685, 686, 687, 695, 699, 724, 728, 736, 739, 741, 747, 753, 757, 773, 791, 794, 795, 796, 797, 798, 799, 822, 824, 825, 827, 832, 837, 843, 844, 848, 867, 932, 1240, 1249], "32": [52, 55, 75, 82, 201, 234, 299, 537, 572, 591, 757, 822, 867, 936, 970, 1102, 1124, 1240], "sign": [54, 55, 56, 57, 399, 565, 652, 757, 870, 969, 1028, 1111, 1203, 1240], "maintain_ord": [58, 59, 60, 157, 185, 188, 222, 224, 263, 265, 269, 279, 282, 284, 286, 287, 288, 289, 290, 291, 292, 299, 308, 337, 441, 444, 510, 520, 667, 757, 773, 779, 786, 788, 794, 797, 818, 830, 832, 837, 838, 849, 852, 854, 856, 857, 858, 859, 860, 861, 862, 867, 899, 1082, 1225, 1240], "type_coercion": [58, 59, 60, 86, 87, 778, 779, 786, 788, 818, 830, 867], "predicate_pushdown": [58, 59, 60, 86, 87, 778, 779, 786, 788, 808, 809, 818, 830, 867], "projection_pushdown": [58, 59, 60, 86, 87, 778, 779, 786, 788, 808, 809, 818, 830, 867], "simplify_express": [58, 59, 60, 86, 87, 778, 779, 786, 788, 818, 830, 867], "slice_pushdown": [58, 59, 60, 86, 87, 778, 779, 786, 788, 808, 809, 818, 830, 867], "no_optim": [58, 59, 60, 86, 87, 778, 779, 788, 808, 809, 818, 867], "evalu": [58, 59, 60, 173, 175, 206, 299, 311, 325, 327, 328, 367, 434, 450, 473, 474, 509, 551, 674, 676, 680, 684, 701, 702, 704, 705, 707, 716, 717, 730, 733, 739, 744, 745, 747, 748, 757, 778, 791, 801, 803, 804, 867, 887, 889, 890, 932, 1045, 1046, 1231, 1240], "queri": [58, 59, 60, 64, 66, 86, 87, 118, 119, 122, 130, 133, 134, 135, 172, 207, 223, 299, 518, 520, 616, 757, 778, 779, 786, 788, 800, 807, 818, 830, 846, 847, 850, 855, 867, 1001, 1088, 1167, 1240, 1248], "ram": [58, 59, 60, 867], "maintain": [58, 59, 60, 157, 263, 299, 337, 510, 587, 667, 757, 773, 832, 837, 867, 899, 1082, 1133, 1225, 1240], "slightli": [58, 59, 60, 121, 867], "faster": [58, 59, 60, 118, 172, 259, 267, 299, 314, 520, 668, 757, 867, 877, 1001, 1088, 1240], "coercion": [58, 59, 60, 86, 87, 566, 757, 778, 779, 786, 788, 818, 830, 867], "optim": [58, 59, 60, 86, 87, 128, 130, 133, 134, 135, 203, 207, 223, 228, 236, 265, 299, 778, 779, 786, 788, 808, 809, 818, 830, 838, 846, 847, 855, 867, 913, 1132, 1240], "pushdown": [58, 59, 60, 86, 87, 778, 779, 786, 788, 808, 809, 818, 820, 830, 846, 847, 867, 1132, 1135, 1240], "project": [58, 59, 60, 86, 87, 130, 132, 133, 134, 135, 314, 598, 599, 757, 778, 779, 786, 788, 808, 809, 818, 820, 826, 830, 867], "slice": [58, 59, 60, 81, 86, 87, 170, 192, 204, 252, 299, 488, 506, 520, 528, 530, 573, 575, 576, 577, 578, 579, 581, 582, 583, 757, 778, 779, 786, 788, 808, 809, 818, 830, 867, 995, 1013, 1060, 1078, 1118, 1120, 1121, 1122, 1123, 1124, 1126, 1127, 1128, 1211, 1240], "off": [58, 59, 60, 86, 87, 116, 117, 130, 778, 779, 786, 788, 808, 809, 818, 867], "certain": [58, 59, 60, 87, 95, 120, 131, 195, 196, 269, 299, 639, 640, 778, 779, 818, 867, 1240], "lf": [58, 59, 60, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 823, 824, 826, 828, 830, 831, 832, 833, 834, 835, 837, 838, 840, 841, 842, 843, 845, 846, 847, 851, 867, 1248, 1249], "scan_csv": [58, 59, 60, 116, 117, 867], "my_larger_than_ram_fil": [58, 59, 60, 867], "data_pagesize_limit": [60, 867], "reduc": [60, 116, 117, 128, 130, 133, 134, 135, 286, 287, 289, 292, 591, 693, 710, 757, 856, 857, 859, 862, 867, 1090, 1106, 1141, 1210, 1240], "pressur": [60, 116, 117, 128, 130, 134, 135, 591, 757, 867, 1141, 1240], "improv": [60, 122, 133, 867], "speed": [60, 314, 520, 757, 867, 1249], "integer_list": 61, "float_list": 61, "wrap": [63, 112, 452, 757], "arbitrari": [63, 146, 870], "eager": [64, 65, 66, 67, 68, 69, 186, 224, 267, 299, 375, 377, 380, 383, 395, 396, 399, 400, 402, 403, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 575, 576, 578, 581, 582, 583, 680, 684, 701, 702, 704, 705, 712, 716, 717, 730, 733, 739, 744, 745, 748, 756, 757, 795, 809, 867, 940, 941, 943, 946, 948, 949, 950, 956, 957, 959, 962, 964, 965, 966, 967, 969, 970, 971, 972, 973, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 1248], "against": [64, 118, 483, 867, 1055, 1248, 1249], "eagerli": [64, 509], "unset": [64, 145, 402, 509, 972], "init": [64, 152], "eager_execut": [64, 1248], "itself": [64, 144, 225, 299, 302, 520, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 734, 735, 757, 806, 867, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1240, 1244, 1248], "impact": [64, 186, 189, 299, 795, 798, 867, 1248], "declar": [64, 105, 107, 108, 109, 111, 118, 125, 126, 134, 299, 867], "godfath": 64, "1972": 64, "6_000_000": 64, "134_821_952": 64, "dark": 64, "knight": 64, "2008": 64, "185_000_000": 64, "533_316_061": 64, "schindler": 64, "1993": 64, "22_000_000": 64, "96_067_179": 64, "pulp": 64, "fiction": 64, "1994": 64, "8_000_000": 64, "107_930_000": 64, "shawshank": 64, "redempt": 64, "25_000_000": 64, "28_341_469": 64, "release_year": 64, "budget": 64, "gross": 64, "imdb_scor": 64, "ctx": [64, 65, 66, 67, 68, 69], "film": 64, "1990": 64, "BY": [64, 66], "desc": [64, 66], "AS": [64, 737, 1248], "decad": 64, "total_gross": 64, "n_film": 64, "2000": [64, 386, 395, 396, 399, 870, 952, 965, 966, 969, 974], "533316061": 64, "232338648": 64, "1970": [64, 136], "134821952": 64, "register_glob": [65, 67, 69, 1248], "register_mani": [65, 66, 69], "unregist": [65, 66, 67, 1248], "frame_data": [65, 68], "collect": [65, 66, 69, 83, 86, 87, 130, 131, 132, 136, 146, 148, 165, 167, 207, 224, 254, 265, 266, 299, 428, 457, 520, 686, 708, 712, 739, 757, 772, 773, 775, 779, 781, 782, 783, 784, 787, 788, 789, 790, 791, 792, 793, 794, 795, 800, 802, 803, 804, 805, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 824, 826, 828, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 843, 845, 846, 847, 848, 849, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 867, 870, 1026, 1240, 1248, 1249], "global": [66, 71, 89, 90, 137, 146, 151, 259, 299, 567, 757, 909, 911, 1113, 1240, 1248], "scope": [66, 69, 152, 768, 870, 1248], "map": [66, 67, 72, 107, 108, 116, 117, 118, 119, 122, 123, 128, 129, 130, 133, 158, 168, 177, 203, 209, 229, 235, 236, 237, 255, 299, 309, 403, 417, 517, 518, 519, 520, 539, 552, 567, 670, 721, 757, 775, 785, 820, 867, 870, 934, 973, 987, 1087, 1088, 1113, 1228, 1240, 1248], "recent": [66, 139, 140, 141, 142, 553, 757, 1102, 1240, 1248], "df1": [66, 68, 69, 80, 88, 139, 140, 169, 172, 216, 260, 271, 299, 814, 867], "df2": [66, 68, 69, 80, 88, 139, 140, 169, 172, 260, 271, 299], "join": [66, 71, 80, 86, 87, 88, 90, 175, 206, 268, 299, 434, 451, 552, 757, 778, 779, 786, 788, 791, 804, 818, 830, 840, 845, 867], "named_fram": [67, 1248], "lf1": [67, 69], "o": [67, 122, 133, 344, 367, 610, 665, 757, 905, 932, 1161, 1189, 1224, 1240], "lf2": [67, 69, 867], "p": [67, 82, 223, 299, 556, 739, 757, 817, 867], "q": [67, 237, 299, 739], "r": [67, 116, 117, 130, 556, 606, 610, 611, 612, 613, 626, 757, 870, 1157, 1161, 1162, 1163, 1164, 1177], "lf3": [67, 867], "lf4": [67, 867], "either": [67, 72, 146, 201, 205, 206, 207, 210, 212, 217, 222, 234, 235, 250, 259, 299, 560, 567, 572, 643, 674, 683, 689, 739, 757, 803, 804, 806, 822, 867, 870, 1107, 1113, 1194, 1240, 1249], "tbl1": [67, 69], "tbl2": [67, 69], "tbl3": 67, "tbl4": 67, "statement": [68, 747], "hello_world": 68, "baz": [68, 196, 197, 224, 266, 299, 613, 633, 635, 753, 802, 839, 867, 870, 1164, 1186], "hello_data": 68, "foo_bar": [68, 524, 527, 633, 719], "registr": [69, 769], "lifetim": [69, 152, 768], "context": [69, 71, 89, 90, 150, 220, 299, 308, 314, 434, 483, 518, 520, 528, 598, 599, 670, 678, 689, 691, 709, 712, 718, 722, 733, 736, 756, 757, 768, 769, 845, 867, 1055, 1228, 1240, 1248], "manag": [69, 71, 89, 90, 768, 769, 1248], "often": [69, 119, 152, 186, 187, 189, 190, 234, 299, 479, 480, 566, 572, 757, 795, 796, 798, 799, 822, 867, 1051, 1052], "want": [69, 87, 108, 172, 209, 220, 299, 434, 518, 520, 571, 575, 576, 577, 578, 579, 581, 582, 583, 604, 617, 628, 692, 701, 710, 730, 733, 748, 757, 779, 800, 807, 867, 870, 1001, 1088, 1117, 1155, 1168, 1179, 1240], "df0": [69, 216, 299, 814, 867], "exit": [69, 71, 89, 152, 1248], "construct": [69, 71, 89, 90, 105, 107, 108, 109, 110, 111, 118, 299, 440, 730, 733, 748, 753, 757, 782, 867, 909, 1240], "persist": [69, 867], "through": [69, 106, 118, 753, 870, 1240], "tbl0": 69, "remain": [69, 116, 117, 130, 167, 170, 175, 299, 372, 373, 434, 482, 567, 634, 635, 757, 784, 791, 808, 809, 867, 937, 938, 995, 1005, 1054, 1113, 1185, 1186, 1240], "text": [69, 118, 617, 618, 626, 627, 629, 737, 1168, 1169, 1180, 1249], "misc": 69, "testing1234": 69, "test1": 69, "test2": 69, "test3": 69, "disabl": [71, 89, 90, 203, 299, 778, 867], "cach": [71, 86, 87, 89, 90, 122, 130, 133, 135, 139, 140, 141, 142, 151, 567, 575, 576, 577, 578, 579, 581, 582, 583, 643, 644, 645, 649, 757, 768, 778, 779, 786, 788, 818, 830, 867, 909, 1113, 1194, 1195, 1196, 1200, 1240], "under": [71, 81, 82, 83, 84, 89, 90, 749, 750, 752, 753, 758, 759, 762, 764, 765, 766, 1232, 1234, 1236, 1241, 1245, 1246, 1247], "equal": [71, 90, 116, 117, 118, 130, 139, 140, 141, 142, 157, 179, 186, 189, 206, 216, 263, 299, 368, 417, 423, 424, 443, 470, 509, 548, 560, 566, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 623, 624, 652, 734, 735, 747, 753, 757, 773, 795, 798, 804, 814, 832, 837, 867, 933, 973, 1081, 1107, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1126, 1127, 1128, 1134, 1174, 1175, 1203, 1240, 1249], "concaten": [71, 88, 89, 90, 178, 223, 299, 556, 686, 687, 757, 817, 867, 915, 1094, 1240], "introduc": [71, 90, 643, 644, 645, 1194, 1195, 1196], "overhead": [71, 90, 130, 133, 134, 135], "amount": [71, 90, 314, 520, 706, 757], "depend": [71, 85, 90, 118, 138, 329, 330, 475, 476, 520, 528, 560, 563, 706, 709, 712, 718, 757, 891, 892, 1047, 1048, 1107, 1109, 1240, 1249], "nest": [71, 112, 128, 170, 299, 769, 995, 1240, 1248, 1249], "clear": [71, 89, 160, 299, 777, 867, 920, 1240], "outermost": 71, "s1": [71, 89, 90, 141, 142, 178, 299, 994, 1040, 1049, 1081, 1222, 1231, 1240], "color": [71, 89, 90, 285, 339, 341, 342, 343, 670, 757, 855, 1228, 1240], "red": [71, 89, 90, 285, 670, 757, 855, 1228, 1240], "green": [71, 89, 90, 285, 670, 757, 855, 1228, 1240], "blue": [71, 89, 90, 339, 341, 342, 343, 670, 757, 1228, 1240], "concat": [71, 89, 90, 117, 915, 1094, 1240], "cat": [71, 89, 90, 368, 560, 603, 606, 648, 651, 664, 687, 752, 757, 870, 933, 1014, 1107, 1154, 1157, 1199, 1202, 1236, 1240], "decor": [71, 81, 82, 83, 84, 146, 148, 209, 299, 520, 757, 768, 769, 1088, 1240], "dure": [71, 116, 117, 130, 152, 172, 299, 1001, 1240], "afterward": [71, 747], "construct_categor": 71, "schemadict": [72, 105, 107, 108, 109, 110, 111, 116, 118, 119, 121, 127, 130, 299, 739, 808, 809, 850, 855, 867], "composit": [72, 145, 1249], "initi": [72, 152, 692, 696, 710, 747], "dai": [73, 186, 189, 204, 206, 234, 269, 299, 395, 396, 399, 400, 403, 410, 417, 419, 572, 575, 576, 577, 578, 579, 581, 582, 583, 700, 701, 702, 703, 704, 705, 706, 744, 745, 757, 795, 798, 804, 822, 867, 870, 965, 966, 969, 970, 973, 980, 987, 989], "unsign": [74, 75, 76, 77, 565, 757, 870, 1028, 1111, 1240], "static": [78, 850, 855], "frametyp": [80, 1248], "joinstrategi": [80, 205, 299, 803, 867], "outer": [80, 88, 205, 268, 299, 803, 840, 867], "descend": [80, 157, 242, 248, 263, 299, 324, 334, 504, 563, 588, 598, 599, 670, 683, 757, 773, 827, 832, 837, 867, 886, 896, 1036, 1076, 1109, 1137, 1149, 1228, 1240], "fill": [80, 88, 159, 173, 174, 244, 245, 267, 299, 338, 358, 361, 432, 433, 439, 451, 575, 576, 578, 582, 589, 590, 620, 630, 711, 730, 733, 748, 757, 789, 790, 828, 829, 845, 867, 1003, 1004, 1017, 1099, 1120, 1121, 1123, 1126, 1127, 1128, 1139, 1140, 1171, 1181, 1240], "sort": [80, 81, 139, 140, 145, 157, 186, 187, 189, 190, 206, 216, 223, 224, 234, 242, 263, 269, 283, 293, 299, 324, 347, 434, 520, 552, 572, 575, 576, 577, 578, 579, 581, 582, 583, 588, 599, 670, 672, 683, 722, 757, 773, 786, 795, 796, 798, 799, 804, 814, 817, 818, 822, 827, 830, 837, 853, 863, 867, 870, 886, 910, 1036, 1137, 1225, 1228, 1240, 1249], "origin": [80, 116, 117, 130, 167, 175, 265, 299, 372, 373, 402, 403, 417, 434, 467, 482, 519, 539, 552, 565, 566, 567, 568, 605, 606, 611, 616, 681, 682, 757, 784, 791, 838, 867, 933, 937, 938, 972, 973, 987, 1005, 1054, 1087, 1107, 1113, 1114, 1156, 1157, 1162, 1167, 1240], "In": [80, 87, 118, 120, 131, 132, 135, 146, 148, 152, 170, 172, 186, 187, 189, 190, 209, 220, 234, 259, 299, 520, 572, 701, 757, 779, 795, 796, 798, 799, 822, 867, 995, 1001, 1110, 1240], "duplic": [80, 94, 198, 205, 206, 265, 268, 299, 309, 453, 467, 539, 560, 757, 803, 804, 838, 840, 867, 1020, 1107, 1240], "suitabl": [80, 88, 118, 144, 209, 299, 520, 587, 757, 1088, 1133, 1240, 1249], "get": [80, 87, 113, 123, 129, 136, 150, 157, 161, 168, 177, 181, 183, 186, 187, 189, 190, 192, 193, 198, 200, 201, 208, 211, 218, 219, 224, 234, 235, 239, 243, 247, 252, 263, 272, 283, 293, 299, 308, 322, 323, 324, 326, 337, 346, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 383, 435, 441, 447, 466, 469, 472, 485, 490, 510, 521, 522, 523, 528, 530, 534, 545, 546, 554, 555, 561, 570, 571, 572, 597, 601, 658, 659, 667, 671, 709, 714, 718, 722, 723, 724, 725, 726, 727, 728, 738, 742, 746, 757, 773, 778, 779, 780, 785, 792, 795, 796, 798, 799, 800, 805, 807, 822, 823, 831, 835, 837, 842, 853, 863, 867, 884, 885, 886, 887, 888, 899, 908, 915, 924, 925, 926, 927, 928, 929, 930, 931, 949, 1010, 1013, 1018, 1020, 1038, 1043, 1057, 1062, 1082, 1089, 1091, 1092, 1094, 1097, 1098, 1103, 1104, 1108, 1116, 1117, 1148, 1151, 1211, 1216, 1217, 1225, 1229, 1230, 1240], "speedup": [80, 203, 209, 299, 520, 757, 1088, 1240], "receiv": [80, 118, 130, 209, 223, 285, 299, 520, 556, 757, 817, 867, 1249], "now": [80, 234, 299, 417, 708, 822, 867, 973, 987, 1196], "One": [80, 164, 220, 224, 299, 311, 551, 708, 737, 757, 870, 934, 1240], "whose": [80, 206, 224, 299, 428, 708, 757, 804, 867, 870], "uniqu": [80, 143, 144, 145, 148, 156, 200, 205, 220, 224, 237, 290, 299, 315, 326, 368, 466, 538, 560, 643, 644, 645, 649, 668, 670, 679, 729, 757, 772, 803, 860, 867, 888, 933, 934, 1038, 1095, 1107, 1194, 1195, 1196, 1200, 1226, 1228, 1240], "post": 80, "constrain": [80, 167, 299, 784, 867], "newli": 80, "boolean": [80, 157, 175, 178, 207, 248, 263, 299, 310, 311, 312, 327, 328, 339, 342, 343, 386, 434, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 473, 474, 478, 549, 551, 554, 555, 599, 614, 672, 673, 683, 684, 739, 747, 757, 773, 777, 791, 806, 832, 837, 867, 870, 874, 875, 887, 889, 890, 900, 902, 952, 1005, 1018, 1019, 1020, 1022, 1023, 1024, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1038, 1045, 1046, 1050, 1100, 1103, 1104, 1135, 1154, 1221, 1231, 1240], "know": [80, 118, 224, 299, 509, 518, 757, 1230, 1240], "2022": [80, 158, 164, 184, 299, 376, 403, 417, 643, 701, 702, 704, 706, 712, 775, 867, 870, 942, 953, 973, 987, 1194], "df3": [80, 299], "set_tbl_format": 80, "09": [80, 146, 234, 299, 376, 395, 396, 572, 646, 701, 745, 757, 822, 867, 870, 1197], "02": [80, 158, 184, 186, 234, 269, 299, 375, 376, 383, 395, 396, 399, 402, 408, 411, 414, 416, 420, 572, 575, 576, 578, 581, 582, 583, 584, 643, 644, 645, 649, 701, 702, 704, 706, 757, 775, 795, 822, 867, 870, 941, 942, 944, 945, 949, 950, 956, 957, 962, 965, 966, 967, 972, 973, 977, 978, 981, 984, 986, 987, 1081, 1194, 1195, 1196, 1200], "03": [80, 112, 158, 186, 234, 269, 299, 375, 376, 377, 383, 395, 396, 399, 402, 403, 406, 408, 409, 410, 411, 414, 416, 417, 420, 572, 575, 576, 578, 581, 582, 583, 644, 649, 701, 702, 704, 706, 757, 775, 795, 822, 867, 941, 942, 943, 949, 950, 956, 957, 965, 966, 967, 972, 973, 976, 978, 979, 980, 981, 984, 986, 1195, 1200], "af1": 80, "af2": 80, "af3": 80, "keep": [80, 116, 117, 130, 265, 268, 269, 299, 467, 519, 532, 540, 567, 685, 757, 838, 840, 867, 1087, 1113, 1240], "easili": [80, 118, 240, 273, 278, 299, 739, 824, 843, 848, 867], "dot": [80, 757, 830, 867, 1240], "product": [80, 162, 205, 299, 360, 365, 371, 757, 788, 803, 867, 926, 930, 936, 1240], "fill_nul": [80, 173, 299, 757, 789, 845, 867, 1240], "sum_horizont": [80, 250, 299, 740], "167": 80, "47": 80, "callabl": [81, 82, 83, 84, 130, 155, 178, 209, 223, 280, 285, 299, 314, 509, 516, 517, 518, 520, 540, 556, 573, 574, 678, 692, 693, 696, 697, 710, 720, 721, 722, 732, 757, 808, 809, 817, 850, 855, 867, 877, 1081, 1088, 1118, 1119, 1240], "by_first_letter_of_column_nam": 81, "f": [81, 117, 184, 204, 254, 264, 267, 299, 307, 509, 591, 610, 643, 645, 678, 686, 720, 757, 1081, 1161, 1194, 1196], "fromkei": [81, 83], "by_first_letter_of_column_valu": 81, "starts_with": [81, 339, 342, 603, 609, 870, 1160], "to_seri": [81, 181, 299, 643, 684, 733, 1194], "xy": [81, 83], "yz": [81, 83], "b1": [81, 83], "b2": [81, 83], "pow_n": 82, "powersofn": 82, "next": [82, 186, 206, 234, 269, 299, 338, 399, 403, 417, 563, 572, 575, 576, 577, 578, 579, 581, 582, 583, 701, 702, 704, 705, 744, 745, 757, 795, 804, 822, 867, 969, 973, 987, 1109, 1240], "ceil": [82, 757, 1240], "previou": [82, 152, 541, 542, 553, 558, 655, 657, 757, 1102, 1240], "floor": [82, 757, 1240], "nearest": [82, 206, 227, 291, 299, 349, 437, 451, 561, 579, 731, 757, 804, 819, 861, 867, 914, 1007, 1017, 1108, 1124, 1240], "24": [82, 150, 170, 186, 206, 209, 234, 269, 299, 360, 367, 380, 399, 400, 403, 411, 417, 419, 537, 572, 575, 576, 577, 578, 579, 581, 582, 583, 701, 702, 704, 705, 706, 744, 745, 757, 795, 804, 822, 867, 932, 969, 973, 981, 987, 1040, 1240], "001": [82, 652, 706, 982, 983, 985, 1203], "next_pow2": 82, "prev_pow2": 82, "nearest_pow2": 82, "split_by_column_dtyp": 83, "collect_al": [83, 87, 778, 779, 867], "31": [84, 146, 376, 380, 395, 399, 410, 643, 700, 703, 712, 719, 870, 940, 942, 946, 965, 980, 1194, 1249], "42": [84, 191, 216, 234, 299, 572, 757, 814, 822, 867, 1012, 1240], "961": 84, "1764": 84, "4160": 84, "build": [85, 106, 870, 1249], "wa": [85, 139, 567, 628, 757, 1113, 1179, 1240], "compil": [85, 329, 330, 475, 476, 891, 892, 1047, 1048], "gate": 85, "info": [85, 120, 131, 132, 138, 225, 299, 302, 1244], "host": [85, 116, 122, 124, 133, 135], "git": 85, "lazy_fram": [86, 87], "comm_subplan_elim": [86, 87, 778, 779, 786, 788, 818, 830, 867], "comm_subexpr_elim": [86, 87, 778, 779, 786, 788, 818, 830, 867], "graph": [86, 207, 299, 778, 801, 845, 867], "parallel": [86, 88, 114, 119, 128, 135, 186, 189, 206, 207, 223, 241, 274, 299, 367, 483, 670, 747, 757, 769, 795, 798, 803, 804, 825, 844, 855, 867, 932, 1055, 1228, 1240], "threadpool": [86, 150], "Will": [86, 87, 778, 779, 786, 788, 818, 830, 867, 1240], "try": [86, 87, 100, 102, 116, 117, 122, 128, 130, 133, 135, 778, 779, 786, 788, 818, 830, 867], "branch": [86, 87, 778, 779, 786, 788, 818, 830, 867], "subplan": [86, 87, 778, 779, 786, 788, 818, 830, 867], "union": [86, 87, 88, 501, 778, 779, 786, 788, 818, 830, 867, 870, 1073], "subexpress": [86, 87, 778, 779, 786, 788, 818, 830, 867], "reus": [86, 87, 778, 779, 786, 788, 818, 830, 867], "part": [86, 87, 105, 121, 146, 612, 634, 635, 779, 786, 788, 818, 830, 845, 867, 1163, 1185, 1186], "fashion": [86, 87, 205, 299, 779, 786, 788, 818, 830, 867], "alpha": [86, 87, 314, 425, 426, 427, 757, 778, 779, 786, 788, 818, 830, 867, 996, 997, 998, 1240], "gevent": [87, 138, 779, 867], "await": [87, 779, 867], "_geventdataframeresult": [87, 779, 867], "asynchron": [87, 779, 867], "them": [87, 105, 107, 108, 109, 111, 119, 125, 126, 127, 128, 130, 134, 135, 171, 172, 186, 206, 216, 234, 269, 299, 452, 489, 545, 546, 552, 572, 686, 701, 702, 704, 705, 744, 745, 757, 779, 787, 795, 804, 814, 822, 867, 870, 1001, 1061, 1097, 1098, 1240], "schedul": [87, 779, 867], "insid": [87, 779, 867], "almost": [87, 209, 285, 299, 643, 644, 645, 779, 867, 1088, 1194, 1195, 1196, 1240], "instantli": [87, 779, 867], "asyncio": [87, 779, 867], "releas": [87, 314, 520, 757, 779, 867, 1249], "greenlet": [87, 779, 867], "task": [87, 779, 867], "wrapper": [87, 779, 867], "event": [87, 779, 867], "asyncresult": [87, 779, 867], "timeout": [87, 779, 867], "break": [87, 136, 267, 268, 299, 314, 367, 368, 403, 448, 575, 576, 577, 578, 579, 581, 582, 583, 757, 779, 840, 867, 912, 932, 933, 973, 1014, 1107, 1240], "collect_async": [87, 867], "set_except": [87, 779, 867], "futur": [87, 154, 164, 210, 212, 217, 250, 299, 701, 779, 867, 1230, 1240], "rerais": [87, 779, 867], "polarstyp": 88, "concatmethod": 88, "vertic": [88, 172, 210, 212, 217, 250, 267, 271, 299, 602, 1153], "rechunk": [88, 105, 110, 116, 117, 122, 124, 128, 130, 133, 134, 135, 172, 299, 757, 915, 1001, 1094, 1240], "combin": [88, 100, 102, 175, 186, 191, 206, 234, 269, 299, 311, 325, 417, 551, 567, 572, 621, 631, 637, 638, 639, 640, 701, 702, 704, 705, 744, 745, 747, 757, 795, 804, 822, 830, 867, 973, 987, 1113, 1172, 1182, 1188, 1189, 1190, 1191, 1240], "vertical_relax": 88, "diagon": [88, 264, 299], "diagonal_relax": 88, "vstack": [88, 172, 299], "addition": [88, 235, 299], "coerc": [88, 566, 757], "supertyp": [88, 174, 299, 313, 757, 790, 867], "mismatch": [88, 100, 126, 139, 141], "find": [88, 176, 182, 299, 587, 604, 757, 1133, 1155, 1240], "miss": [88, 116, 117, 130, 173, 299, 338, 425, 426, 427, 439, 461, 463, 509, 757, 789, 867, 996, 997, 998, 1230, 1240], "stack": [88, 194, 271, 299], "don": [88, 186, 209, 265, 267, 299, 314, 367, 483, 520, 552, 757, 795, 838, 867, 870, 932, 994, 1055, 1088, 1134, 1230, 1240], "auto": [88, 105, 107, 108, 109, 111, 125, 126, 128, 134, 135, 264, 299, 417, 867, 973, 987, 1249], "logic": [88, 209, 225, 285, 299, 302, 310, 312, 520, 664, 674, 676, 722, 757, 782, 803, 826, 855, 867, 874, 875, 1088, 1223, 1240, 1244], "align_fram": 88, "pattern": [88, 116, 117, 130, 133, 134, 135, 203, 299, 526, 603, 604, 605, 606, 611, 612, 613, 626, 627, 628, 855, 870, 1132, 1135, 1154, 1155, 1156, 1157, 1162, 1163, 1164, 1177, 1178, 1179, 1240], "collis": 88, "need": [88, 112, 116, 117, 119, 186, 187, 189, 190, 234, 237, 246, 259, 299, 509, 572, 591, 646, 706, 730, 733, 748, 757, 795, 796, 798, 799, 822, 867, 1141, 1197, 1240, 1249], "sure": [88, 105, 110, 116, 117, 122, 124, 128, 186, 187, 189, 190, 228, 234, 299, 572, 757, 795, 796, 798, 799, 822, 867], "contigu": [88, 105, 110, 116, 117, 122, 124, 128, 130, 133, 134, 135, 228, 299], "relev": 88, "df_h1": 88, "l1": 88, "l2": 88, "df_h2": 88, "r1": 88, "r2": 88, "r3": 88, "df_d1": 88, "df_d2": 88, "df_a1": 88, "df_a2": 88, "df_a3": 88, "enable_string_cach": 89, "stringcach": [89, 90, 205, 299, 769, 909, 911], "reliabl": [89, 90], "wai": [89, 90, 105, 107, 108, 109, 111, 125, 126, 134, 185, 204, 223, 248, 278, 299, 552, 556, 599, 611, 753, 757, 794, 817, 832, 848, 855, 867, 1162], "until": [89, 207, 299, 623, 624, 652, 1174, 1175, 1203], "deprec": [90, 91, 155, 176, 179, 186, 187, 188, 189, 190, 195, 210, 212, 217, 231, 245, 250, 253, 275, 280, 299, 314, 351, 352, 362, 363, 364, 365, 366, 379, 381, 385, 389, 391, 393, 398, 402, 405, 417, 455, 459, 462, 467, 479, 492, 507, 516, 517, 519, 558, 573, 590, 605, 615, 619, 620, 621, 622, 625, 630, 631, 637, 643, 645, 657, 660, 661, 672, 678, 698, 699, 701, 703, 720, 757, 795, 796, 797, 798, 799, 808, 829, 836, 846, 850, 867, 877, 918, 919, 928, 929, 930, 931, 933, 945, 947, 951, 958, 960, 963, 968, 972, 973, 975, 987, 1019, 1023, 1025, 1028, 1029, 1035, 1037, 1039, 1051, 1064, 1079, 1087, 1107, 1118, 1134, 1136, 1140, 1156, 1166, 1170, 1171, 1172, 1173, 1176, 1181, 1182, 1188, 1194, 1196, 1212, 1213, 1230, 1240], "sinc": [90, 120, 131, 155, 157, 176, 179, 186, 187, 188, 189, 190, 195, 210, 212, 217, 231, 245, 250, 253, 263, 275, 280, 299, 314, 351, 352, 362, 363, 364, 365, 366, 379, 381, 383, 385, 389, 391, 393, 398, 402, 405, 417, 455, 459, 462, 467, 479, 492, 507, 516, 517, 519, 558, 573, 590, 605, 615, 619, 620, 621, 622, 625, 630, 631, 637, 643, 645, 657, 660, 661, 672, 678, 698, 699, 701, 703, 712, 720, 757, 773, 795, 796, 797, 798, 799, 808, 829, 832, 836, 837, 846, 850, 867, 877, 918, 919, 928, 929, 930, 931, 933, 945, 947, 949, 951, 958, 960, 963, 968, 972, 973, 975, 987, 1019, 1023, 1025, 1028, 1029, 1035, 1037, 1039, 1051, 1064, 1079, 1087, 1107, 1118, 1134, 1136, 1140, 1156, 1166, 1170, 1171, 1172, 1173, 1176, 1181, 1182, 1188, 1194, 1196, 1212, 1213, 1230, 1240], "19": [90, 121, 138, 155, 176, 179, 186, 187, 188, 189, 190, 195, 206, 210, 212, 217, 231, 234, 245, 250, 253, 280, 299, 314, 351, 352, 362, 363, 364, 365, 366, 381, 385, 389, 391, 393, 398, 402, 403, 405, 417, 455, 459, 462, 467, 479, 492, 507, 516, 517, 519, 558, 572, 573, 576, 578, 590, 605, 615, 619, 620, 621, 622, 625, 630, 631, 637, 643, 645, 646, 657, 660, 661, 678, 698, 699, 701, 703, 720, 757, 795, 796, 797, 798, 799, 804, 808, 822, 829, 836, 850, 867, 877, 918, 919, 928, 929, 930, 931, 933, 947, 951, 958, 960, 963, 968, 972, 973, 975, 987, 1019, 1023, 1025, 1028, 1029, 1035, 1037, 1039, 1051, 1064, 1079, 1087, 1107, 1118, 1134, 1136, 1140, 1156, 1166, 1170, 1171, 1172, 1173, 1176, 1181, 1182, 1188, 1194, 1196, 1197, 1212, 1213, 1230, 1240], "longer": [90, 116, 130], "accept": [90, 115, 116, 117, 120, 122, 124, 128, 157, 185, 188, 240, 241, 244, 248, 263, 273, 274, 278, 299, 307, 350, 428, 452, 519, 552, 567, 599, 673, 675, 677, 683, 685, 686, 687, 695, 699, 724, 728, 736, 739, 741, 747, 757, 773, 794, 797, 824, 825, 828, 832, 837, 843, 844, 848, 867, 917, 1018, 1113, 1139, 1240], "disable_string_cach": 90, "finish": [93, 172, 299, 1001, 1240], "least": [97, 146, 553, 757, 1102, 1240], "unexpect": [98, 299, 518, 520, 757, 1088, 1240], "caus": [98, 106, 116, 117, 130, 139, 154, 172, 299, 1001, 1240], "panic": 98, "incompat": 102, "arrai": [105, 109, 116, 117, 128, 170, 254, 259, 260, 299, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 351, 352, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 477, 493, 494, 495, 496, 505, 508, 512, 518, 575, 576, 578, 582, 588, 707, 757, 867, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 918, 919, 924, 925, 926, 927, 928, 929, 930, 931, 936, 995, 1049, 1065, 1066, 1067, 1068, 1076, 1077, 1080, 1084, 1085, 1120, 1121, 1123, 1126, 1127, 1128, 1137, 1142, 1216, 1221, 1222, 1230, 1240], "chunkedarrai": [105, 219, 299], "recordbatch": [105, 204, 299], "schemadefinit": [105, 107, 108, 109, 111, 125, 126, 134, 299, 867], "schema_overrid": [105, 107, 108, 109, 110, 111, 118, 119, 121, 125, 126, 127, 204, 259, 299, 867, 870, 899], "copi": [105, 106, 154, 159, 160, 204, 254, 260, 273, 299, 431, 757, 776, 777, 843, 867, 916, 920, 1002, 1216, 1221, 1222, 1240], "closest": 105, "pair": [105, 107, 108, 109, 111, 125, 126, 134, 145, 229, 299, 820, 867, 1249], "sever": [105, 107, 108, 109, 111, 125, 126, 134, 299, 867, 1249], "form": [105, 107, 108, 109, 111, 125, 126, 134, 203, 236, 267, 299, 553, 757, 867, 1102, 1240], "dimens": [105, 107, 109, 111, 125, 126, 134, 299, 568, 757, 867, 1114, 1240], "supportsinterchang": 106, "allow_copi": [106, 154], "interchang": [106, 154], "__dataframe__": 106, "convers": [106, 121, 154, 203, 204, 236, 237, 256, 259, 260, 299, 643, 644, 645, 649, 769, 1011, 1194, 1195, 1196, 1200, 1220, 1221, 1222, 1240], "detail": [106, 118, 119, 139, 141, 154, 299, 867, 1249], "latest": [106, 120, 131, 154, 402, 403, 417, 439, 529, 643, 645, 703, 757, 972, 973, 987, 1194, 1196], "from_panda": 106, "from_arrow": 106, "effici": [106, 118, 121, 202, 204, 299], "reli": 106, "becaus": [106, 126, 170, 186, 189, 207, 209, 267, 285, 299, 483, 795, 798, 855, 867, 877, 995, 1055, 1088, 1240], "convert": [106, 110, 120, 121, 127, 131, 154, 255, 256, 257, 258, 259, 262, 299, 336, 369, 377, 406, 409, 508, 509, 517, 518, 540, 562, 613, 625, 643, 644, 645, 646, 647, 649, 654, 757, 867, 898, 911, 943, 976, 979, 1080, 1081, 1164, 1176, 1194, 1195, 1196, 1197, 1198, 1200, 1206, 1209, 1219, 1220, 1221, 1222, 1230, 1240], "panda": [106, 110, 138, 186, 260, 299, 395, 396, 664, 757, 795, 867, 965, 966, 1222, 1223, 1240], "pd": [106, 110, 664, 757, 1222, 1223, 1240], "df_pd": 106, "dfi": [106, 154], "clone": [107, 108, 109, 110, 111, 159, 259, 260, 299, 776, 867, 916, 1220, 1221, 1222, 1230, 1240], "dimension": [107, 109, 111, 259, 299, 867, 1240], "infer_schema_length": [108, 111, 116, 117, 121, 125, 130, 134, 299, 614, 615, 867, 1165, 1166], "NOT": [108, 202, 299, 509, 527, 1248], "typic": [108, 118, 135, 209, 299, 382, 870, 948, 1088, 1240], "clearer": 108, "partial": [108, 116, 130, 299, 867], "mani": [108, 111, 118, 119, 172, 299, 614, 615, 628, 1001, 1165, 1166, 1179, 1240], "scan": [108, 111, 116, 117, 130, 131, 132, 133, 134, 135, 136, 186, 187, 189, 190, 234, 299, 572, 757, 788, 795, 796, 798, 799, 800, 807, 822, 867], "slow": [108, 111, 116, 117, 130, 314, 367, 520, 574, 757, 855, 932, 1119, 1240], "present": [108, 146, 457, 519, 639, 640, 757, 788, 867, 1087, 1230, 1240], "np": [109, 175, 259, 299, 441, 660, 757, 791, 867, 1008, 1022, 1027, 1031, 1032, 1133, 1212, 1240], "ndarrai": [109, 175, 259, 299, 441, 660, 757, 791, 867, 1008, 1132, 1133, 1136, 1212, 1221, 1240], "numpi": [109, 138, 162, 203, 236, 237, 256, 259, 260, 299, 518, 545, 546, 574, 757, 867, 1022, 1027, 1031, 1032, 1097, 1098, 1119, 1221, 1222, 1230, 1240], "columnar": [109, 111, 203, 236, 299], "interpret": [109, 111, 116, 117, 130, 299, 867], "yield": [109, 111, 116, 117, 118, 130, 170, 172, 264, 299, 518, 552, 757, 867, 995, 1001, 1240], "conclus": [109, 111, 299, 867], "nan_to_nul": [110, 299, 867, 1240], "include_index": 110, "instal": [110, 116, 117, 119, 122, 124, 162, 259, 260, 299, 830, 867, 1222, 1240], "nan": [110, 146, 154, 173, 260, 299, 372, 373, 423, 424, 432, 443, 445, 451, 461, 463, 464, 465, 470, 515, 521, 534, 545, 546, 547, 548, 574, 666, 688, 757, 789, 867, 879, 883, 937, 938, 1003, 1031, 1032, 1097, 1098, 1119, 1221, 1222, 1240, 1249], "pd_df": 110, "pd_seri": 110, "tbl": [112, 114, 117], "reconstruct": 112, "repr": [112, 146, 148], "trim": 112, "whitespac": [112, 621, 631, 637, 638, 639, 640, 1172, 1182, 1188, 1189, 1190, 1191], "prompt": 112, "extract": [112, 378, 380, 381, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 397, 398, 400, 401, 404, 405, 407, 410, 411, 412, 413, 414, 415, 416, 418, 419, 421, 556, 612, 613, 614, 615, 616, 634, 757, 944, 945, 946, 947, 950, 951, 953, 957, 958, 959, 960, 962, 963, 964, 967, 968, 970, 971, 974, 975, 977, 980, 981, 982, 983, 984, 985, 986, 988, 989, 991, 1163, 1164, 1165, 1166, 1167], "to_init_repr": [112, 299, 1240], "truncat": [112, 116, 130, 184, 186, 189, 203, 236, 237, 256, 299, 795, 798, 818, 867], "identifi": [112, 215, 222, 265, 299, 813, 838, 867], "compound": [112, 237, 299, 708, 870], "neither": [112, 121, 127, 238, 299, 509, 1081], "source_ac": 112, "source_cha": 112, "ident": [112, 159, 160, 299, 406, 570, 571, 757, 776, 777, 867, 916, 920, 976, 1116, 1117, 1240], "timestamp": [112, 186, 189, 299, 402, 403, 417, 712, 795, 798, 867, 972, 973, 987], "tor_id": 112, "nnel_id": 112, "\u03bc": [112, 146, 186, 203, 206, 234, 236, 237, 256, 269, 299, 374, 375, 376, 377, 378, 379, 382, 384, 388, 390, 392, 395, 396, 397, 399, 402, 403, 404, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 420, 572, 575, 576, 578, 581, 582, 583, 643, 645, 704, 706, 712, 757, 795, 804, 822, 867, 870, 940, 941, 942, 943, 944, 945, 948, 949, 950, 956, 957, 962, 965, 966, 967, 969, 972, 973, 977, 978, 980, 981, 982, 983, 984, 985, 986, 987, 990, 1194, 1196], "asia": [112, 870, 944, 945, 977], "tokyo": [112, 870], "123456780": 112, "9876543210": 112, "56": [112, 662, 757], "59": [112, 145, 376, 392, 404, 703, 743, 744, 745, 870, 942, 962, 974], "663053": 112, "jst": [112, 870], "803065983": 112, "2055938745": 112, "38": [112, 146], "18": [112, 216, 234, 299, 361, 403, 417, 420, 451, 467, 539, 572, 757, 814, 818, 822, 867, 870, 990, 1196], "050545": 112, "source_actor_id": 112, "source_channel_id": 112, "to_list": [112, 234, 299, 1154, 1240], "datatypeclass": 113, "uint32": [113, 138, 158, 170, 276, 299, 324, 329, 330, 356, 441, 444, 471, 475, 476, 491, 566, 605, 606, 617, 618, 660, 664, 689, 716, 757, 775, 847, 867, 870, 887, 891, 892, 906, 994, 995, 1028, 1047, 1048, 1063, 1134, 1156, 1157, 1168, 1169, 1223, 1240], "regular": [113, 203, 235, 236, 269, 276, 299, 428, 603, 605, 606, 611, 612, 613, 626, 627, 757, 847, 867, 870, 1154, 1156, 1157, 1162, 1163, 1164, 1177, 1178], "uint64": [113, 191, 276, 299, 329, 330, 446, 475, 476, 565, 757, 847, 867, 891, 892, 1012, 1047, 1048, 1111, 1240], "bigidx": 113, "read": [114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 172, 299, 440, 518, 747, 757, 782, 788, 867, 1001, 1240], "over": [114, 116, 117, 118, 120, 130, 146, 155, 172, 202, 203, 204, 209, 235, 236, 237, 264, 277, 280, 285, 299, 314, 367, 433, 517, 518, 520, 528, 530, 531, 532, 540, 563, 575, 576, 577, 578, 579, 581, 582, 583, 678, 692, 693, 696, 697, 710, 720, 721, 722, 732, 757, 850, 855, 870, 877, 932, 1001, 1088, 1120, 1121, 1123, 1127, 1240], "fetch": [114, 130, 207, 299, 776, 778, 800, 807, 867], "ideal": 114, "read_csv_batch": [114, 770], "tpch": [114, 117], "tables_scale_100": [114, 117], "lineitem": [114, 117, 119], "try_parse_d": [114, 116, 117, 130], "n_row": [115, 116, 117, 122, 124, 128, 130, 133, 134, 135, 204, 299, 788, 867], "handler": [115, 116, 117, 121, 122, 123, 124, 125, 126, 127, 128, 129, 782, 867], "builtin": [115, 116, 117, 121, 122, 123, 124, 125, 126, 127, 128, 129, 782, 867], "stop": [115, 116, 117, 122, 124, 128, 130, 133, 134, 135, 575, 576, 578, 581, 582, 583, 757, 941, 943, 949, 950, 957, 959, 962, 967, 973, 978], "textio": 116, "has_head": [116, 117, 121, 130], "new_column": [116, 117, 121, 130, 230, 231, 299], "comment_prefix": [116, 117, 130], "skip_row": [116, 117, 130], "missing_utf8_is_empty_str": [116, 117, 130], "ignore_error": [116, 117, 126, 130], "n_thread": [116, 117], "8192": 116, "csvencod": [116, 117, 130], "low_memori": [116, 117, 128, 130, 134, 135], "skip_rows_after_head": [116, 117, 130], "row_count_nam": [116, 117, 122, 124, 128, 130, 133, 134, 135], "row_count_offset": [116, 117, 122, 124, 128, 130, 133, 134, 135], "sample_s": [116, 117], "eol_char": [116, 117, 130], "raise_if_empti": [116, 117, 121, 127, 130], "truncate_ragged_lin": [116, 130], "fsspec": [116, 117, 122, 124, 128, 131, 132, 133, 135, 138], "remot": [116, 117, 122, 124], "autogener": [116, 117, 130], "column_x": [116, 117, 130], "enumer": [116, 117, 130, 204, 299], "shorter": [116, 117, 130, 509, 716], "comment": [116, 117, 130], "instanc": [116, 117, 128, 130, 135, 146, 148, 152, 158, 172, 178, 299, 345, 529, 575, 576, 577, 578, 579, 581, 582, 583, 692, 696, 710, 753, 757, 775, 809, 846, 847, 867, 906, 1001, 1240], "escap": [116, 117, 119, 130], "complet": [116, 118, 130, 1221, 1240], "wherea": [116, 118, 130, 234, 299, 403, 417, 545, 546, 572, 757, 800, 807, 822, 867, 973, 987, 1097, 1098, 1240], "would": [116, 117, 130, 324, 487, 520, 528, 563, 683, 757, 886, 1059, 1109, 1221, 1240], "prefer": [116, 117, 120, 130, 149, 172, 203, 209, 235, 236, 285, 299, 428, 520, 757, 867, 1001, 1088, 1240, 1249], "treat": [116, 117, 130, 603, 606, 626, 627, 747, 1154, 1157, 1177, 1178], "10000": [116, 204, 299], "might": [116, 117, 130, 150, 157, 259, 263, 299, 314, 520, 668, 757, 773, 832, 837, 867, 1222, 1240], "issu": [116, 117, 121, 130, 360, 361, 658, 757, 926, 927, 1210, 1240], "iso8601": [116, 117, 130], "succe": [116, 117, 130], "cpu": [116, 117], "system": [116, 117], "wrongli": 116, "done": [116, 117, 130, 136, 152, 156, 158, 206, 299, 313, 315, 345, 552, 679, 757, 772, 775, 804, 867, 906, 1240], "buffer": [116, 117, 118, 170, 203, 299, 995, 1240], "modifi": [116, 117, 130, 150, 152, 172, 194, 202, 203, 271, 299, 325, 402, 420, 603, 611, 612, 626, 757, 876, 972, 990, 1001, 1154, 1162, 1163, 1177, 1199, 1201, 1202, 1240], "upper": [116, 117, 118, 170, 186, 189, 299, 350, 351, 448, 452, 509, 669, 680, 701, 702, 704, 705, 744, 745, 757, 795, 798, 867, 917, 918, 995, 1014, 1018, 1086, 1227, 1240], "bound": [116, 117, 170, 186, 189, 299, 350, 351, 352, 452, 486, 487, 507, 509, 514, 669, 680, 701, 702, 704, 705, 744, 745, 757, 795, 798, 867, 917, 918, 919, 995, 1018, 1058, 1059, 1079, 1086, 1227, 1240], "lossi": [116, 117, 130], "decod": [116, 117, 614], "expens": [116, 117, 128, 130, 134, 135, 147, 149, 186, 187, 189, 190, 203, 209, 234, 235, 236, 237, 264, 265, 299, 314, 520, 572, 757, 795, 796, 798, 799, 822, 838, 867, 1001, 1088, 1240, 1249], "aggreg": [116, 117, 128, 178, 185, 186, 188, 189, 210, 212, 214, 217, 220, 224, 226, 227, 234, 249, 250, 267, 270, 278, 279, 282, 284, 299, 308, 434, 449, 516, 518, 520, 552, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 674, 675, 676, 677, 692, 693, 694, 695, 696, 697, 698, 699, 710, 715, 723, 724, 727, 728, 732, 740, 741, 757, 795, 796, 798, 799, 809, 810, 811, 812, 815, 816, 819, 822, 833, 834, 841, 848, 849, 852, 854, 867, 1015, 1118, 1119, 1120, 1121, 1123, 1126, 1127, 1128, 1240], "parser": 116, "regard": [116, 688], "sens": [116, 122, 124, 133, 216, 269, 299, 552, 757, 814, 867], "particular": [116, 122, 124, 133, 170, 299, 995, 1240], "usernam": [116, 119, 122, 124, 133], "password": [116, 119, 122, 124, 133], "skip": [116, 117, 121, 128, 130, 135, 267, 299, 877, 1088, 1240], "offset": [116, 117, 121, 122, 124, 128, 130, 133, 134, 135, 180, 186, 187, 189, 190, 234, 247, 253, 269, 275, 276, 299, 374, 382, 395, 396, 399, 403, 417, 442, 503, 572, 597, 632, 661, 757, 793, 795, 796, 798, 799, 822, 831, 836, 846, 847, 867, 940, 948, 965, 966, 969, 973, 987, 1009, 1075, 1148, 1183, 1196, 1213, 1240], "row_count": [116, 117, 122, 124, 128, 130, 133, 134, 135], "sampl": [116, 117, 285, 299, 596, 757, 855, 1147, 1240], "estim": [116, 117, 156, 170, 299, 315, 426, 427, 468, 679, 757, 772, 867, 995, 997, 998, 1041, 1240], "alloc": [116, 117, 170, 228, 299, 757, 995, 1240], "encount": [116, 117, 130, 186, 189, 299, 545, 546, 614, 616, 688, 692, 710, 757, 795, 798, 867, 1097, 1098, 1165, 1167, 1240], "window": [116, 117, 130, 186, 187, 189, 190, 234, 299, 367, 403, 417, 425, 426, 427, 518, 520, 552, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 686, 734, 735, 757, 795, 796, 798, 799, 822, 867, 932, 973, 987, 996, 997, 998, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1240], "rn": [116, 117, 130], "go": [116, 117, 130, 259, 299, 609, 1160], "nodataerror": [116, 117, 121, 127, 130, 769], "lazili": [116, 117, 130, 131, 132, 133, 134, 135, 779, 867], "glob": [116, 117, 130, 133, 134, 135], "continu": [116, 128, 368, 560, 596, 757, 933, 1107, 1147, 1240], "benchmark": [116, 128], "50000": 117, "batchedcsvread": [117, 769], "upon": 117, "creation": 117, "gather": [117, 180, 253, 299, 442, 507, 660, 661, 757, 793, 836, 867, 1009, 1079, 1212, 1213, 1240], "next_batch": 117, "big": 117, "interest": 117, "seen_group": 117, "big_fil": 117, "df_current_batch": 117, "partition_df": 117, "partition_bi": [117, 204, 299], "as_dict": [117, 222, 299], "fh": 117, "write_csv": [117, 130, 299], "els": [117, 747], "connectionorcursor": 118, "iter_batch": 118, "execute_opt": 118, "cursor": 118, "client": 118, "odbc": 118, "establish": 118, "resultset": 118, "manner": 118, "veri": [118, 203, 264, 299, 520, 757, 855], "poor": 118, "trip": 118, "still": [118, 119], "intern": [118, 137, 203, 299], "exact": [118, 144, 146, 148, 246, 299, 641, 642, 643, 644, 645, 666, 757, 1194, 1195, 1196], "incom": 118, "read_arrow_batches_from_odbc": 118, "read_database_uri": 118, "wide": [118, 184, 215, 267, 299, 813, 867], "snowflak": [118, 119], "variou": [118, 299, 757, 867, 870, 1240], "facil": 118, "initialis": [118, 152, 867, 1248], "flight": 118, "flightsql": 118, "flight_sql": 118, "about": [118, 596, 603, 611, 612, 626, 757, 1147, 1154, 1162, 1163, 1177, 1240, 1249], "notabl": 118, "dremio": 118, "influxdb": 118, "notic": [118, 299, 867, 1240], "dbapi2": 118, "connectorx": [118, 119, 138], "optimis": [118, 209, 237, 285, 299, 867, 1088, 1135, 1240, 1249], "translat": 118, "conn": 118, "url": [118, 119, 128, 135, 611, 613, 1162, 1164], "test_data": 118, "user_conn": 118, "normalised_scor": 118, "uint8": [118, 143, 145, 158, 258, 259, 267, 299, 360, 361, 567, 658, 673, 757, 775, 867, 870, 926, 927, 1113, 1210, 1240, 1249], "parameteris": 118, "metric": 118, "alchemy_conn": 118, "qmark": 118, "variad": 118, "1000": [118, 121, 170, 258, 276, 299, 847, 867, 982, 1084, 1219, 1240, 1249], "localhost": 118, "5432": 118, "uid": 118, "usr": 118, "pwd": 118, "max_text_s": 118, "max_binary_s": 118, "do_someth": 118, "partition_on": 119, "partition_rang": 119, "partition_num": 119, "dbreadengin": 119, "raw": 119, "warehous": 119, "role": 119, "caller": [119, 216, 299, 509, 809, 814, 850, 855, 867], "respons": [119, 216, 299, 814, 867], "come": [119, 186, 299, 395, 396, 468, 509, 757, 770, 795, 866, 867, 965, 966, 1041, 1240], "transfer": 119, "document": [119, 121, 225, 299, 302, 406, 409, 616, 643, 644, 645, 649, 753, 911, 976, 979, 1167, 1194, 1195, 1196, 1200, 1244], "redshift": 119, "mysql": 119, "mariadb": 119, "clickhous": 119, "oracl": 119, "bigqueri": 119, "pleas": [119, 186, 225, 299, 302, 701, 706, 795, 867, 1244], "github": 119, "sfu": 119, "connector": 119, "destin": 119, "develop": [119, 146, 148], "read_databas": 119, "usual": [119, 374, 940], "urllib": 119, "quote_plu": 119, "word": [119, 639, 640], "3f": [119, 643, 645, 1194, 1196], "20word": 119, "explicitli": [119, 144, 146, 152, 739, 768], "test_tabl": 119, "compani": 119, "testdb": 119, "public": [119, 299, 757, 769, 867, 1240], "myrol": 119, "delta_table_opt": [120, 131], "root": [120, 131, 348, 467, 517, 530, 539, 540, 541, 542, 543, 544, 558, 600, 657, 756, 757, 913, 1150, 1240], "absolut": [120, 131, 132, 139, 140, 141, 142, 306, 425, 426, 427, 757, 872, 996, 997, 998, 1240], "avoid": [120, 236, 299, 309, 757], "year": [120, 131, 186, 206, 234, 269, 299, 386, 387, 399, 400, 403, 417, 418, 572, 575, 576, 577, 578, 579, 581, 582, 583, 700, 701, 702, 703, 704, 705, 744, 745, 757, 795, 804, 822, 867, 952, 953, 969, 970, 973, 987, 988], "2021": [120, 131, 158, 164, 184, 186, 269, 299, 643, 719, 775, 795, 867, 870, 944, 945, 953, 977, 1037, 1194, 1240], "aw": [120, 128, 131, 135], "googl": [120, 131, 132], "service_account": [120, 131], "service_account_json_absolute_path": [120, 131], "az": [120, 131, 132], "adl": [120, 131, 132], "abf": [120, 131, 132], "azure_storage_account_nam": [120, 131, 132], "azure_storage_account_kei": [120, 131, 132], "without_fil": [120, 131, 132], "track": [120, 131, 132, 209, 299, 509, 1248], "sheet_id": [121, 127], "sheet_nam": [121, 127], "xlsx2csv": [121, 138], "openpyxl": [121, 138], "pyxlsb": [121, 138], "xlsx2csv_option": 121, "read_csv_opt": 121, "spreadsheet": [121, 127, 224, 299, 769], "xlsb": 121, "sheetnam": [121, 127], "nor": [121, 127, 238, 299], "fastest": 121, "read_csv": [121, 130], "refin": 121, "significantli": [121, 209, 285, 299, 1088, 1240, 1249], "potenti": [121, 130, 133, 134, 203, 235, 237, 299, 539], "unabl": 121, "julian": 121, "skip_empty_lin": 121, "influenc": [121, 788, 809, 867], "pipelin": 121, "correct": [121, 127, 426, 427, 468, 576, 577, 578, 579, 580, 581, 583, 596, 757, 808, 809, 867, 997, 998, 1041, 1125, 1147, 1240], "known": [121, 146, 509, 575, 576, 577, 578, 579, 581, 582, 583, 757, 850, 855, 1081], "better": [121, 209, 259, 285, 299, 520, 618, 757, 855, 1132, 1135, 1169, 1240], "detect": 121, "memory_map": [122, 128, 133], "greatli": [122, 133], "repeat": [122, 133, 564, 566, 730, 748, 757], "give": [122, 124, 128, 133, 134, 215, 265, 299, 383, 468, 566, 666, 757, 769, 813, 838, 867, 949, 1041, 1240], "That": [122, 808, 809, 867], "filenam": 122, "my_fil": 122, "write_ipc": [122, 299], "read_ndjson": 125, "openoffic": 127, "od": 127, "parallelstrategi": [128, 135], "use_statist": [128, 135], "hive_partit": [128, 135], "retri": [128, 135], "row_group": [128, 135], "hive": [128, 135], "prune": [128, 135, 809, 867], "gcp": [128, 132, 135], "stabl": [128, 157, 162, 164, 191, 238, 263, 299, 446, 513, 757, 773, 813, 832, 837, 867, 1012, 1240], "read_tabl": 128, "scan_parquet": [128, 136], "scan_pyarrow_dataset": [128, 135], "contribut": [128, 577, 579, 581, 583, 757], "with_column_nam": 130, "push": [130, 133, 134, 135, 136], "down": [130, 133, 134, 135, 136, 437, 757, 1007, 1240], "therebi": [130, 133, 134], "realloc": [130, 133, 134, 172, 299, 1001, 1240], "headerless": 130, "my_long_fil": 130, "thing": [130, 137], "less": [130, 206, 299, 470, 515, 635, 757, 804, 867, 1186, 1249], "breezah": 130, "languag": [130, 186, 206, 234, 269, 299, 399, 403, 417, 572, 575, 576, 577, 578, 579, 581, 582, 583, 701, 702, 704, 705, 744, 745, 757, 795, 804, 822, 867, 969, 973, 987], "hard": [130, 808, 809, 867], "mydf": 130, "lambda": [130, 155, 178, 209, 223, 224, 285, 299, 314, 425, 426, 427, 509, 516, 517, 518, 520, 540, 692, 693, 710, 721, 722, 732, 757, 808, 809, 817, 855, 867, 877, 996, 997, 998, 1081, 1088, 1240], "lower": [130, 186, 189, 227, 291, 299, 350, 352, 452, 514, 517, 540, 561, 565, 579, 680, 701, 702, 704, 705, 731, 744, 745, 757, 795, 798, 819, 861, 867, 917, 919, 1018, 1086, 1108, 1111, 1124, 1227, 1240], "simpli": [130, 552, 692, 710, 757], "idx": [130, 186, 204, 276, 299, 509, 795, 847, 867, 1081], "uint16": [130, 360, 361, 658, 757, 870, 926, 927, 1210, 1240], "u16": [130, 146, 1249], "eu": [131, 132], "central": [131, 132, 468, 596, 757, 1041, 1147, 1240], "iceberg": [132, 769], "pyiceberg": [132, 138], "metadata": [132, 186, 187, 189, 190, 234, 299, 572, 757, 795, 796, 798, 799, 822, 867], "secret": [132, 135], "adlf": 132, "my": [132, 136, 650, 1201], "oauth": 132, "token": 132, "ya29": 132, "dr": 132, "afm": 132, "py": 132, "impl": 132, "fsspecfileio": 132, "read_parquet": 135, "east": 135, "allow_pyarrow_filt": 136, "comparison": 136, "dset": 136, "folder": 136, "04": [136, 158, 186, 269, 299, 376, 377, 395, 396, 402, 403, 406, 409, 410, 411, 414, 416, 420, 643, 704, 706, 775, 795, 867, 870, 943, 957, 962, 965, 966, 967, 972, 976, 979, 980, 981, 984, 986, 990, 1194], "seed": [137, 191, 238, 299, 446, 497, 563, 586, 592, 757, 1012, 1069, 1109, 1131, 1143, 1240], "shuffl": [137, 238, 285, 299, 497, 586, 757, 855, 1069, 1131, 1240], "stdout": [138, 152, 184, 299, 531], "platform": 138, "maco": 138, "14": [138, 146, 176, 195, 209, 210, 212, 217, 231, 250, 253, 282, 284, 286, 287, 288, 289, 290, 291, 292, 299, 362, 363, 364, 365, 366, 374, 378, 379, 384, 388, 390, 392, 397, 404, 407, 451, 507, 563, 625, 660, 661, 698, 699, 744, 757, 852, 854, 856, 857, 858, 859, 860, 861, 862, 870, 928, 929, 930, 931, 940, 973, 1019, 1039, 1079, 1136, 1176, 1212, 1213, 1230, 1240], "arm64": 138, "arm": 138, "64bit": [138, 565, 757, 1111, 1240], "main": [138, 779, 867], "oct": 138, "13": [138, 146, 159, 160, 173, 174, 183, 196, 207, 219, 234, 273, 282, 284, 286, 287, 288, 289, 290, 291, 292, 299, 309, 378, 379, 381, 384, 385, 388, 389, 390, 391, 392, 393, 397, 398, 404, 405, 407, 528, 530, 572, 646, 686, 692, 695, 710, 741, 746, 757, 776, 777, 789, 790, 806, 822, 843, 852, 854, 856, 857, 858, 859, 860, 861, 862, 867, 947, 951, 958, 960, 963, 968, 973, 975, 987, 988, 1025, 1028, 1035, 1037, 1088, 1197, 1240], "54": [138, 429, 757, 1249], "clang": 138, "1500": [138, 147], "adbc_driver_manag": 138, "cloudpickl": 138, "hvplot": [138, 225, 299, 302, 1244], "matplotlib": [138, 818, 830, 867], "26": [138, 382, 418, 948], "pydant": 138, "check_row_ord": [139, 140], "check_column_ord": [139, 140], "check_dtyp": [139, 140, 141, 142], "check_exact": [139, 140, 141, 142], "rtol": [139, 140, 141, 142], "atol": [139, 140, 141, 142], "08": [139, 140, 141, 142, 146, 234, 299, 376, 403, 572, 643, 704, 706, 757, 822, 867, 870, 973, 987, 1194], "categorical_as_str": [139, 140, 141, 142], "assert": [139, 140, 141, 142, 144, 146, 148, 234, 299, 769, 870], "assertionerror": [139, 140, 141, 142], "compar": [139, 140, 141, 142, 169, 179, 299, 423, 424, 443, 445, 470, 515, 547, 548, 757, 911, 994, 1134, 1240], "unsort": [139, 140], "exactli": [139, 140, 141, 142, 145, 146, 148, 634, 635, 641, 642, 706, 1142, 1185, 1186, 1192, 1193, 1240], "toler": [139, 140, 141, 142, 206, 299, 804, 867], "inexact": [139, 140, 141, 142], "share": [139, 140, 141, 142, 170, 299, 757, 995, 1240], "assert_series_equ": [139, 142, 994, 1240, 1249], "assert_frame_not_equ": [139, 142], "pytest": [139, 141], "worthwhil": [139, 141], "shorten": [139, 141], "traceback": [139, 140, 141, 142], "tb": [139, 141, 170, 299, 995, 1240], "short": [139, 141], "tend": [139, 141], "unhelpfulli": [139, 141], "assert_frame_equ": [140, 141, 169, 299, 1249], "assert_series_not_equ": [140, 141], "check_nam": [141, 142], "searchstrategi": [143, 145, 146, 148], "null_prob": [143, 146, 148], "percentag": [143, 146, 148, 553, 757, 1102, 1240], "chanc": [143, 146, 148, 1249], "independ": [143, 144, 146, 148], "flag": [143, 299, 588, 603, 611, 612, 626, 757, 786, 808, 809, 867, 1137, 1154, 1162, 1163, 1177, 1240], "hypothesi": [143, 144, 145, 146, 147, 148, 1249], "sampled_from": [143, 1249], "unique_small_int": 143, "ccy": [143, 1249], "gbp": [143, 1249], "eur": [143, 164, 184, 299, 1249], "jpy": [143, 1249], "min_col": [144, 146], "max_col": [144, 146], "standalon": [144, 146, 870], "mincol": 144, "assign": [144, 186, 299, 509, 552, 563, 634, 635, 757, 795, 867, 1081, 1109, 1185, 1186, 1240], "minimum": [144, 145, 146, 148, 178, 217, 218, 299, 425, 426, 427, 534, 546, 555, 563, 727, 728, 757, 815, 867, 961, 996, 997, 998, 1098, 1104, 1109, 1240, 1249], "especi": [144, 571, 757, 788, 867, 1117, 1240], "test_unique_xyz": 144, "assert_someth": 144, "punctuat": 144, "test_special_char_colname_init": 144, "inner_dtyp": [145, 148], "select_from": [145, 148], "min_siz": [145, 146, 148, 1249], "max_siz": [145, 146, 148, 1249], "anoth": [145, 169, 179, 185, 299, 367, 375, 486, 507, 524, 527, 567, 757, 794, 845, 867, 932, 941, 994, 1001, 1058, 1113, 1134, 1240], "randomli": 145, "innermost": 145, "2x": 145, "lst": 145, "11330": 145, "24030": 145, "116": 145, "zz": [145, 148], "uint8_pair": [145, 1249], "uint": [145, 1249], "zip": [145, 1249], "131": 145, "176": 145, "149": [145, 1249], "include_col": 146, "allow_infin": [146, 148], "allowed_dtyp": [146, 148, 1249], "excluded_dtyp": [146, 148], "describ": [146, 184, 299, 1240], "desir": [146, 509, 1081], "n_chunk": [146, 148, 299, 876, 1001, 1240], "randomis": 146, "onto": 146, "pct": 146, "preced": [146, 870], "disallow": [146, 148], "inf": [146, 148, 321, 368, 448, 454, 458, 560, 666, 757, 883, 923, 933, 1014, 1022, 1027, 1086, 1102, 1107, 1227, 1240], "exclud": [146, 148, 186, 299, 358, 361, 452, 757, 795, 867, 1018, 1037, 1240], "usag": [146, 148, 246, 299, 870, 1142, 1240], "deploi": [146, 148], "characterist": [146, 148], "concret": [146, 148], "test_repr": 146, "isinst": [146, 148, 299], "0x11f561580": 146, "0565": 146, "34715": 146, "5844": 146, "33": [146, 216, 299, 584, 757, 814, 867, 1124, 1240], "076854": 146, "3382": 146, "17": [146, 278, 574, 584, 712, 744, 757, 848, 921, 923, 973, 1119, 1240, 1249], "48662": 146, "7540": 146, "836271": 146, "4063": 146, "06": [146, 158, 269, 299, 376, 394, 401, 402, 403, 404, 417, 418, 775, 867, 870, 972, 973, 987], "39092": 146, "1889": 146, "41": [146, 582, 757, 1249], "874455": 146, "15836": 146, "1755e": 146, "575050513": 146, "profil": [147, 149, 778, 867], "balanc": [147, 149, 1249], "set_environ": 147, "polars_hypothesis_profil": [147, 149], "constructor": 148, "max_data_s": 148, "normal": [148, 186, 299, 422, 468, 596, 757, 795, 867, 993, 1041, 1147, 1240], "test_repr_is_valid_str": 148, "experi": 148, "create_list_strategi": [148, 1249], "polars_max_thread": 150, "behind": 150, "lock": 150, "reason": [150, 509, 518, 757], "temporarili": [150, 152, 186, 187, 189, 190, 234, 299, 572, 757, 795, 796, 798, 799, 822, 867], "pyspark": 150, "udf": [150, 155, 209, 223, 280, 285, 299, 314, 520, 556, 678, 722, 757, 817, 850, 855, 867, 877, 1088, 1240], "recommend": [150, 203, 223, 299, 870], "easi": [152, 1249], "restor": 152, "restore_default": 152, "relat": [152, 870], "set_tbl_row": 152, "whatev": 152, "were": [152, 210, 212, 217, 250, 299, 567, 753, 757, 1113, 1240], "enter": 152, "advantag": [152, 223, 299], "set_": 152, "set_verbos": 152, "do_various_th": 152, "cleaner": 152, "breviti": 152, "vein": 152, "durat": [152, 206, 269, 299, 374, 381, 382, 385, 389, 391, 393, 398, 405, 410, 411, 412, 413, 414, 415, 416, 420, 664, 701, 702, 704, 705, 744, 745, 757, 804, 867, 870, 940, 947, 948, 951, 958, 960, 963, 968, 975, 980, 981, 982, 983, 984, 985, 986, 990, 1223, 1240], "set_ascii_t": 152, "write_ascii_frame_to_stdout": 152, "sy": 152, "nan_as_nul": 154, "polarsdatafram": 154, "notimplementederror": 154, "num_row": 154, "get_column": [154, 261, 299], "dtypekind": 154, "inference_s": [155, 209, 299], "256": [155, 209, 299, 1102, 1240], "map_row": [155, 299], "tri": [155, 209, 299], "approxim": [156, 299, 315, 679, 757, 772, 867, 1249], "hyperloglog": [156, 299, 315, 679, 757, 772, 867], "algorithm": [156, 299, 315, 604, 628, 679, 757, 772, 867, 1155, 1179], "cardin": [156, 299, 315, 679, 757, 772, 867], "k": [157, 237, 263, 299, 344, 468, 665, 757, 773, 837, 867, 905, 1041, 1224, 1240], "intoexpr": [157, 185, 186, 187, 188, 189, 190, 234, 240, 241, 244, 248, 263, 273, 274, 278, 299, 313, 339, 342, 343, 448, 452, 479, 480, 489, 498, 499, 500, 501, 552, 567, 587, 589, 590, 599, 604, 628, 633, 634, 635, 641, 642, 675, 677, 683, 685, 686, 687, 688, 690, 692, 695, 696, 699, 703, 710, 724, 728, 733, 736, 739, 741, 757, 773, 794, 795, 796, 797, 798, 799, 822, 824, 825, 828, 832, 837, 843, 844, 848, 867, 900, 903, 904, 1018, 1061, 1113, 1139, 1184, 1185, 1186, 1192, 1193, 1240], "nulls_last": [157, 248, 263, 299, 324, 598, 757, 773, 832, 837, 867, 886, 1240], "smallest": [157, 263, 299, 344, 757, 773, 837, 867, 905, 1240], "largest": [157, 263, 299, 665, 757, 773, 837, 867, 1224, 1240], "bottom": [157, 299, 773, 867], "wors": [157, 263, 299, 773, 832, 837, 867], "search": [157, 206, 263, 299, 509, 604, 628, 773, 804, 832, 837, 867, 1155, 1179], "top_k": [157, 299, 344, 757, 773, 867, 905, 1240], "columnnameorselector": [158, 165, 167, 215, 222, 224, 237, 257, 265, 266, 267, 299, 775, 783, 784, 813, 838, 839, 867], "strict": [158, 299, 340, 345, 603, 607, 625, 643, 644, 645, 647, 649, 757, 775, 867, 901, 906, 994, 1134, 1154, 1158, 1176, 1194, 1195, 1196, 1198, 1200, 1240], "due": [158, 186, 206, 234, 237, 269, 299, 309, 345, 382, 399, 403, 417, 467, 539, 541, 542, 543, 544, 558, 572, 575, 576, 577, 578, 579, 581, 582, 583, 657, 701, 702, 704, 705, 744, 745, 757, 775, 795, 804, 822, 867, 906, 948, 969, 973, 987, 1240], "overflow": [158, 299, 345, 360, 361, 625, 647, 658, 757, 775, 867, 906, 926, 927, 1176, 1198, 1210, 1240], "2020": [158, 164, 184, 225, 234, 299, 302, 377, 382, 402, 406, 409, 410, 411, 412, 413, 414, 415, 416, 572, 643, 644, 645, 757, 775, 822, 867, 870, 943, 948, 972, 976, 979, 980, 981, 982, 983, 984, 985, 986, 1194, 1195, 1196], "u8": [158, 257, 258, 267, 299, 567, 673, 757, 775, 867, 870, 1113, 1217, 1240, 1249], "to_dict": [158, 299, 775, 867], "as_seri": [158, 255, 299, 775, 867, 933, 1107, 1240], "tempor": [158, 186, 187, 189, 190, 203, 234, 236, 237, 256, 299, 350, 452, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 757, 769, 775, 795, 796, 798, 799, 822, 867, 870, 917, 1018, 1037, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1126, 1127, 1128, 1240], "greater": [159, 206, 299, 443, 445, 596, 623, 624, 635, 652, 757, 804, 867, 1147, 1174, 1175, 1186, 1203, 1240], "cheap": [159, 160, 241, 274, 299, 776, 777, 825, 844, 867, 916, 920, 1240], "deepcopi": [159, 299, 776, 867, 916, 1240], "appl": [161, 194, 205, 229, 232, 255, 281, 282, 284, 286, 287, 288, 289, 290, 291, 292, 299, 569, 609, 636, 757, 803, 820, 851, 852, 854, 856, 857, 858, 859, 860, 861, 862, 867, 1160, 1187], "banana": [161, 255, 282, 284, 286, 287, 288, 289, 290, 291, 292, 299, 569, 609, 636, 757, 852, 854, 856, 857, 858, 859, 860, 861, 862], "orang": [161, 281, 282, 284, 286, 287, 289, 291, 292, 299, 851, 852, 854, 856, 857, 859, 861, 862], "pairwis": [162, 299], "pearson": [162, 299, 468, 596, 688, 757, 1041, 1147, 1240], "correl": [162, 299, 688, 734], "coeffici": [162, 299, 596, 757, 1147, 1240], "corrcoef": [162, 299], "percentil": [164, 299, 934, 1240], "summari": [164, 299, 934, 1240], "deem": [164, 299], "glimps": [164, 192, 299], "median": [164, 224, 299, 433, 577, 757, 845, 867, 934, 1122, 1240], "str2": [164, 299], "usd": [164, 184, 299, 1249], "null_count": [164, 167, 299, 367, 757, 867, 932, 934, 1011, 1240], "266667": [164, 299], "std": [164, 299, 581, 757, 867, 934, 1126, 1240], "101514": [164, 299], "707107": [164, 299, 426, 581, 757, 997, 1240], "more_column": [165, 171, 242, 266, 299, 428, 708, 757, 783, 787, 827, 839, 867], "subset": [167, 220, 265, 299, 784, 838, 867], "preserv": [167, 175, 185, 188, 205, 209, 259, 260, 299, 372, 373, 434, 482, 593, 757, 784, 791, 803, 867, 937, 938, 1005, 1054, 1144, 1222, 1240], "behavior": [167, 299, 486, 507, 519, 709, 718, 757, 784, 867, 933, 1058, 1079, 1087, 1107, 1240], "all_horizont": [167, 299, 674, 784, 867], "is_nul": [167, 299, 757, 784, 867, 1240], "null_equ": [169, 179, 299, 994, 1134, 1240], "sizeunit": [170, 299, 995, 1240], "heap": [170, 299, 757, 995, 1240], "its": [170, 299, 376, 403, 417, 599, 747, 757, 911, 942, 973, 987, 995, 1240], "bitmap": [170, 299, 995, 1240], "structarrai": [170, 299, 995, 1240], "constant": [170, 234, 299, 374, 431, 757, 822, 867, 940, 995, 1002, 1240], "unchang": [170, 299, 519, 567, 664, 757, 808, 809, 850, 855, 867, 995, 1087, 1113, 1223, 1240], "capac": [170, 246, 299, 995, 1142, 1240], "ffi": [170, 299, 995, 1240], "kb": [170, 299, 995, 1240], "mb": [170, 299, 995, 1240], "gb": [170, 299, 995, 1240], "revers": [170, 299, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 517, 540, 541, 542, 558, 657, 691, 757, 867, 924, 925, 926, 927, 928, 929, 930, 931, 1240], "1_000_000": [170, 299, 995, 1240], "25888898": [170, 299], "689577102661133": [170, 299], "long": [171, 215, 267, 299, 787, 813, 867], "letter": [171, 283, 293, 299, 428, 604, 612, 628, 708, 757, 787, 853, 863, 867, 870, 1155, 1163, 1179], "onlin": [172, 299, 1001, 1240], "rerun": [172, 299, 1001, 1240], "conveni": [172, 299, 876, 1001, 1240], "Not": [173, 299, 461, 463, 757, 789, 867], "fillnullstrategi": [174, 299, 433, 757, 790, 867, 1004, 1240], "matches_supertyp": [174, 299, 790, 867], "forward": [174, 206, 244, 299, 395, 433, 439, 502, 589, 757, 790, 804, 828, 867, 965, 1004, 1074, 1139, 1240], "consecut": [174, 299, 338, 433, 439, 602, 757, 790, 867, 1004, 1153, 1240], "fill_nan": [174, 299, 757, 867, 1240], "intoexprcolumn": [175, 299, 344, 350, 351, 352, 434, 497, 502, 553, 586, 589, 638, 639, 640, 665, 680, 701, 702, 704, 705, 716, 717, 744, 745, 747, 757, 791, 828, 867, 905, 917, 918, 919, 1069, 1074, 1102, 1189, 1190, 1191, 1224, 1240], "constraint": [175, 299, 434, 467, 539, 541, 542, 543, 544, 558, 657, 747, 757, 791, 867], "behav": [175, 299, 434, 520, 639, 640, 757, 791, 867], "eq": [175, 299, 424, 434, 757, 791, 867, 1240], "implicitli": [175, 299, 434, 747, 757, 791, 867], "is_in": [175, 299, 757, 1240], "get_column_index": [176, 299], "reduct": [178, 299], "supercast": [178, 299], "parent": [178, 299], "rule": [178, 299, 604, 628, 1155, 1179], "arithmet": [178, 299], "zip_with": [178, 299, 1240], "foo11": [178, 299], "bar22": [178, 299], "nth": [180, 253, 299, 442, 635, 661, 757, 793, 836, 867, 1009, 1186, 1213, 1240], "th": [180, 253, 299, 442, 498, 596, 661, 757, 793, 836, 867, 1009, 1070, 1147, 1213, 1240], "retriev": [181, 299, 329, 330, 475, 476, 653, 891, 892, 1047, 1048, 1204], "max_items_per_column": [184, 299], "max_colname_length": [184, 299], "return_as_str": [184, 299, 531], "preview": [184, 299], "few": [184, 299], "exce": [184, 299], "ellipsi": [184, 299], "head": [184, 208, 252, 299, 313, 472, 757, 807, 867, 1043, 1211, 1240], "tail": [184, 192, 299, 313, 596, 757, 867, 1013, 1147, 1240], "more_bi": [185, 188, 222, 248, 299, 599, 757, 794, 797, 832, 867], "groupbi": [185, 224, 299, 314, 520, 678, 722, 757, 867], "consist": [185, 188, 222, 299, 643, 794, 797, 867, 876, 1001, 1194, 1240], "regardless": [185, 188, 299, 616, 747, 1167], "agg": [185, 186, 189, 224, 234, 299, 308, 434, 436, 441, 444, 520, 598, 599, 672, 722, 757, 778, 779, 786, 788, 794, 795, 796, 798, 799, 818, 822, 826, 830, 867, 870], "Or": [185, 186, 206, 234, 248, 269, 278, 299, 552, 572, 599, 701, 702, 704, 705, 744, 745, 747, 757, 794, 795, 804, 822, 832, 848, 867], "index_column": [186, 187, 189, 190, 234, 299, 572, 757, 795, 796, 798, 799, 822, 867], "timedelta": [186, 187, 189, 190, 206, 234, 269, 299, 399, 403, 417, 572, 575, 576, 577, 578, 579, 581, 582, 583, 701, 702, 704, 705, 744, 745, 757, 795, 796, 798, 799, 804, 822, 867, 870, 954, 961, 969, 973, 987, 1097, 1098, 1240], "period": [186, 187, 189, 190, 234, 299, 403, 417, 425, 426, 427, 553, 572, 701, 702, 704, 705, 744, 745, 757, 795, 796, 798, 799, 822, 867, 973, 987, 996, 997, 998, 1102, 1240], "include_boundari": [186, 189, 299, 795, 798, 867], "closedinterv": [186, 187, 189, 190, 234, 299, 452, 572, 575, 576, 577, 578, 579, 581, 582, 583, 701, 702, 704, 705, 744, 745, 757, 795, 796, 798, 799, 822, 867, 1018, 1240], "label": [186, 299, 368, 560, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 757, 795, 818, 867, 933, 1107, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1126, 1127, 1128, 1240], "start_bi": [186, 189, 299, 795, 798, 867], "startbi": [186, 189, 299, 795, 798, 867], "check_sort": [186, 187, 189, 190, 234, 299, 572, 757, 795, 796, 798, 799, 822, 867], "dynamicgroupbi": [186, 189, 299], "member": [186, 299, 795, 867, 1026, 1240], "descript": [186, 299, 795, 867], "ascend": [186, 187, 189, 190, 234, 299, 572, 576, 577, 578, 579, 581, 583, 757, 795, 796, 798, 799, 822, 867], "dynam": [186, 189, 299, 509, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 757, 795, 798, 867, 1081, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1126, 1127, 1128, 1240], "matter": [186, 187, 189, 190, 203, 234, 236, 237, 256, 299, 572, 639, 640, 757, 795, 796, 798, 799, 822, 867], "interv": [186, 187, 189, 190, 234, 269, 299, 368, 403, 417, 448, 452, 560, 572, 575, 576, 577, 578, 579, 581, 582, 583, 701, 702, 704, 705, 744, 745, 757, 795, 796, 798, 799, 822, 867, 933, 946, 949, 950, 957, 959, 962, 964, 967, 970, 971, 973, 978, 987, 988, 1014, 1018, 1107, 1240], "_lower_boundari": [186, 299, 795, 867], "_upper_boundari": [186, 299, 795, 867], "harder": [186, 189, 299, 795, 798, 867], "inclus": [186, 187, 189, 190, 234, 299, 452, 572, 575, 576, 577, 578, 579, 581, 582, 583, 633, 634, 680, 701, 702, 704, 705, 716, 717, 744, 745, 757, 795, 796, 798, 799, 822, 867, 1018, 1184, 1185, 1240], "datapoint": [186, 189, 299, 795, 798, 867], "boundari": [186, 299, 350, 351, 352, 448, 757, 795, 867, 917, 918, 919, 1014, 1240], "mondai": [186, 189, 299, 417, 419, 795, 798, 867, 987, 989], "tuesdai": [186, 189, 299, 795, 798, 867], "wednesdai": [186, 189, 299, 795, 798, 867], "thursdai": [186, 189, 299, 795, 798, 867], "fridai": [186, 189, 299, 795, 798, 867], "saturdai": [186, 189, 299, 795, 798, 867], "sundai": [186, 189, 299, 419, 795, 798, 867, 989], "earliest": [186, 189, 299, 402, 403, 417, 643, 645, 703, 795, 798, 867, 972, 973, 987, 1194, 1196], "weekli": [186, 189, 299, 417, 795, 798, 867, 987], "week": [186, 189, 206, 234, 269, 299, 399, 403, 417, 419, 572, 575, 576, 577, 578, 579, 581, 582, 583, 701, 702, 704, 705, 706, 744, 745, 757, 795, 798, 804, 822, 867, 870, 969, 973, 987, 989], "sorted": [186, 187, 189, 190, 234, 299, 572, 757, 795, 796, 798, 799, 822, 867], "verifi": [186, 187, 189, 190, 234, 299, 572, 757, 795, 796, 798, 799, 822, 867], "incorrectli": [186, 187, 189, 190, 234, 299, 509, 572, 757, 795, 796, 798, 799, 822, 867], "incorrect": [186, 187, 189, 190, 234, 299, 420, 518, 572, 588, 757, 795, 796, 798, 799, 822, 850, 855, 867, 990, 1137, 1240], "roll": [186, 187, 190, 299, 395, 396, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 686, 734, 735, 757, 795, 796, 799, 867, 965, 966, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1240], "re": [186, 202, 259, 299, 395, 396, 795, 867, 965, 966, 1248], "1d": [186, 206, 234, 269, 299, 375, 399, 403, 411, 414, 417, 420, 572, 575, 576, 577, 578, 579, 581, 582, 583, 701, 702, 704, 705, 706, 719, 744, 745, 757, 795, 804, 822, 867, 870, 941, 949, 956, 969, 973, 978, 981, 984, 987], "set_index": [186, 299, 795, 867], "resampl": [186, 299, 795, 867], "reset_index": [186, 299, 795, 867], "though": [186, 299, 753, 795, 867], "unlik": [186, 299, 795, 867], "evenli": [186, 299, 795, 867], "upsampl": [186, 299, 795, 867], "1n": [186, 206, 234, 269, 299, 399, 403, 417, 572, 575, 576, 577, 578, 579, 581, 582, 583, 701, 702, 704, 705, 744, 745, 757, 795, 804, 822, 867, 969, 973, 987], "nanosecond": [186, 206, 234, 269, 299, 399, 403, 404, 415, 417, 572, 575, 576, 577, 578, 579, 581, 582, 583, 701, 702, 704, 705, 706, 744, 745, 757, 795, 804, 822, 867, 969, 973, 974, 985, 987], "1u": [186, 206, 234, 269, 299, 399, 403, 417, 572, 575, 576, 577, 578, 579, 581, 582, 583, 701, 702, 704, 705, 744, 745, 757, 795, 804, 822, 867, 969, 973, 987], "microsecond": [186, 203, 206, 234, 236, 237, 256, 269, 299, 399, 403, 412, 417, 572, 575, 576, 577, 578, 579, 581, 582, 583, 701, 702, 703, 704, 705, 706, 743, 744, 745, 757, 795, 804, 818, 822, 867, 870, 969, 973, 982, 987], "1m": [186, 206, 234, 269, 299, 399, 403, 416, 417, 572, 575, 576, 577, 578, 579, 581, 582, 583, 701, 702, 704, 705, 744, 745, 757, 795, 804, 822, 867, 969, 973, 982, 983, 985, 986, 987], "millisecond": [186, 206, 234, 269, 299, 384, 392, 399, 403, 413, 417, 572, 575, 576, 577, 578, 579, 581, 582, 583, 701, 702, 704, 705, 706, 744, 745, 757, 795, 804, 822, 867, 870, 969, 973, 983, 987], "minut": [186, 206, 234, 269, 299, 384, 388, 390, 397, 399, 403, 404, 414, 417, 572, 575, 576, 577, 578, 579, 581, 582, 583, 701, 702, 703, 704, 705, 706, 743, 744, 745, 757, 795, 804, 822, 867, 870, 969, 973, 984, 987], "1h": [186, 206, 234, 269, 299, 382, 399, 403, 417, 572, 575, 576, 577, 578, 579, 581, 582, 583, 701, 702, 704, 705, 744, 745, 757, 795, 804, 822, 867, 948, 950, 969, 973, 987], "hour": [186, 206, 234, 269, 299, 388, 390, 392, 397, 399, 403, 404, 411, 417, 572, 575, 576, 577, 578, 579, 581, 582, 583, 701, 702, 703, 704, 705, 706, 743, 744, 745, 757, 795, 804, 822, 867, 870, 969, 973, 981, 987], "1w": [186, 206, 234, 269, 299, 399, 403, 417, 572, 575, 576, 577, 578, 579, 581, 582, 583, 701, 702, 704, 705, 744, 745, 757, 795, 804, 822, 867, 969, 973, 987], "1mo": [186, 206, 234, 269, 299, 377, 395, 396, 399, 402, 403, 410, 417, 572, 575, 576, 577, 578, 579, 581, 582, 583, 701, 702, 704, 705, 744, 745, 757, 795, 804, 822, 867, 943, 964, 965, 966, 969, 970, 971, 972, 973, 980, 987, 988], "month": [186, 206, 234, 269, 299, 380, 395, 396, 399, 403, 417, 572, 575, 576, 577, 578, 579, 581, 582, 583, 700, 701, 702, 703, 704, 705, 706, 744, 745, 757, 795, 804, 822, 867, 946, 965, 966, 969, 973, 987], "1q": [186, 206, 234, 269, 299, 399, 403, 417, 572, 575, 576, 577, 578, 579, 581, 582, 583, 701, 702, 704, 705, 744, 745, 757, 795, 804, 822, 867, 969, 973, 987], "quarter": [186, 206, 234, 269, 299, 399, 403, 417, 572, 575, 576, 577, 578, 579, 581, 582, 583, 701, 702, 704, 705, 744, 745, 757, 795, 804, 822, 867, 969, 973, 987], "1y": [186, 206, 234, 269, 299, 399, 403, 417, 572, 575, 576, 577, 578, 579, 581, 582, 583, 701, 702, 704, 705, 744, 745, 757, 795, 804, 822, 867, 969, 973, 987], "1i": [186, 206, 234, 269, 299, 399, 572, 575, 576, 577, 578, 579, 581, 582, 583, 757, 795, 804, 822, 867, 969], "3d12h4m25": [186, 206, 234, 269, 299, 403, 417, 572, 701, 702, 704, 705, 744, 745, 757, 795, 804, 822, 867, 973, 987], "correspond": [186, 206, 234, 259, 269, 299, 387, 399, 403, 417, 520, 563, 572, 575, 576, 577, 578, 579, 581, 582, 583, 701, 702, 704, 705, 744, 745, 757, 778, 795, 804, 822, 867, 953, 969, 973, 987, 1109, 1240], "daylight": [186, 206, 234, 269, 299, 374, 382, 399, 403, 417, 572, 575, 576, 577, 578, 579, 581, 582, 583, 701, 702, 704, 705, 706, 744, 745, 757, 795, 804, 822, 867, 948, 969, 973, 987], "10i": [186, 234, 299, 572, 757, 795, 822, 867], "datetime_rang": [186, 299, 375, 377, 395, 396, 399, 402, 403, 410, 411, 412, 413, 414, 415, 416, 417, 420, 575, 576, 578, 581, 582, 583, 701, 757, 795, 867, 940, 941, 943, 948, 949, 950, 956, 957, 959, 962, 965, 966, 967, 969, 972, 973, 978, 980, 981, 982, 983, 984, 985, 986, 987], "30m": [186, 299, 403, 417, 795, 867, 973, 987], "lower_bound": [186, 299, 350, 352, 452, 757, 795, 867, 917, 919, 1018, 1227, 1240], "upper_bound": [186, 299, 350, 351, 452, 509, 757, 795, 867, 917, 918, 1018, 1086, 1240], "bys": [186, 299, 795, 867], "int_rang": [186, 267, 276, 285, 299, 680, 689, 795, 809, 847, 855, 867], "2i": [186, 299, 795, 867], "3i": [186, 299, 795, 867], "a_agg_list": [186, 299, 795, 867], "rollinggroupbi": [187, 190, 234, 299], "group_bi": [188, 220, 224, 298, 299, 308, 434, 436, 441, 444, 518, 520, 598, 599, 672, 722, 757, 778, 779, 786, 788, 797, 818, 830, 866, 867, 870], "group_by_dynam": [189, 234, 299, 798, 822, 867], "_lower_bound": [189, 299, 798, 867], "_upper_bound": [189, 299, 798, 867], "seed_1": [191, 299, 446, 757, 1012, 1240], "seed_2": [191, 299, 446, 757, 1012, 1240], "seed_3": [191, 299, 446, 757, 1012, 1240], "hash": [191, 299, 757, 1240], "Its": [191, 299, 446, 757, 1012, 1240], "u64": [191, 276, 299, 446, 565, 757, 818, 847, 867, 1012, 1240], "10783150408545073287": [191, 299], "1438741209321515184": [191, 299], "10047419486152048166": [191, 299], "2047317070637311557": [191, 299], "ab": [192, 208, 252, 273, 299, 653, 655, 757, 843, 867, 1013, 1043, 1211, 1240], "grown": [194, 299], "insert_column": [195, 299], "intermedi": [197, 299, 802, 867, 1249], "linear": [197, 227, 291, 299, 451, 477, 523, 561, 579, 686, 687, 731, 757, 802, 819, 861, 867, 1017, 1049, 1108, 1124, 1240], "666667": [197, 270, 287, 299, 425, 757, 802, 841, 857, 867, 996, 1240], "333333": [197, 299, 467, 539, 757, 802, 867, 1102, 1128, 1240], "mask": [198, 200, 299, 340, 453, 455, 456, 459, 460, 466, 554, 555, 603, 607, 757, 901, 1005, 1011, 1018, 1020, 1023, 1024, 1029, 1030, 1038, 1103, 1104, 1135, 1154, 1158, 1231, 1240], "visual": [198, 200, 299], "scalar": [201, 209, 235, 299, 587, 678, 719, 722, 757, 1040, 1133, 1240], "With": [201, 244, 299, 502, 575, 576, 577, 578, 579, 581, 582, 583, 589, 757, 828, 867, 1040, 1074, 1139, 1240], "buffer_s": [203, 299], "fit": [203, 246, 267, 299, 591, 733, 757, 1141, 1142, 1240], "signific": [203, 209, 299, 314, 520, 585, 757, 1088, 1130, 1240], "4x": [203, 299], "materialis": [203, 204, 235, 236, 237, 299], "rows_by_kei": [203, 236, 299], "iter_row": [204, 235, 236, 237, 299], "17_500": [204, 299], "klmnoopqrstuvwxyz": [204, 299], "__name__": [204, 299], "7500": [204, 299], "15_000": [204, 299], "record_batch": [204, 299], "to_arrow": [204, 299, 1240], "to_batch": [204, 299], "date32": [204, 299], "large_str": [204, 254, 260, 299], "15000": [204, 299], "2500": [204, 299], "left_on": [205, 206, 268, 299, 803, 804, 840, 867], "right_on": [205, 206, 268, 299, 803, 804, 840, 867], "suffix": [205, 206, 240, 273, 278, 299, 309, 342, 461, 463, 464, 465, 517, 540, 541, 543, 544, 552, 558, 569, 609, 639, 642, 757, 803, 804, 824, 843, 845, 848, 867, 870, 903, 1160, 1193], "_right": [205, 206, 299, 803, 804, 867], "joinvalid": [205, 299, 803, 867], "join_nul": [205, 299, 803, 867], "semi": [205, 299, 803, 867], "anti": [205, 299, 803, 855, 867, 1132, 1135, 1240], "cross": [205, 299, 803, 867], "outer_coalesc": [205, 299, 803, 867], "coalesc": [205, 268, 299, 643, 803, 840, 867, 1194], "cartisian": [205, 299, 803, 867], "many_to_mani": [205, 299, 803, 867], "one_to_on": [205, 299, 803, 867], "one_to_mani": [205, 299, 803, 867], "many_to_on": [205, 299, 803, 867], "join_asof": [205, 299, 803, 867], "other_df": [205, 299], "ham_right": [205, 299, 803, 867], "by_left": [206, 299, 804, 867], "by_right": [206, 299, 804, 867], "asofjoinstrategi": [206, 299, 804, 867], "allow_parallel": [206, 299, 803, 804, 867], "force_parallel": [206, 299, 803, 804, 867], "asof": [206, 299, 804, 867], "rather": [206, 299, 531, 560, 571, 652, 757, 804, 867, 1107, 1117, 1203, 1240], "asof_join": [206, 299], "distanc": [206, 299, 448, 757, 804, 867, 1014, 1240], "plan": [206, 207, 299, 774, 778, 782, 786, 803, 804, 826, 830, 867], "forc": [206, 209, 285, 299, 509, 803, 804, 855, 867, 1088, 1240], "gdp": [206, 299, 804, 867], "2016": [206, 299, 804, 867], "2017": [206, 299, 804, 867], "2018": [206, 299, 402, 804, 867, 972], "2019": [206, 299, 804, 867], "jan": [206, 299, 804, 867], "1st": [206, 299, 804, 867], "4164": [206, 299, 804, 867], "4411": [206, 299, 804, 867], "4566": [206, 299, 804, 867], "4696": [206, 299, 804, 867], "set_sort": [206, 234, 269, 299, 572, 757, 804, 822, 867, 1240], "popul": [206, 299, 804, 867], "12th": [206, 299, 804, 867], "82": [206, 299, 804, 867], "66": [206, 268, 299, 582, 673, 757, 804, 840, 867, 1124, 1240], "83": [206, 299, 804, 867], "52": [206, 273, 299, 418, 584, 757, 804, 843, 867], "request": [207, 299], "describe_plan": [207, 299], "unoptim": [207, 299], "describe_optimized_plan": [207, 299], "show_graph": [207, 299, 867], "un": [207, 299], "graphviz": [207, 299, 830, 867], "much": [209, 267, 285, 299, 367, 486, 507, 520, 617, 618, 722, 757, 855, 932, 1058, 1079, 1088, 1168, 1169, 1240], "intens": [209, 285, 299, 552, 757, 1088, 1240], "materi": [209, 285, 299, 778, 818, 855, 867, 870, 1088, 1240], "parallelis": [209, 285, 299, 1088, 1240], "achiev": [209, 285, 299, 520, 618, 757, 933, 1088, 1107, 1169, 1240], "best": [209, 285, 299, 520, 757, 1088, 1240], "black": [209, 299, 339, 341, 342, 343], "arbitrarili": [209, 299], "rearrang": [209, 299], "transform": [209, 299, 518, 648, 650, 651, 757], "lru_cach": [209, 299, 520, 757, 1088, 1240], "column_1": [209, 264, 299], "axi": [210, 212, 215, 217, 250, 299, 681, 682, 813, 867], "max_horizont": [210, 299, 723], "null_strategi": [212, 250, 299], "nullstrategi": [212, 250, 299], "mean_horizont": [212, 299], "propag": [212, 250, 299, 424, 545, 546, 548, 602, 757, 1097, 1098, 1153, 1240], "spam": [212, 299, 612, 1163], "ignore_nul": [213, 251, 299, 310, 312, 425, 426, 427, 602, 674, 676, 757, 874, 875, 996, 997, 998, 1153, 1230, 1240], "id_var": [215, 299, 813, 867], "value_var": [215, 299, 813, 867], "variable_nam": [215, 299, 813, 867], "value_nam": [215, 299, 813, 867], "unpivot": [215, 299, 813, 867], "massag": [215, 299, 813, 867], "measur": [215, 299, 813, 867], "steve": [216, 299, 814, 867], "elis": [216, 299, 814, 867], "bob": [216, 299, 814, 867], "ag": [216, 299, 814, 867], "anna": [216, 299, 814, 867], "megan": [216, 299, 814, 867], "thoma": [216, 299, 814, 867], "21": [216, 250, 299, 575, 576, 578, 581, 582, 583, 712, 757, 814, 867, 870], "min_horizont": [217, 299, 727, 736], "what": [220, 225, 299, 302, 518, 604, 628, 757, 1155, 1179, 1230, 1240, 1244], "pack": [220, 299], "expr_unique_subset": [220, 299], "df_nuniqu": [220, 299], "df_agg_nuniqu": [220, 299], "include_kei": [222, 237, 299], "offer": [223, 299, 556, 757, 817, 867], "fulli": [223, 238, 299], "cast_str_to_int": [223, 299, 817, 867], "col_nam": [223, 299, 817, 867], "tdf": [223, 299, 817, 867], "aggregate_funct": [224, 299], "pivotagg": [224, 299], "sort_column": [224, 299], "section": [224, 299, 603, 611, 612, 626, 701, 702, 704, 705, 744, 745, 1154, 1162, 1163, 1177], "predefin": [224, 299], "predict": [224, 228, 269, 299], "transpos": [224, 299], "discoveri": [224, 299], "col1": [224, 264, 299, 867, 1249], "col2": [224, 264, 299, 867, 1249], "col3": [224, 299, 1249], "tanh": [224, 299, 757, 1240], "998347": [224, 299], "964028": [224, 299], "999954": [224, 299], "unique_column_valu": [224, 299], "defer": [225, 299, 302, 1244], "galleri": [225, 299, 302, 1244], "scatter": [225, 299, 302, 1136, 1240], "speci": [225, 299, 302], "setosa": [225, 299, 302], "versicolor": [225, 299, 302], "stock_1": [225, 299, 302], "stock_2": [225, 299, 302], "interpol": [227, 291, 299, 433, 523, 561, 579, 731, 757, 819, 861, 867, 1108, 1124, 1240], "rollinginterpolationmethod": [227, 291, 299, 561, 579, 731, 757, 819, 861, 867, 1108, 1124, 1240], "midpoint": [227, 291, 299, 561, 579, 731, 757, 819, 861, 867, 1108, 1124, 1240], "replace_column": [231, 299], "t_0": [234, 299, 572, 575, 576, 577, 578, 579, 581, 582, 583, 757, 822, 867], "t_1": [234, 299, 572, 575, 576, 577, 578, 579, 581, 582, 583, 757, 822, 867], "t_n": [234, 299, 572, 575, 576, 577, 578, 579, 581, 582, 583, 757, 822, 867], "43": [234, 299, 361, 572, 582, 757, 822, 867], "strptime": [234, 299, 402, 572, 757, 822, 867, 972], "2d": [234, 259, 299, 399, 572, 719, 757, 822, 867, 940, 946], "sum_a": [234, 299, 572, 757, 822, 867], "min_a": [234, 299, 572, 757, 822, 867], "max_a": [234, 299, 572, 757, 822, 867], "by_pred": [235, 299], "accord": [235, 299, 519, 560, 701, 702, 704, 705, 744, 745, 757, 953, 1107, 1240], "mutual": [235, 299], "exclus": [235, 299, 673, 680, 716, 717, 757], "clariti": [235, 299], "toomanyrowsreturnederror": [235, 299, 769], "norowsreturnederror": [235, 299, 769], "inherit": [235, 299], "rowserror": [235, 299, 769], "high": [237, 299, 560, 757, 1107, 1240], "cost": [237, 299], "reoconstruct": [237, 299], "defaultdict": [237, 299], "assum": [237, 299, 808, 809, 850, 855, 867], "with_replac": [238, 299, 497, 586, 757, 1069, 1131, 1240], "ordereddict": [239, 299, 739, 823, 867], "named_expr": [240, 241, 273, 274, 299, 736, 739, 824, 825, 843, 844, 867], "threshold": [240, 299, 824, 867], "set_auto_structifi": [240, 273, 299, 824, 843, 867], "auto_structifi": [240, 273, 299, 824, 843, 867], "is_odd": [240, 299, 824, 867], "_is_odd": [240, 299, 824, 867], "sequenti": [241, 274, 299, 825, 844, 867], "fill_valu": [244, 245, 267, 299, 589, 590, 757, 828, 829, 867, 1139, 1140, 1240], "opposit": [244, 299, 502, 589, 757, 828, 867, 1074, 1139, 1240], "lag": [244, 299, 502, 589, 686, 757, 828, 867, 1074, 1139, 1240], "shift": [245, 299, 370, 481, 553, 590, 686, 757, 829, 867, 935, 1053, 1102, 1140, 1240], "shrink": [246, 299, 591, 757, 1141, 1142, 1240], "hold": [246, 299], "ddof": [249, 270, 299, 581, 583, 601, 671, 688, 690, 734, 735, 738, 746, 757, 833, 841, 867, 1126, 1128, 1151, 1229, 1240], "deviat": [249, 299, 426, 581, 601, 738, 757, 833, 867, 997, 1151, 1240], "degre": [249, 270, 299, 562, 581, 583, 601, 671, 682, 688, 690, 734, 735, 738, 746, 757, 833, 841, 867, 1126, 1128, 1151, 1229, 1240], "freedom": [249, 270, 299, 581, 583, 601, 671, 688, 690, 734, 735, 738, 746, 757, 833, 841, 867, 1126, 1128, 1151, 1229, 1240], "divisor": [249, 270, 299, 581, 583, 601, 671, 688, 690, 734, 735, 738, 746, 757, 833, 841, 867, 1126, 1128, 1151, 1229, 1240], "816497": [249, 299], "gather_everi": [253, 299, 661, 757, 836, 867, 1213, 1240], "mostli": [254, 299, 434, 757], "categoricaltyp": [254, 299], "fruit": [255, 299, 569, 609, 636, 757, 1160, 1187], "car": [255, 299, 569, 757], "beetl": [255, 299, 569, 757], "audi": [255, 299, 569, 757], "28": [255, 299, 307, 402, 420, 757, 972, 990, 1249], "300": [255, 299, 1120, 1121, 1123, 1240], "drop_first": [257, 299], "dummi": [257, 299, 1217, 1240], "foo_1": [257, 299], "foo_2": [257, 299], "bar_3": [257, 299], "bar_4": [257, 299], "ham_a": [257, 299], "ham_b": [257, 299], "instantiat": [258, 299, 1219, 1240], "from_repr": [258, 299, 1219, 1240], "df_from_str_repr": [258, 299], "eval": [258, 299, 707, 1219, 1240], "indexord": [259, 299], "fortran": [259, 299], "downstream": [259, 299, 588, 757, 1137, 1240], "applic": [259, 299, 520, 575, 576, 577, 578, 579, 581, 582, 583, 757], "prevent": [259, 299, 309, 360, 361, 467, 539, 658, 757, 867, 926, 927, 1210, 1240], "reshap": [259, 299, 484, 757, 1056, 1240], "ll": [259, 299], "u1": [259, 299], "f4": [259, 299], "view": [259, 299, 520, 757, 1221, 1240], "recarrai": [259, 299], "rec": [259, 299], "use_pyarrow_extension_arrai": [260, 299, 1222, 1240], "extens": [260, 299, 1222, 1240], "sent": [260, 299, 1221, 1222, 1240], "pandas_df1": [260, 299], "pandas_df2": [260, 299], "pandas_df2_pa": [260, 299], "na": [260, 299, 636, 1222, 1240], "four": [262, 299], "five": [262, 299, 1249], "bottom_k": [263, 299, 665, 757, 837, 867, 1224, 1240], "header_nam": [264, 299], "column_nam": [264, 299], "perhap": [264, 299], "column_2": [264, 299], "name_gener": [264, 299], "base_nam": [264, 299], "my_column_": [264, 299], "my_column_0": [264, 299], "my_column_1": [264, 299], "my_column_2": [264, 299], "new_id": [264, 299], "uniquekeepstrategi": [265, 299, 838, 867], "kept": [265, 299, 838, 867], "decompos": [266, 299, 839, 867], "t_a": [266, 299, 839, 867], "t_b": [266, 299, 839, 867], "t_c": [266, 299, 839, 867], "t_d": [266, 299, 839, 867], "womp": [266, 299, 839, 867], "t_": [266, 299, 839, 867], "t_struct": [266, 299, 839, 867], "step": [267, 299, 680, 716, 717], "unstackdirect": [267, 299], "pivot": [267, 299], "phase": [267, 299], "subject": [267, 299], "ascii_uppercas": [267, 299], "h": [267, 299, 307, 406, 409, 591, 643, 645, 649, 757, 1194, 1196, 1200], "x_0": [267, 299, 425, 426, 427, 757, 996, 997, 998, 1240], "x_1": [267, 299], "y_0": [267, 299, 425, 426, 427, 757, 996, 997, 998, 1240], "y_1": [267, 299], "z_0": [267, 299], "z_1": [267, 299], "include_nul": [268, 299, 840, 867], "syntact": [268, 299, 567, 674, 676, 689, 691, 694, 709, 713, 714, 715, 718, 723, 725, 726, 727, 729, 730, 731, 736, 738, 740, 742, 746, 748, 757, 840, 867, 1113, 1150, 1240], "sugar": [268, 299, 567, 674, 676, 689, 691, 694, 709, 713, 714, 715, 718, 723, 725, 726, 727, 729, 730, 731, 736, 738, 740, 742, 746, 748, 757, 840, 867, 1113, 1150, 1240], "400": [268, 299, 412, 413, 415, 840, 867, 1120, 1121, 1123, 1240], "600": [268, 299, 412, 413, 415, 840, 867, 870], "700": [268, 299, 840, 867], "new_df": [268, 299, 840, 867], "time_column": [269, 299], "frequenc": [269, 299], "date_rang": [269, 299, 380, 383, 400, 408, 419, 946, 964, 970, 971, 988, 989], "forward_fil": [269, 299, 358, 361, 757], "varianc": [270, 299, 427, 468, 583, 671, 746, 757, 841, 867, 998, 1041, 1128, 1229, 1240], "grow": [271, 299], "not_": [273, 299, 462, 757, 843, 867, 1240], "not_c": [273, 299, 843, 867], "diff": [273, 299, 410, 411, 412, 413, 414, 415, 416, 498, 757, 843, 867, 980, 981, 982, 983, 984, 985, 986, 1070, 1240], "_diff": [273, 299, 843, 867], "row_nr": [275, 299, 846, 867], "meth": [275, 299, 846, 867], "1001": [276, 299, 847, 867], "1002": [276, 299, 847, 867], "named_agg": [278, 848], "_sum": [278, 848], "_mean_squar": [278, 848], "b_sum": [278, 848], "c_mean_squar": [278, 848], "sub": [280, 285, 329, 330, 331, 332, 335, 757, 891, 892, 893, 894, 897], "map_group": [280, 678, 850], "toward": [281, 471, 491, 689, 691, 757, 851, 1042, 1063, 1240], "nr": [283, 293, 853, 863], "triangl": [285, 855], "group_df": [285, 855], "maxim": [286, 322, 757, 856, 884, 1240], "833333": [287, 857], "minim": [289, 323, 330, 476, 591, 599, 757, 859, 885, 892, 1048, 1092, 1141, 1240], "overview": [299, 757, 769, 867, 1240, 1249], "frameinittyp": [299, 867], "entri": [299, 867, 1248], "mydatafram": 299, "df4": 299, "df5": 299, "df6": 299, "approx_n_uniqu": [299, 757, 867], "corr": 299, "drop_in_plac": 299, "drop_nul": [299, 372, 757, 867, 937, 1240], "estimated_s": [299, 1240], "explod": [299, 436, 552, 568, 757, 867, 1114, 1240], "find_idx_by_nam": 299, "fold": [299, 529, 685, 692, 693, 696, 697, 732], "frame_equ": 299, "group_by_rol": [299, 867], "groupby_dynam": [299, 867], "groupby_rol": [299, 867], "hash_row": 299, "hstack": 299, "insert_at_idx": 299, "is_dupl": [299, 757, 1240], "is_empti": [299, 1240], "is_uniqu": [299, 757, 1240], "iter_column": 299, "iter_slic": 299, "melt": [299, 867], "merge_sort": [299, 867], "n_uniqu": [299, 757, 1240], "pipe": [299, 757, 867], "plot": [299, 818, 830, 867], "quantil": [299, 560, 579, 757, 867, 1107, 1124, 1240], "replace_at_idx": 299, "select_seq": [299, 867], "shift_and_fil": [299, 757, 867, 1240], "shrink_to_fit": [299, 1240], "take_everi": [299, 757, 867, 1240], "to_dummi": [299, 1240], "to_numpi": [299, 518, 757, 1240], "to_panda": [299, 1240], "to_struct": [299, 612], "unnest": [299, 368, 560, 570, 612, 613, 634, 635, 655, 757, 867, 933, 1081, 1107, 1116, 1185, 1186, 1240], "unstack": 299, "with_columns_seq": [299, 867], "with_row_count": [299, 867], "write_avro": 299, "write_databas": 299, "write_delta": 299, "write_excel": 299, "write_ipc_stream": 299, "write_json": 299, "write_parquet": 299, "cum_prod": [307, 365, 757, 930, 1240], "ghi": [307, 612, 757, 870, 1163], "94": [308, 757], "to_uppercas": [309, 543, 613, 757], "confus": [310, 461, 463, 628, 757], "kleen": [310, 312, 674, 676, 757, 874, 875, 1240], "bitwis": [311, 551, 673, 674, 675, 676, 677, 757], "upcast": [313, 757], "skip_nul": [314, 520, 757, 877, 1088, 1240], "pass_nam": [314, 520, 757], "mapelementsstrategi": [314, 520, 757], "thread_loc": [314, 520, 757], "map_el": [314, 518, 673, 757, 877, 1240], "unknown": [314, 520, 611, 719, 757, 1162], "stage": [314, 757], "code": [314, 339, 341, 342, 343, 520, 588, 757, 788, 806, 867, 1137, 1240], "gil": [314, 520, 757], "invers": [316, 317, 318, 319, 320, 321, 757, 878, 879, 880, 881, 882, 883, 1240], "cosin": [316, 317, 353, 354, 518, 757, 878, 879, 921, 922, 1240], "570796": [316, 318, 757, 878, 880, 1240], "hyperbol": [317, 319, 321, 354, 595, 663, 757, 879, 881, 883, 922, 1146, 1215, 1240], "sine": [318, 319, 518, 594, 595, 757, 880, 881, 1145, 1146, 1240], "881374": [319, 757, 881, 1240], "tangent": [320, 321, 662, 663, 757, 882, 883, 1214, 1215, 1240], "785398": [320, 681, 682, 757, 882, 1240], "arg_wher": [325, 757], "subarrai": [327, 328, 889, 890], "i8": [336, 380, 384, 388, 390, 392, 394, 397, 400, 401, 404, 418, 419, 508, 591, 730, 733, 748, 757, 898, 935, 946, 950, 962, 964, 971, 974, 988, 989, 1080, 1115, 1227, 1240], "seen": [338, 439, 757], "substr": [339, 342, 343, 603, 609, 626, 627, 633, 634, 635, 636, 870, 900, 903, 904, 1154, 1160, 1177, 1178, 1184, 1185, 1186, 1187], "ends_with": [339, 343, 603, 636, 870, 1187], "yellow": [339, 341, 342, 343], "x00": [339, 341, 342, 343], "xff": [339, 341, 342, 343], "contains_with_lit": 339, "contains_with_expr": 339, "transferencod": [340, 341, 607, 608, 901, 902, 1158, 1159], "hex": [340, 341, 607, 608, 647, 901, 902, 1158, 1159, 1198], "base64": [340, 341, 607, 608, 901, 902, 1158, 1159], "code_encoded_hex": 341, "000000": 341, "ffff00": 341, "0000ff": 341, "anywher": [342, 343, 643, 644, 645, 1194, 1195, 1196], "ends_with_lit": 342, "ends_with_expr": 342, "starts_with_lit": 343, "starts_with_expr": 343, "complex": [344, 367, 665, 757, 905, 932, 1224, 1240], "frac": [344, 425, 426, 427, 596, 665, 757, 905, 996, 997, 998, 1147, 1224, 1240], "to_fram": [346, 383, 403, 408, 417, 643, 933, 1107, 1132, 1135, 1185, 1186, 1194, 1240], "259921": [348, 757, 913, 1240], "587401": [348, 757], "numericliter": [350, 351, 352, 757, 917, 918, 919, 1240], "temporalliter": [350, 351, 352, 757, 917, 918, 919, 955, 956, 1240], "outsid": [350, 757, 917, 1240], "clip": [351, 352, 757, 918, 919, 1240], "543081": [354, 757, 922, 1240], "cotang": [355, 757, 923, 1240], "cumul": [357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 691, 692, 693, 694, 695, 696, 697, 698, 699, 757, 924, 925, 926, 927, 928, 929, 930, 931, 1240], "cum_count_revers": [357, 757], "cum_max_revers": [358, 757], "cum_max_all_fil": [358, 757], "cum_min_revers": [359, 757], "cum_prod_revers": [360, 757], "cum_sum_revers": [361, 757], "value_cum_sum": [361, 757], "value_cum_sum_all_fil": [361, 757], "cum_count": [362, 757], "cum_max": [363, 757, 928, 1240], "cum_min": [364, 757, 929, 1240], "cum_sum": [366, 450, 656, 695, 698, 757, 801, 867, 931, 1040, 1240], "min_period": [367, 425, 426, 427, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 734, 735, 757, 932, 996, 997, 998, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1126, 1127, 1128, 1240], "slide": [367, 757, 932, 1240], "slot": [367, 370, 481, 757, 932, 935, 1053, 1240], "realli": [367, 604, 628, 757, 932, 1155, 1179, 1240], "visit": [367, 757, 932, 1240], "left_clos": [368, 560, 757, 933, 1107, 1240], "include_break": [368, 560, 757, 933, 1107, 1240], "bin": [368, 448, 560, 647, 673, 750, 757, 933, 1014, 1107, 1198, 1234, 1240], "discret": [368, 370, 422, 448, 481, 498, 560, 757, 933, 935, 993, 1014, 1053, 1070, 1107, 1240], "plu": [368, 513, 757, 933, 1085, 1107, 1240], "endpoint": [368, 560, 575, 576, 577, 578, 579, 581, 582, 583, 757, 933, 1107, 1240], "observ": [368, 425, 426, 427, 560, 757, 933, 996, 997, 998, 1107, 1240], "fall": [368, 560, 757, 933, 1018, 1107, 1240], "qcut": [368, 757, 933, 1240], "breakpoint": [368, 448, 560, 757, 933, 1014, 1107, 1240], "brk": [368, 560, 757], "foo_bin": [368, 560, 757], "radian": [369, 681, 757], "720": [369, 562, 757], "540": [369, 562, 757], "360": [369, 562, 757], "180": [369, 562, 757], "null_behavior": [370, 481, 757, 935, 1053, 1240], "nullbehavior": [370, 481, 757, 935, 1053, 1240], "drop_nan": [373, 757, 938, 1240], "utc": [374, 377, 379, 382, 402, 643, 645, 870, 940, 943, 948, 972, 1194, 1196], "vari": [374, 940, 1249], "rare": [374, 940], "countri": [374, 940], "switch": [374, 940], "samoa": [374, 940], "apia": [374, 940], "did": [374, 940], "2011": [374, 940], "dst_offset": [374, 940], "2012": [374, 940], "replace_time_zon": [374, 379, 382, 944, 945, 977], "pacif": [374, 940], "11h": [374, 940], "13h": [374, 940], "lose": [375, 941], "time_unit_m": [375, 941], "time_unit_n": [375, 941], "naiv": [376, 942, 1196], "compon": [376, 404, 643, 645, 706, 942, 974, 1194, 1196], "resolv": 376, "tm": [376, 870], "456000": [376, 942], "101000": 376, "d1": 376, "d2": 376, "d3": 376, "europ": [377, 382, 402, 943, 948, 972], "london": [377, 382, 402, 943, 948, 972], "gmt": [377, 382, 402, 943, 948, 972], "bst": [377, 382, 402, 943, 948, 972], "1978": [378, 379, 384, 387, 388, 390, 392, 397, 404, 407, 421], "2024": [378, 379, 384, 388, 390, 392, 397, 404, 407, 706, 870], "500_000": [378, 379, 384, 388, 390, 392, 397, 404, 407], "2065": [378, 379, 384, 388, 390, 392, 397, 404, 407], "60_000": [378, 379, 384, 388, 390, 392, 397, 404, 407], "060": [378, 379, 384, 388, 390, 392, 397, 404, 407], "weekdai": [380, 400], "ordinal_dai": [380, 419], "day_of_month": [380, 400, 419], "day_of_year": [380, 400, 419], "356": [380, 400, 419], "357": [380, 400, 419], "358": [380, 400, 419], "359": [380, 400, 419], "total_dai": [381, 947], "base_utc_offset": [382, 948], "0m": [382, 948], "epochtimeunit": [383, 712, 949], "unix": [383, 712, 949], "epoch_n": [383, 949], "epoch_": [383, 949], "978307200000000": [383, 408, 949, 978], "978307200": [383, 949], "978393600000000": [383, 408, 949, 978], "978393600": [383, 949], "978480000000000": [383, 408, 949, 978], "978480000": [383, 949], "total_hour": [385, 951], "leap": [386, 399, 952, 969], "2002": [386, 399, 952, 969, 991], "iso": [387, 418, 419, 953, 988, 989], "1977": [387, 421], "1979": [387, 421], "calendar_year": [387, 421], "1976": [387, 421], "500000": [388, 957], "60000": 388, "total_microsecond": [389, 958], "total_millisecond": [391, 960], "total_minut": [393, 963], "think": [395, 396, 965, 966], "vectoris": [395, 396, 965, 966], "tseri": [395, 396, 965, 966], "monthend": [395, 965], "rollforward": [395, 965], "monthbegin": [396, 966], "rollback": [396, 966], "500000000": [397, 967], "60000000": 397, "total_nanosecond": [398, 968], "minu": [399, 969], "dictat": [399, 757, 969], "2005": [399, 969], "date_plus_1i": [399, 969], "1y2mo": [399, 969], "date_min": 399, "1998": [399, 969], "1999": [399, 870, 969], "2003": [399, 712, 969], "2004": [399, 969], "2006": [399, 969], "new_dat": 399, "ordin": [400, 563, 757, 970, 1109, 1240], "366": [400, 970], "use_earliest": [402, 417, 643, 645, 703, 972, 987, 1194, 1196], "ambigu": [402, 403, 417, 643, 645, 703, 972, 973, 987, 1194, 1196], "convert_time_zon": [402, 972], "london_timezon": [402, 972], "amsterdam": [402, 972], "london_to_amsterdam": [402, 972], "cet": [402, 972], "cest": [402, 972], "ts_local": [402, 972], "brussel": [402, 972], "half": [403, 425, 426, 427, 757, 973, 996, 997, 998, 1240], "localis": [403, 417, 973, 987], "dst": [403, 417, 973, 987], "cst": [403, 417, 973, 987], "cdt": [403, 417, 973, 987], "225": [403, 417], "10m": [403, 417, 973, 987], "milli": [404, 974], "micro": [404, 974], "total_second": [405, 975], "to_str": [406, 976], "datetime_str": [406, 409], "timestamp_n": [408, 978], "timestamp_m": 408, "978307200000": 408, "978393600000": 408, "978480000000": 408, "strftime": [409, 979], "days_diff": 410, "hours_diff": 411, "200m": [412, 413, 415], "milliseconds_diff": [412, 413, 415], "200": [412, 413, 415, 567, 757, 1113, 1120, 1121, 1123, 1240], "200000": [412, 809, 867], "800": [412, 413, 415], "minutes_diff": 414, "1440": [414, 984], "200000000": 415, "seconds_diff": 416, "safe": [417, 565, 757, 973, 987, 1111, 1196, 1221, 1240], "truncate_str": 417, "truncate_td": 417, "53": [418, 988], "time_unit_u": 420, "32971": [420, 990], "32974": [420, 990], "32976": [420, 990], "iso_year": 421, "pk": [422, 757, 993, 1240], "probabl": [422, 560, 757, 993, 1107, 1240], "459148": [422, 757], "754888": [422, 757], "span": [425, 426, 427, 757, 996, 997, 998, 1240], "half_lif": [425, 426, 427, 757, 996, 997, 998, 1240], "adjust": [425, 426, 427, 596, 757, 996, 997, 998, 1147, 1240], "exponenti": [425, 426, 427, 429, 557, 757, 996, 997, 998, 999, 1240], "weight": [425, 426, 427, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 596, 757, 996, 997, 998, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1126, 1127, 1128, 1147, 1240], "decai": [425, 426, 427, 757, 996, 997, 998, 1240], "term": [425, 426, 427, 757, 996, 997, 998, 1240], "mass": [425, 426, 427, 757, 996, 997, 998, 1240], "gamma": [425, 426, 427, 757, 996, 997, 998, 1240], "foral": [425, 426, 427, 757, 996, 997, 998, 1240], "geq": [425, 426, 427, 757, 996, 997, 998, 1240], "theta": [425, 426, 427, 757, 996, 997, 998, 1240], "life": [425, 426, 427, 757, 996, 997, 998, 1240], "exp": [425, 426, 427, 757, 996, 997, 998, 1240], "ln": [425, 426, 427, 757, 996, 997, 998, 1240], "smooth": [425, 426, 427, 757, 996, 997, 998, 1240], "factor": [425, 426, 427, 664, 757, 996, 997, 998, 1223, 1240], "leq": [425, 426, 427, 757, 996, 997, 998, 1240], "imbal": [425, 426, 427, 757, 996, 997, 998, 1240], "ew": [425, 426, 427, 757, 996, 997, 998, 1240], "w_i": [425, 426, 427, 757, 996, 997, 998, 1240], "recurs": [425, 426, 427, 757, 996, 997, 998, 1240], "y_t": [425, 426, 427, 757, 996, 997, 998, 1240], "y_": [425, 426, 427, 757, 996, 997, 998, 1240], "x_t": [425, 426, 427, 757, 996, 997, 998, 1240], "x_2": [425, 426, 427, 757, 996, 997, 998, 1240], "428571": [425, 757, 996, 1240], "bia": [426, 427, 468, 580, 596, 757, 997, 998, 1041, 1125, 1147, 1240], "unbias": [426, 427, 757, 997, 998, 1240], "963624": [426, 757, 997, 1240], "928571": [427, 757, 998, 1240], "wildcard": [428, 692, 693, 696, 697, 710, 732, 757], "regex": [428, 526, 603, 605, 606, 609, 611, 612, 613, 626, 627, 636, 708, 757, 870, 1154, 1156, 1157, 1160, 1162, 1163, 1164, 1177, 1178, 1187], "aa": [428, 603, 708, 757, 1154], "ba": [428, 636, 708, 757, 870], "cc": [428, 708, 757], "718282": [429, 757, 999, 1240], "389056": [429, 757, 999, 1240], "59815": [429, 757], "expand": [430, 525, 526, 566, 757, 870, 1000, 1240], "pythonliter": [431, 757, 1002, 1089, 1090, 1091, 1092, 1240], "extrem": [431, 574, 757, 1002, 1119, 1240], "group_col": [434, 672, 757], "g1": [434, 672, 757], "g2": [434, 672, 757], "lt": [434, 672, 757, 1240], "gte": [434, 672, 757], "n_1": [434, 757], "n_2": [434, 757], "n_3": [434, 757], "exprlistnamespac": [436, 757], "divis": [438, 666, 757], "truediv": [438, 757], "9774092659964970114": [446, 757], "13614470193936745724": [446, 757], "1101441246220388612": [446, 757], "11638928888656214026": [446, 757], "13382926553367784577": [446, 757], "bin_count": [448, 757, 1014, 1240], "include_categori": [448, 757, 1014, 1240], "include_breakpoint": [448, 757, 1014, 1240], "occurr": [448, 455, 456, 459, 460, 670, 757, 1014, 1023, 1024, 1029, 1030, 1228, 1240], "interpolationmethod": [451, 757, 1017, 1240], "regrid": [451, 757], "grid": [451, 757], "df_original_grid": [451, 757], "grid_point": [451, 757], "df_new_grid": [451, 757], "conflat": [452, 757], "finit": [454, 666, 688, 757, 1022, 1240], "is_first_distinct": [455, 757, 1023, 1240], "optional_memb": [457, 757, 1026, 1240], "infinit": [458, 666, 757, 1027, 1240], "is_last_distinct": [459, 757, 1029, 1240], "_isnan": [461, 757], "b_isnan": [461, 757], "negat": [462, 549, 757, 1100, 1240], "_is_not_nan": [463, 757], "b_is_not_nan": [463, 757], "_not_nul": [464, 757], "a_not_nul": [464, 757], "b_not_nul": [464, 757], "_isnul": [465, 757], "a_isnul": [465, 757], "b_isnul": [465, 757], "chain": [467, 539, 541, 542, 543, 544, 558, 657, 747, 757], "undo": [467, 532, 539, 541, 542, 558, 657, 757], "fisher": [468, 596, 757, 1041, 1147, 1240], "fourth": [468, 757, 1041, 1240], "subtract": [468, 656, 757, 1041, 1240], "distribut": [468, 596, 757, 1041, 1147, 1240], "elimin": [468, 757, 1041, 1240], "bias": [468, 596, 757, 1041, 1147, 1240], "scipi": [468, 596, 757, 1041, 1147, 1240, 1244], "stat": [468, 596, 757, 1041, 1147, 1240], "153061": [468, 757], "sublist": [475, 476, 478, 481, 485, 486, 487, 488, 489, 490, 498, 503, 506, 507, 509, 1026, 1047, 1048, 1050, 1053, 1057, 1058, 1059, 1060, 1061, 1062, 1070, 1075, 1078, 1079, 1081, 1240], "membership": [478, 1050], "number_of_two": 480, "blindli": [483, 1055], "worth": [483, 1055], "enough": [483, 596, 757, 1055, 1147, 1240], "rank": [483, 688, 707, 757, 1055, 1240], "concat_list": [483, 707], "exprnamespac": 484, "flat": [484, 568, 757, 1056, 1114, 1240], "null_on_oob": [486, 507, 1058, 1079], "cheaper": [486, 507, 1058, 1079], "x_y": 489, "symmetr": [500, 1072], "sdiff": 500, "taken": [503, 632, 1075, 1183], "n_field_strategi": [509, 1081], "tostructstrategi": [509, 1081], "first_non_nul": [509, 1081], "max_width": [509, 1081], "field_0": [509, 1081], "field_1": [509, 1081], "field_n": [509, 1081], "pre": [509, 520, 560, 730, 733, 748, 757, 1107, 1240], "obtain": 509, "ok": 509, "longest": 509, "n0": 509, "n1": 509, "logarithm": [511, 512, 513, 757, 1083, 1084, 1085, 1240], "584963": [511, 757], "30103": [512, 757], "60206": [512, 757], "natur": [513, 757, 1085, 1240], "693147": [513, 757, 1083, 1085, 1240], "098612": [513, 757, 1083, 1085, 1240], "386294": [513, 757, 1085, 1240], "lowest": [514, 757], "9223372036854775808": [514, 757], "agg_list": [516, 518, 757], "map_batch": [516, 720, 757, 808, 867], "keep_nam": [517, 757], "a_revers": [517, 540, 542, 569, 657, 757], "b_revers": [517, 540, 542, 569, 657, 757], "rstrip": [517, 540, 757], "_revers": [517, 540, 542, 569, 657, 757], "is_elementwis": [518, 757], "whole": [518, 598, 599, 611, 757, 855, 867, 1162], "elementwis": [518, 573, 574, 575, 576, 578, 582, 757, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1126, 1127, 1128, 1240], "third": [518, 757], "parti": [518, 757], "book": [518, 757], "bug": [518, 520, 757, 808, 809, 850, 855, 867, 1088, 1240], "argmax": [518, 757], "remap": [519, 757, 1087, 1240], "lookup": [519, 753, 757, 1087, 1240], "discourag": [520, 757], "loop": [520, 757], "a_times_2": [520, 757], "tip": [520, 757], "again": [520, 757], "exprmetanamespac": [524, 527], "foo_bar2": [524, 527], "raise_if_undetermin": 528, "computeerror": [528, 625, 647, 769, 1176, 1198], "e_filt": [528, 530], "e_sum_ov": [528, 530], "e_sum_slic": [528, 530], "tree": 531, "modulu": [535, 757], "xlog2": [537, 557, 757], "reverse_": [541, 558, 757], "reverse_a": [541, 558, 757], "reverse_b": [541, 558, 757], "lowercas": [543, 648, 1199], "uppercas": [544, 651, 1202], "to_lowercas": 544, "poison": [545, 546, 757, 1097, 1098, 1240], "nanmax": [545, 546, 757, 1097, 1098, 1240], "inequ": [547, 757], "ne": [548, 757, 1240], "more_expr": [552, 683, 685, 686, 687, 757], "mapping_strategi": [552, 757], "windowmappingstrategi": [552, 757], "group_to_row": [552, 757], "outcom": [552, 757], "group_dtyp": [552, 757], "warn": [552, 575, 576, 577, 578, 579, 581, 582, 583, 757], "flatten": [552, 757], "_max": [552, 757], "c_max": [552, 757], "_min": [552, 757], "c_min": [552, 757], "percent": [553, 757, 1102, 1240], "090909": [553, 757], "peak": [554, 555, 757, 1103, 1104, 1240], "extract_numb": [556, 757], "digit": [556, 584, 585, 612, 757, 1129, 1130, 1157, 1163, 1240, 1249], "scale_negative_even": [556, 757], "expon": [557, 757, 1240], "allow_dupl": [560, 757, 1107, 1240], "duplicateerror": [560, 757, 769, 1107, 1240], "happen": [560, 757, 1107, 1240], "cut": [560, 757, 1107, 1240], "566371": [562, 757], "424778": [562, 757], "283185": [562, 757], "141593": [562, 757, 878, 1240], "rankmethod": [563, 757, 1109, 1240], "ti": [563, 757, 1109, 1240], "competit": [563, 757, 1109, 1240], "highest": [563, 669, 688, 757, 867, 1109, 1240], "immedi": [563, 680, 684, 701, 702, 704, 705, 716, 717, 730, 733, 739, 744, 745, 748, 757, 1109, 1240], "nodefault": [567, 757, 1113, 1240], "_nodefault": [567, 757, 1113, 1240], "no_default": [567, 757, 1113, 1240], "fruits_revers": [569, 757], "cars_revers": [569, 757], "rle_id": [570, 757, 1116, 1240], "rle": [571, 757, 1117, 1240], "a_r": [571, 757], "ab_r": [571, 757], "window_s": [573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 734, 735, 757, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1240], "rolling_map": [573, 757, 1118, 1240], "multipli": [573, 574, 575, 576, 578, 581, 582, 583, 757, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1126, 1127, 1128, 1240], "rolling_sum": [574, 757, 1119, 1240], "nansum": [574, 757, 1119, 1240], "warn_if_unsort": [575, 576, 577, 578, 579, 581, 582, 583, 757], "travers": [575, 576, 578, 582, 757, 1120, 1121, 1123, 1126, 1127, 1128, 1240], "vector": [575, 576, 578, 582, 757, 1120, 1121, 1123, 1126, 1127, 1128, 1240], "5h": [575, 576, 577, 578, 579, 581, 582, 583, 757], "df_tempor": [575, 576, 578, 581, 582, 583, 757], "closur": [575, 576, 581, 582, 583, 757], "rolling_row_max": [575, 757], "2h": [575, 576, 578, 581, 582, 583, 757], "rolling_row_mean": [576, 757], "rolling_row_min": [578, 757], "625": [579, 757], "skew": [580, 757, 1125, 1240], "381802": [580, 757, 1125, 1240], "47033": [580, 757, 1125, 1240], "38180177416060584": [580, 757, 1125, 1240], "47033046033698594": [580, 757, 1125, 1240], "433013": [581, 757, 833, 867], "rolling_row_std": [581, 757], "rolling_row_sum": [582, 757], "39": [582, 712, 757], "63": [582, 757], "69": [582, 757], "1875": [583, 757, 841, 867], "rolling_row_var": [583, 757], "figur": [585, 757, 830, 867, 1130, 1240], "01234": [585, 757, 1130, 1240], "012": [585, 757, 1130, 1240], "1200": [585, 757, 1130, 1240], "searchsortedsid": [587, 757, 1133, 1240], "leftmost": [587, 757, 1133, 1240], "rightmost": [587, 757, 1133, 1240], "six": [587, 757], "extrema": [591, 757, 1141, 1240], "112": [591, 757, 1249], "129": [591, 757], "8589934592": [591, 757], "1073741824": [591, 757], "175201": [595, 757, 1146, 1240], "unimod": [596, 757, 1147, 1240], "skewtest": [596, 757, 1147, 1240], "speak": [596, 757, 1147, 1240], "g_1": [596, 757, 1147, 1240], "m_3": [596, 757, 1147, 1240], "m_2": [596, 757, 1147, 1240], "m_i": [596, 757, 1147, 1240], "sum_": [596, 757, 1147, 1240], "texttt": [596, 757, 1147, 1240], "k_3": [596, 757, 1147, 1240], "k_2": [596, 757, 1147, 1240], "sqrt": [596, 681, 682, 757, 1147, 1240], "343622": [596, 757], "value1": [599, 757], "value2": [599, 757], "attain": [599, 757], "414214": [600, 757, 1150, 1240], "sensit": [603, 612, 626, 1154, 1163, 1177], "ilmsuxu": [603, 611, 612, 626, 1154, 1162, 1163, 1177], "default_match": 603, "insensitive_match": 603, "crab": [603, 1154], "dog": [603, 648, 651, 687, 1154, 1199, 1202], "rab": [603, 629, 1154, 1180], "ascii_case_insensit": [604, 628, 1155, 1179], "aho": [604, 628, 1155, 1179], "corasick": [604, 628, 1155, 1179], "insensit": [604, 612, 626, 628, 870, 1154, 1155, 1163, 1177, 1179], "set_fmt_str_length": [604, 628, 1155, 1179], "lyric": [604, 628, 1155, 1179], "everybodi": [604, 628, 1155, 1179], "tell": [604, 628, 1155, 1179], "me": [604, 628, 1155, 1179], "feel": [604, 628, 1155, 1179], "love": [604, 628, 1155, 1179], "tonight": [604, 628, 1155, 1179], "success": [605, 606, 612, 1156, 1157, 1163], "overlap": [605, 606, 612, 1156, 1157, 1163], "bla": [606, 612, 1157, 1163], "asd": [606, 612, 1157, 1163], "678": [606, 612, 1157, 1163], "910t": [606, 612, 1157, 1163], "count_digit": 606, "dbc": [606, 1157], "3xy": [606, 1157], "1zy3": [606, 1157], "strings_hex": 608, "666f6f": [608, 1159], "626172": [608, 1159], "mango": [609, 636, 1160, 1187], "has_suffix": 609, "le": [609, 757, 1240], "nu": 609, "group_index": [611, 1162], "captur": [611, 613, 1162, 1164], "nthose": [611, 1162], "nodd": [611, 1162], "nthe": [611, 1162], "odd": 611, "vote": [611, 613, 1162, 1164], "ballon_dor": [611, 613, 1162, 1164], "404": [611, 613, 1162, 1164], "ref": [611, 613, 1162, 1164], "candid": [611, 613, 1162, 1164], "messi": [611, 613, 1162, 1164], "ronaldo": [611, 1162], "haystack": [612, 1163], "email": [612, 1163], "real": [612, 1163], "some_account": [612, 1163], "somewher": [612, 1163], "net": [612, 1163], "jkl": [612, 1163], "uvw": [612, 1163], "co": [612, 757, 1163, 1240], "uk": [612, 1163], "address": 612, "xi": [612, 1163], "quantifi": [612, 1163], "email_part": [612, 1163], "extracted_nr": 612, "910": [612, 1163], "unnam": [613, 1164], "weghorst": [613, 1164], "candi": 613, "json_path_match": [614, 1165], "jsonpath": [614, 616, 1165, 1167], "json_decod": [615, 1166], "json_path": [616, 1167], "json_val": [616, 1167], "len_char": [617, 622, 1168, 1173], "_o": [617, 618, 1168, 1169], "caf\u00e9": [617, 618, 1168, 1169], "345": [617, 618, 1168, 1169], "\u6771\u4eac": [617, 618, 1168, 1169], "n_byte": [617, 618], "n_char": [617, 618], "fill_char": [620, 623, 624, 630, 1171, 1174, 1175, 1181], "justifi": [620, 630, 1171, 1181], "pad_end": [620, 624, 1171, 1175], "strip_chars_start": [621, 639, 641, 1172], "pad": [623, 624, 652, 1174, 1175, 1203], "reach": [623, 624, 652, 1174, 1175, 1203], "pad_start": [623, 630, 652, 1174, 1181, 1203], "cow": [623, 624, 1174, 1175], "monkei": [623, 624, 1174, 1175], "hippopotamu": [623, 624, 1174, 1175], "zfill": [624, 673, 757, 1175], "radix": [625, 647, 1176, 1198], "parseerror": [625, 647, 1176, 1198], "becom": 625, "to_integ": [625, 1176], "silent": [625, 647, 1176, 1198], "replace_al": [626, 1177], "citi": 626, "philadelphia": 626, "season": 626, "spring": 626, "summer": 626, "autumn": 626, "winter": 626, "weather": [626, 1177], "raini": [626, 1177], "sunni": [626, 1177], "cloudi": 626, "snowi": 626, "foggi": [626, 1177], "123abc": [626, 1177], "abc456": [626, 1177], "abcabc": [627, 1178], "123a123": [627, 1178], "bc": [627, 740, 1178], "replace_with": [628, 1179], "broadcast": [628, 870, 1179], "removes_pronoun": 628, "man": [629, 1180], "ana": [629, 1180], "oof": [629, 1180], "anan": [629, 1180], "am": [629, 1180], "strip_chars_end": [631, 640, 642, 1182], "subslic": [632, 1183], "pear": [632, 1183], "papaya": [632, 1183], "dragonfruit": [632, 1183], "s_slice": 632, "ear": [632, 1183], "aya": [632, 1183], "uit": [632, 1183], "ya": [632, 1183], "onf": [632, 1183], "foo_bar_baz": 633, "split_inclus": 633, "foo_": [633, 711], "bar_": 633, "a_1": [634, 1185, 1217, 1240], "d_4": [634, 1185], "rename_field": [634, 635, 933, 1107, 1185, 1186, 1240], "first_part": [634, 635, 1185, 1186], "second_part": [634, 635, 1185, 1186], "remaind": [635, 1186], "app": [636, 1187], "has_prefix": 636, "strip_char": [637, 1188], "nworld": 638, "foo_strip": 638, "ow": 638, "hell": [638, 1189], "rld": [638, 640, 1191], "strip_suffix": [639, 641], "foo_strip_end": 639, "oldw": 639, "he": 639, "abcdeff": 639, "fed": 639, "strip_prefix": [640, 642], "tworld": [640, 1189, 1191], "foo_strip_start": 640, "wod": [640, 1191], "aabcdef": 640, "cba": 640, "foobar": [641, 642, 1192, 1193], "foofoobar": [641, 1192], "foobarbar": [642, 1193], "polarstemporaltyp": [643, 1194], "penalti": [643, 644, 645, 1194, 1195, 1196], "clean": [643, 644, 645, 1194, 1195, 1196], "beforehand": [643, 644, 645, 1194, 1195, 1196], "certainli": [643, 644, 645, 1194, 1195, 1196], "00z": [643, 645, 1194, 1196], "sun": [643, 1194], "jul": [643, 1194], "34": [643, 1194], "inference_length": [646, 1197], "3420": [646, 1197], "120134": [646, 1197], "3212": [646, 1197], "90": [646, 1197], "143": [646, 1197, 1249], "numbers_decim": 646, "110": [647, 1198], "fa1e": [647, 1198], "ff00": [647, 1198], "cafe": [647, 1198], "64030": [647, 1198], "65280": [647, 1198], "51966": [647, 1198], "variant": [648, 650, 651, 1028, 1240], "foo_low": 648, "titlecas": [650, 1201], "sing": [650, 1201], "welcom": [650, 1201], "THERE": [650, 1201], "NO": [650, 870, 1201], "foo_titl": 650, "There": [650, 1201], "foo_upp": 651, "999999": [652, 703, 743, 744, 745, 870, 1203], "0123": [652, 1203], "cd": [653, 655], "struct_col": [653, 655], "www": 655, "xxx": 655, "yyi": 655, "zzz": 655, "obvious": 655, "structfieldnotfounderror": [655, 769], "761594": [663, 757, 1215, 1240], "replic": [664, 757, 1223, 1240], "vals_phys": [664, 757], "floordiv": [666, 757], "ieee": [666, 757], "754": [666, 757], "mathemat": [666, 707, 757], "undefin": [666, 757], "On": [666, 757], "operand": [666, 757], "infin": [666, 757], "value_count": [668, 757, 1240], "9223372036854775807": [669, 757], "binary_str": [673, 757], "250": [673, 757, 1121, 1240, 1249], "bin_x": [673, 757], "bin_i": [673, 757], "xor_xi": [673, 757], "bin_xor_xi": [673, 757], "00001010": [673, 757], "00001011": [673, 757], "00001000": [673, 757], "00000010": [673, 757], "11111010": [673, 757], "00000011": [673, 757], "249": [673, 757], "11111001": [673, 757], "01000010": [673, 757], "00000100": [673, 757], "70": [673, 757], "01000110": [673, 757], "AND": [674, 675, 870, 1221, 1240], "OR": [676, 677, 791, 867, 870], "any_horizont": 676, "returns_scalar": [678, 722, 757], "polarsintegertyp": [680, 716, 717], "arctan": [681, 682, 757, 1240], "angl": [681, 682], "plane": [681, 682], "rai": [681, 682], "tworoottwo": [681, 682], "arctan2d": 681, "atan2d": [681, 682], "atan2": [681, 682], "135": [681, 682], "356194": [681, 682], "arctan2": 682, "arg_tru": [684, 757, 1240], "mimic": 686, "a_lag_": 686, "a_rol": 686, "swim": 687, "walk": 687, "full_sent": 687, "correlationmethod": 688, "propagate_nan": 688, "spearman": 688, "544705": 688, "covari": [690, 735, 757], "acc": [692, 693, 696, 697, 710, 732], "include_init": [692, 696], "accumul": [692, 693, 696, 697, 710, 732], "fn": [692, 693, 696, 697, 710, 732], "new_valu": [692, 693, 696, 697, 710, 732], "cum_reduc": 692, "cumsum_horizont": 694, "cum_sum_horizont": 699, "granular": 701, "finer": 701, "permut": 701, "1985": [701, 704], "america": 704, "new_york": 704, "est": 704, "contrast": 706, "offset_bi": 706, "sometim": [706, 756], "tbl_width_char": 706, "120": 706, "add_week": 706, "add_dai": 706, "add_second": 706, "add_milli": 706, "add_hour": 706, "002": [706, 982, 983, 985], "add_calendar_dai": 706, "add_calendar_month": 706, "mo": 706, "add_calendar_year": 706, "a_b_doubl": 707, "redirect": 708, "f_string": 711, "placehold": 711, "hello_": 711, "_world": 711, "_bar_": 711, "foo_a_bar_1": 711, "foo_b_bar_2": 711, "foo_c_bar_3": 711, "epoch": 712, "timestep": 712, "1666683077": 712, "1666683099": 712, "12345": [712, 914, 1007, 1129, 1240], "12346": 712, "agg_group": [713, 757], "allow_object": 719, "valueexcept": 719, "test_func": 721, "list_of_seri": 722, "my_custom_aggreg": 722, "understood": 722, "power": [737, 1240], "a_a": 737, "a_txt": 737, "605551": 738, "605551275463989": 738, "my_struct": 739, "thens": 747, "elif": 747, "pick": 747, "met": 747, "own": [747, 1249], "isn": 747, "arr": [749, 1221, 1232, 1240], "technic": 753, "further": [753, 1222, 1240], "columnfactori": 753, "more_nam": 753, "__call__": 753, "helper": 753, "__getattr__": 753, "idiomat": [753, 855], "quick": [753, 934, 1240, 1249], "prototyp": 753, "keystrok": 753, "drawback": 753, "readabl": 753, "modul": [756, 870, 1249], "and_": 757, "arcco": [757, 1240], "arccosh": [757, 1240], "arcsin": [757, 1240], "arcsinh": [757, 1240], "arctanh": [757, 1240], "arg_max": [757, 1240], "arg_min": [757, 1240], "arg_sort": [757, 1240], "arg_uniqu": [757, 1240], "backward_fil": 757, "cbrt": [757, 1240], "clip_max": [757, 1240], "clip_min": [757, 1240], "cosh": [757, 1240], "cot": [757, 1240], "cumcount": 757, "cummax": [757, 1240], "cummin": [757, 1240], "cumprod": [757, 1240], "cumsum": [757, 1240], "cumulative_ev": [757, 1240], "entropi": [757, 1240], "eq_miss": [757, 1240], "ewm_mean": [757, 1240], "ewm_std": [757, 1240], "ewm_var": [757, 1240], "extend_const": [757, 1240], "from_json": 757, "ge": [757, 1240], "gt": [757, 1240], "hist": [757, 1240, 1244], "implod": [757, 1240], "inspect": [757, 867], "is_between": [757, 1240], "is_finit": [757, 1240], "is_first": [757, 1240], "is_infinit": [757, 1240], "is_last": [757, 1240], "is_nan": [757, 1240], "is_not": 757, "is_not_nan": [757, 1240], "is_not_nul": [757, 1240], "kurtosi": [757, 1240], "log10": [757, 1240], "log1p": [757, 1240], "map_alia": 757, "map_dict": [757, 1240], "mod": 757, "mul": 757, "nan_max": [757, 1240], "nan_min": [757, 1240], "ne_miss": [757, 1240], "or_": 757, "pct_chang": [757, 1240], "peak_max": [757, 1240], "peak_min": [757, 1240], "pow": [757, 1240], "register_plugin": 757, "lib": [757, 1216, 1240], "input_wildcard_expans": 757, "cast_to_supertyp": 757, "pass_name_to_appli": 757, "changes_length": 757, "plugin": 757, "highli": 757, "unsaf": 757, "unstabl": 757, "serializ": 757, "ran": 757, "reinterpret": [757, 1240], "repeat_bi": 757, "rolling_appli": [757, 1240], "rolling_max": [757, 1240], "rolling_mean": [757, 1240], "rolling_median": [757, 1240], "rolling_min": [757, 1240], "rolling_quantil": [757, 1240], "rolling_skew": [757, 1240], "rolling_std": [757, 1240], "rolling_var": [757, 1240], "round_sig_fig": [757, 1240], "search_sort": [757, 1240], "shrink_dtyp": [757, 1240], "sin": [757, 1240], "sinh": [757, 1240], "sort_bi": 757, "tan": [757, 1240], "to_phys": [757, 911, 1240], "unique_count": [757, 1240], "xor": 757, "expos": 769, "miscellan": 769, "arrowerror": 769, "columnnotfounderror": 769, "invalidoperationerror": 769, "polarspanicerror": 769, "schemaerror": 769, "schemafieldnotfounderror": 769, "shapeerror": 769, "parametr": 769, "build_info": 769, "get_index_typ": 769, "show_vers": 769, "threadpool_s": 769, "sqlcontext": [769, 1248], "hit": [774, 867], "node": [774, 778, 801, 808, 809, 813, 818, 820, 867], "background": [778, 867], "_eager": [778, 867], "inprocessqueri": [778, 867], "explain": [778, 867], "cancel": [778, 867], "purpos": [778, 788, 867], "set_streaming_chunk_s": [778, 867], "collect_all_async": [779, 867], "async": [779, 867], "stringio": [782, 826, 867], "snippet": [784, 867], "Be": [788, 867], "fewer": [788, 867], "suscept": [788, 867], "lazygroupbi": [794, 795, 796, 797, 798, 799, 822, 867], "other_lf": [803, 867], "validate_output_schema": [808, 809, 867], "streamabl": [808, 809, 813, 867], "past": [808, 809, 867], "paramount": [808, 809, 867], "elig": [808, 809, 867], "invari": [809, 867], "upheld": [809, 867], "100_000": [809, 867], "199998": [809, 867], "199996": [809, 867], "199994": [809, 867], "199992": [809, 867], "show_plot": [818, 867], "truncate_nod": [818, 867], "figsiz": [818, 830, 867], "gantt": [818, 867], "group_by_partit": [818, 867], "470": [818, 867], "475": [818, 867], "1964": [818, 867], "swap": [820, 867], "dynamic_group_bi": [822, 867], "deseri": [826, 867], "dataframescan": [826, 867], "output_schema": [826, 867], "run_parallel": [826, 867], "duplicate_check": [826, 867], "later": [826, 867], "output_path": [830, 867], "raw_output": [830, 867], "290994": [833, 867], "118034": [833, 867], "implicit": [840, 867], "new_lf": [840, 867], "extern": [845, 867], "lf_other": [845, 867], "afoo": [845, 867], "cfoo": [845, 867], "train_lf": [845, 867], "feature_0": [845, 867], "feature_1": [845, 867], "test_lf": [845, 867], "_train": [845, 867], "feature_0_train": [845, 867], "opaqu": 855, "my_column": 855, "struct_seri": 855, "lf5": 867, "lf6": 867, "sink_csv": 867, "sink_ipc": 867, "sink_ndjson": 867, "sink_json": 867, "sink_parquet": 867, "with_context": 867, "intuit": 870, "emploi": 870, "complement": 870, "plenti": 870, "cde": 870, "fgg": 870, "jjk": 870, "lmn": 870, "opp": 870, "qqr": 870, "by_dtyp": 870, "as_expr": 870, "dispatch": 870, "1_234_500": 870, "5_000_555": 870, "1234500": 870, "5000555": 870, "by_nam": 870, "2010": 870, "4_500_000": 870, "4500000": 870, "3265500": 870, "zap": 870, "2031": 870, "tstamp_tokyo": 870, "123465": 870, "tstamp_utc": 870, "999000": 870, "2025": 870, "666000": 870, "tstamp": 870, "600000": 870, "123000": 870, "999": [870, 1249], "666": 870, "td1": 870, "987000": 870, "td2": 870, "456789": [870, 974], "td3": 870, "2m": [870, 962], "456m": 870, "7d": 870, "456789\u00b5": 870, "18d": 870, "999999\u00b5": 870, "23h": 870, "987m": 870, "14d": 870, "16h": 870, "39m": 870, "21d": 870, "456001\u00b5": 870, "expand_selector": 870, "colz": [870, 1249], "everyth": 870, "signed_integ": 870, "unsigned_integ": 870, "is_selector": 870, "obj": 870, "include_categor": 870, "2345": 870, "3456": 870, "292432": [879, 1240], "549306": [883, 1240], "catnamespac": 907, "set_ord": 912, "44225": [913, 1240], "56789": [914, 1007, 1129, 1240], "901234": [914, 1007, 1129, 1240], "1232e": [921, 923, 1240], "1656e15": [923, 1240], "break_point_label": [933, 1107, 1240], "break_point": [933, 1014, 1107, 1240], "category_label": [933, 1107, 1240], "581139": [934, 1240], "arraylik": [936, 1240], "datetimenamespac": 939, "ser": [944, 945, 977], "kathmandu": [944, 945, 977], "0545": [944, 945, 977], "500m": [957, 959, 967], "date_minus_1y_2mon": 969, "165": [973, 987], "round_str": 973, "round_td": 973, "111110": 974, "765431": 974, "11111": 974, "timestamp_u": 978, "978307200000000000": 978, "978393600000000000": 978, "978480000000000000": 978, "005": [993, 1240], "06293300616044681": [993, 1240], "65": [993, 1240], "8568409950394724": [993, 1240], "4000000": [995, 1240], "814697265625": [995, 1240], "085537": [999, 1240], "bitmask": [1011, 1240], "absenc": [1011, 1240], "presenc": [1011, 1221, 1240], "confirm": [1011, 1240], "10734580197236529959": [1012, 1240], "3022416320763508302": [1012, 1240], "13756996518000038261": [1012, 1240], "is_signed_integ": [1028, 1240], "is_unsigned_integ": [1028, 1240], "listnamespac": 1044, "field_2": 1081, "n00": 1081, "n01": 1081, "n02": 1081, "2147483648": [1086, 1240], "166667": [1102, 1240], "142857": [1102, 1240], "150": [1121, 1240], "350": [1121, 1240], "450": [1121, 1240], "dev": [1126, 1240], "527525": [1126, 1240], "57": [1129, 1240, 1249], "frequent": [1132, 1135, 1240], "2246e": [1145, 1214, 1240], "34776706224699483": [1147, 1240], "732051": [1150, 1240], "stringnamespac": 1152, "orld": 1190, "tur": 1201, "6331e16": [1214, 1240], "int64arrai": [1216, 1240], "a_2": [1217, 1240], "a_3": [1217, 1240], "s_from_str_repr": [1219, 1240], "zero_copy_onli": [1221, 1240], "writabl": [1221, 1240], "immut": [1221, 1240], "127": [1227, 1240], "seriesview": [1230, 1240], "dtype_if_empti": 1240, "position": 1240, "scenario": 1240, "chunk_length": 1240, "get_chunk": 1240, "has_valid": 1240, "is_boolean": 1240, "is_float": 1240, "is_integ": 1240, "is_numer": [1240, 1249], "is_sort": 1240, "is_tempor": 1240, "is_utf8": 1240, "new_from_index": 1240, "series_equ": 1240, "set_at_idx": 1240, "histogram": 1244, "kde": 1244, "two_a": 1248, "__enter__": 1248, "__exit__": 1248, "exc_typ": 1248, "baseexcept": 1248, "exc_val": 1248, "exc_tb": 1248, "tracebacktyp": 1248, "primari": 1249, "guid": 1249, "machin": 1249, "xdist": 1249, "hardwar": 1249, "setup": 1249, "sec": 1249, "numeric_dtyp": 1249, "null_probabililti": 1249, "test_numer": 1249, "col0": 1249, "col4": 1249, "29096": 1249, "485": 1249, "2147483647": 1249, "8257e14": 1249, "7508": 1249, "37338": 1249, "7264": 1249, "16996": 1249, "121": 1249, "361": 1249, "63204": 1249, "1443e235": 1249, "conform": 1249, "ascii_lett": 1249, "id_char": 1249, "alphabet": 1249, "price": 1249, "min_valu": 1249, "max_valu": 1249, "test_price_calcul": 1249, "a101": 1249, "8nin": 1249, "qhoo": 1249, "714": 1249, "544": 1249, "i0e0": 1249, "0000": 1249, "test_miscellan": 1249, "235": 1249, "87": 1249, "186": 1249, "174": 1249, "179": 1249, "213": 1249, "221": 1249, "86": 1249, "255": 1249}, "objects": {"polars": [[2, 0, 1, "", "Array"], [3, 0, 1, "", "Binary"], [4, 0, 1, "", "Boolean"], [5, 0, 1, "", "Categorical"], [46, 0, 1, "", "DataType"], [47, 0, 1, "", "Date"], [48, 0, 1, "", "Datetime"], [49, 0, 1, "", "Decimal"], [50, 0, 1, "", "Duration"], [51, 0, 1, "", "Enum"], [52, 0, 1, "", "Float32"], [53, 0, 1, "", "Float64"], [54, 0, 1, "", "Int16"], [55, 0, 1, "", "Int32"], [56, 0, 1, "", "Int64"], [57, 0, 1, "", "Int8"], [61, 0, 1, "", "List"], [62, 0, 1, "", "Null"], [63, 0, 1, "", "Object"], [1248, 0, 1, "", "SQLContext"], [70, 0, 1, "", "String"], [71, 0, 1, "", "StringCache"], [72, 0, 1, "", "Struct"], [73, 0, 1, "", "Time"], [74, 0, 1, "", "UInt16"], [75, 0, 1, "", "UInt32"], [76, 0, 1, "", "UInt64"], [77, 0, 1, "", "UInt8"], [78, 0, 1, "", "Unknown"], [79, 3, 1, "", "Utf8"], [80, 4, 1, "", "align_frames"], [674, 4, 1, "", "all"], [675, 4, 1, "", "all_horizontal"], [676, 4, 1, "", "any"], [677, 4, 1, "", "any_horizontal"], [678, 4, 1, "", "apply"], [679, 4, 1, "", "approx_n_unique"], [680, 4, 1, "", "arange"], [681, 4, 1, "", "arctan2"], [682, 4, 1, "", "arctan2d"], [683, 4, 1, "", "arg_sort_by"], [684, 4, 1, "", "arg_where"], [85, 4, 1, "", "build_info"], [685, 4, 1, "", "coalesce"], [86, 4, 1, "", "collect_all"], [87, 4, 1, "", "collect_all_async"], [88, 4, 1, "", "concat"], [686, 4, 1, "", "concat_list"], [687, 4, 1, "", "concat_str"], [688, 4, 1, "", "corr"], [689, 4, 1, "", "count"], [690, 4, 1, "", "cov"], [691, 4, 1, "", "cum_count"], [692, 4, 1, "", "cum_fold"], [693, 4, 1, "", "cum_reduce"], [694, 4, 1, "", "cum_sum"], [695, 4, 1, "", "cum_sum_horizontal"], [696, 4, 1, "", "cumfold"], [697, 4, 1, "", "cumreduce"], [698, 4, 1, "", "cumsum"], [699, 4, 1, "", "cumsum_horizontal"], [700, 4, 1, "", "date"], [701, 4, 1, "", "date_range"], [702, 4, 1, "", "date_ranges"], [703, 4, 1, "", "datetime"], [704, 4, 1, "", "datetime_range"], [705, 4, 1, "", "datetime_ranges"], [89, 4, 1, "", "disable_string_cache"], [706, 4, 1, "", "duration"], [707, 4, 1, "", "element"], [90, 4, 1, "", "enable_string_cache"], [708, 4, 1, "", "exclude"], [709, 4, 1, "", "first"], [710, 4, 1, "", "fold"], [711, 4, 1, "", "format"], [105, 4, 1, "", "from_arrow"], [106, 4, 1, "", "from_dataframe"], [107, 4, 1, "", "from_dict"], [108, 4, 1, "", "from_dicts"], [712, 4, 1, "", "from_epoch"], [109, 4, 1, "", "from_numpy"], [110, 4, 1, "", "from_pandas"], [111, 4, 1, "", "from_records"], [112, 4, 1, "", "from_repr"], [113, 4, 1, "", "get_index_type"], [713, 4, 1, "", "groups"], [714, 4, 1, "", "head"], [715, 4, 1, "", "implode"], [716, 4, 1, "", "int_range"], [717, 4, 1, "", "int_ranges"], [718, 4, 1, "", "last"], [719, 4, 1, "", "lit"], [720, 4, 1, "", "map"], [721, 4, 1, "", "map_batches"], [722, 4, 1, "", "map_groups"], [723, 4, 1, "", "max"], [724, 4, 1, "", "max_horizontal"], [725, 4, 1, "", "mean"], [726, 4, 1, "", "median"], [727, 4, 1, "", "min"], [728, 4, 1, "", "min_horizontal"], [729, 4, 1, "", "n_unique"], [730, 4, 1, "", "ones"], [731, 4, 1, "", "quantile"], [115, 4, 1, "", "read_avro"], [116, 4, 1, "", "read_csv"], [117, 4, 1, "", "read_csv_batched"], [118, 4, 1, "", "read_database"], [119, 4, 1, "", "read_database_uri"], [120, 4, 1, "", "read_delta"], [121, 4, 1, "", "read_excel"], [122, 4, 1, "", "read_ipc"], [123, 4, 1, "", "read_ipc_schema"], [124, 4, 1, "", "read_ipc_stream"], [125, 4, 1, "", "read_json"], [126, 4, 1, "", "read_ndjson"], [127, 4, 1, "", "read_ods"], [128, 4, 1, "", "read_parquet"], [129, 4, 1, "", "read_parquet_schema"], [732, 4, 1, "", "reduce"], [733, 4, 1, "", "repeat"], [734, 4, 1, "", "rolling_corr"], [735, 4, 1, "", "rolling_cov"], [130, 4, 1, "", "scan_csv"], [131, 4, 1, "", "scan_delta"], [132, 4, 1, "", "scan_iceberg"], [133, 4, 1, "", "scan_ipc"], [134, 4, 1, "", "scan_ndjson"], [135, 4, 1, "", "scan_parquet"], [136, 4, 1, "", "scan_pyarrow_dataset"], [736, 4, 1, "", "select"], [870, 6, 0, "-", "selectors"], [137, 4, 1, "", "set_random_seed"], [138, 4, 1, "", "show_versions"], [737, 4, 1, "", "sql_expr"], [738, 4, 1, "", "std"], [739, 4, 1, "", "struct"], [740, 4, 1, "", "sum"], [741, 4, 1, "", "sum_horizontal"], [742, 4, 1, "", "tail"], [150, 4, 1, "", "threadpool_size"], [743, 4, 1, "", "time"], [744, 4, 1, "", "time_range"], [745, 4, 1, "", "time_ranges"], [151, 4, 1, "", "using_string_cache"], [746, 4, 1, "", "var"], [747, 4, 1, "", "when"], [748, 4, 1, "", "zeros"]], "polars.Array": [[2, 1, 1, "", "__init__"]], "polars.Binary": [[3, 1, 1, "", "__init__"]], "polars.Boolean": [[4, 1, 1, "", "__init__"]], "polars.Categorical": [[5, 1, 1, "", "__init__"]], "polars.Config": [[6, 1, 1, "", "activate_decimals"], [7, 1, 1, "", "load"], [8, 1, 1, "", "load_from_file"], [9, 1, 1, "", "restore_defaults"], [10, 1, 1, "", "save"], [11, 1, 1, "", "save_to_file"], [12, 1, 1, "", "set_ascii_tables"], [13, 1, 1, "", "set_auto_structify"], [14, 1, 1, "", "set_decimal_separator"], [15, 1, 1, "", "set_float_precision"], [16, 1, 1, "", "set_fmt_float"], [17, 1, 1, "", "set_fmt_str_lengths"], [18, 1, 1, "", "set_fmt_table_cell_list_len"], [19, 1, 1, "", "set_streaming_chunk_size"], [20, 1, 1, "", "set_tbl_cell_alignment"], [21, 1, 1, "", "set_tbl_cell_numeric_alignment"], [22, 1, 1, "", "set_tbl_cols"], [23, 1, 1, "", "set_tbl_column_data_type_inline"], [24, 1, 1, "", "set_tbl_dataframe_shape_below"], [25, 1, 1, "", "set_tbl_formatting"], [26, 1, 1, "", "set_tbl_hide_column_data_types"], [27, 1, 1, "", "set_tbl_hide_column_names"], [28, 1, 1, "", "set_tbl_hide_dataframe_shape"], [29, 1, 1, "", "set_tbl_hide_dtype_separator"], [30, 1, 1, "", "set_tbl_rows"], [31, 1, 1, "", "set_tbl_width_chars"], [32, 1, 1, "", "set_thousands_separator"], [33, 1, 1, "", "set_trim_decimal_zeros"], [34, 1, 1, "", "set_verbose"], [35, 1, 1, "", "state"]], "polars.DataFrame": [[154, 1, 1, "", "__dataframe__"], [155, 1, 1, "", "apply"], [156, 1, 1, "", "approx_n_unique"], [157, 1, 1, "", "bottom_k"], [158, 1, 1, "", "cast"], [159, 1, 1, "", "clear"], [160, 1, 1, "", "clone"], [161, 2, 1, "", "columns"], [162, 1, 1, "", "corr"], [163, 1, 1, "", "count"], [164, 1, 1, "", "describe"], [165, 1, 1, "", "drop"], [166, 1, 1, "", "drop_in_place"], [167, 1, 1, "", "drop_nulls"], [168, 2, 1, "", "dtypes"], [169, 1, 1, "", "equals"], [170, 1, 1, "", "estimated_size"], [171, 1, 1, "", "explode"], [172, 1, 1, "", "extend"], [173, 1, 1, "", "fill_nan"], [174, 1, 1, "", "fill_null"], [175, 1, 1, "", "filter"], [176, 1, 1, "", "find_idx_by_name"], [177, 2, 1, "", "flags"], [178, 1, 1, "", "fold"], [179, 1, 1, "", "frame_equal"], [180, 1, 1, "", "gather_every"], [181, 1, 1, "", "get_column"], [182, 1, 1, "", "get_column_index"], [183, 1, 1, "", "get_columns"], [184, 1, 1, "", "glimpse"], [185, 1, 1, "", "group_by"], [186, 1, 1, "", "group_by_dynamic"], [187, 1, 1, "", "group_by_rolling"], [188, 1, 1, "", "groupby"], [189, 1, 1, "", "groupby_dynamic"], [190, 1, 1, "", "groupby_rolling"], [191, 1, 1, "", "hash_rows"], [192, 1, 1, "", "head"], [193, 2, 1, "", "height"], [194, 1, 1, "", "hstack"], [195, 1, 1, "", "insert_at_idx"], [196, 1, 1, "", "insert_column"], [197, 1, 1, "", "interpolate"], [198, 1, 1, "", "is_duplicated"], [199, 1, 1, "", "is_empty"], [200, 1, 1, "", "is_unique"], [201, 1, 1, "", "item"], [202, 1, 1, "", "iter_columns"], [203, 1, 1, "", "iter_rows"], [204, 1, 1, "", "iter_slices"], [205, 1, 1, "", "join"], [206, 1, 1, "", "join_asof"], [207, 1, 1, "", "lazy"], [208, 1, 1, "", "limit"], [209, 1, 1, "", "map_rows"], [210, 1, 1, "", "max"], [211, 1, 1, "", "max_horizontal"], [212, 1, 1, "", "mean"], [213, 1, 1, "", "mean_horizontal"], [214, 1, 1, "", "median"], [215, 1, 1, "", "melt"], [216, 1, 1, "", "merge_sorted"], [217, 1, 1, "", "min"], [218, 1, 1, "", "min_horizontal"], [219, 1, 1, "", "n_chunks"], [220, 1, 1, "", "n_unique"], [221, 1, 1, "", "null_count"], [222, 1, 1, "", "partition_by"], [223, 1, 1, "", "pipe"], [224, 1, 1, "", "pivot"], [225, 2, 1, "", "plot"], [226, 1, 1, "", "product"], [227, 1, 1, "", "quantile"], [228, 1, 1, "", "rechunk"], [229, 1, 1, "", "rename"], [230, 1, 1, "", "replace"], [231, 1, 1, "", "replace_at_idx"], [232, 1, 1, "", "replace_column"], [233, 1, 1, "", "reverse"], [234, 1, 1, "", "rolling"], [235, 1, 1, "", "row"], [236, 1, 1, "", "rows"], [237, 1, 1, "", "rows_by_key"], [238, 1, 1, "", "sample"], [239, 2, 1, "", "schema"], [240, 1, 1, "", "select"], [241, 1, 1, "", "select_seq"], [242, 1, 1, "", "set_sorted"], [243, 2, 1, "", "shape"], [244, 1, 1, "", "shift"], [245, 1, 1, "", "shift_and_fill"], [246, 1, 1, "", "shrink_to_fit"], [247, 1, 1, "", "slice"], [248, 1, 1, "", "sort"], [249, 1, 1, "", "std"], [250, 1, 1, "", "sum"], [251, 1, 1, "", "sum_horizontal"], [252, 1, 1, "", "tail"], [253, 1, 1, "", "take_every"], [254, 1, 1, "", "to_arrow"], [255, 1, 1, "", "to_dict"], [256, 1, 1, "", "to_dicts"], [257, 1, 1, "", "to_dummies"], [258, 1, 1, "", "to_init_repr"], [259, 1, 1, "", "to_numpy"], [260, 1, 1, "", "to_pandas"], [261, 1, 1, "", "to_series"], [262, 1, 1, "", "to_struct"], [263, 1, 1, "", "top_k"], [264, 1, 1, "", "transpose"], [265, 1, 1, "", "unique"], [266, 1, 1, "", "unnest"], [267, 1, 1, "", "unstack"], [268, 1, 1, "", "update"], [269, 1, 1, "", "upsample"], [270, 1, 1, "", "var"], [271, 1, 1, "", "vstack"], [272, 2, 1, "", "width"], [273, 1, 1, "", "with_columns"], [274, 1, 1, "", "with_columns_seq"], [275, 1, 1, "", "with_row_count"], [276, 1, 1, "", "with_row_index"], [36, 1, 1, "", "write_avro"], [37, 1, 1, "", "write_csv"], [38, 1, 1, "", "write_database"], [39, 1, 1, "", "write_delta"], [40, 1, 1, "", "write_excel"], [41, 1, 1, "", "write_ipc"], [42, 1, 1, "", "write_ipc_stream"], [43, 1, 1, "", "write_json"], [44, 1, 1, "", "write_ndjson"], [45, 1, 1, "", "write_parquet"]], "polars.DataType": [[46, 1, 1, "", "__init__"]], "polars.Date": [[47, 1, 1, "", "__init__"]], "polars.Datetime": [[48, 1, 1, "", "__init__"]], "polars.Decimal": [[49, 1, 1, "", "__init__"]], "polars.Duration": [[50, 1, 1, "", "__init__"]], "polars.Enum": [[51, 1, 1, "", "__init__"]], "polars.Expr": [[306, 1, 1, "", "abs"], [307, 1, 1, "", "add"], [308, 1, 1, "", "agg_groups"], [309, 1, 1, "", "alias"], [310, 1, 1, "", "all"], [311, 1, 1, "", "and_"], [312, 1, 1, "", "any"], [313, 1, 1, "", "append"], [314, 1, 1, "", "apply"], [315, 1, 1, "", "approx_n_unique"], [316, 1, 1, "", "arccos"], [317, 1, 1, "", "arccosh"], [318, 1, 1, "", "arcsin"], [319, 1, 1, "", "arcsinh"], [320, 1, 1, "", "arctan"], [321, 1, 1, "", "arctanh"], [322, 1, 1, "", "arg_max"], [323, 1, 1, "", "arg_min"], [324, 1, 1, "", "arg_sort"], [325, 1, 1, "", "arg_true"], [326, 1, 1, "", "arg_unique"], [338, 1, 1, "", "backward_fill"], [344, 1, 1, "", "bottom_k"], [345, 1, 1, "", "cast"], [348, 1, 1, "", "cbrt"], [349, 1, 1, "", "ceil"], [350, 1, 1, "", "clip"], [351, 1, 1, "", "clip_max"], [352, 1, 1, "", "clip_min"], [353, 1, 1, "", "cos"], [354, 1, 1, "", "cosh"], [355, 1, 1, "", "cot"], [356, 1, 1, "", "count"], [357, 1, 1, "", "cum_count"], [358, 1, 1, "", "cum_max"], [359, 1, 1, "", "cum_min"], [360, 1, 1, "", "cum_prod"], [361, 1, 1, "", "cum_sum"], [362, 1, 1, "", "cumcount"], [363, 1, 1, "", "cummax"], [364, 1, 1, "", "cummin"], [365, 1, 1, "", "cumprod"], [366, 1, 1, "", "cumsum"], [367, 1, 1, "", "cumulative_eval"], [368, 1, 1, "", "cut"], [369, 1, 1, "", "degrees"], [370, 1, 1, "", "diff"], [371, 1, 1, "", "dot"], [372, 1, 1, "", "drop_nans"], [373, 1, 1, "", "drop_nulls"], [422, 1, 1, "", "entropy"], [423, 1, 1, "", "eq"], [424, 1, 1, "", "eq_missing"], [425, 1, 1, "", "ewm_mean"], [426, 1, 1, "", "ewm_std"], [427, 1, 1, "", "ewm_var"], [428, 1, 1, "", "exclude"], [429, 1, 1, "", "exp"], [430, 1, 1, "", "explode"], [431, 1, 1, "", "extend_constant"], [432, 1, 1, "", "fill_nan"], [433, 1, 1, "", "fill_null"], [434, 1, 1, "", "filter"], [435, 1, 1, "", "first"], [436, 1, 1, "", "flatten"], [437, 1, 1, "", "floor"], [438, 1, 1, "", "floordiv"], [439, 1, 1, "", "forward_fill"], [440, 1, 1, "", "from_json"], [441, 1, 1, "", "gather"], [442, 1, 1, "", "gather_every"], [443, 1, 1, "", "ge"], [444, 1, 1, "", "get"], [445, 1, 1, "", "gt"], [446, 1, 1, "", "hash"], [447, 1, 1, "", "head"], [448, 1, 1, "", "hist"], [449, 1, 1, "", "implode"], [450, 1, 1, "", "inspect"], [451, 1, 1, "", "interpolate"], [452, 1, 1, "", "is_between"], [453, 1, 1, "", "is_duplicated"], [454, 1, 1, "", "is_finite"], [455, 1, 1, "", "is_first"], [456, 1, 1, "", "is_first_distinct"], [457, 1, 1, "", "is_in"], [458, 1, 1, "", "is_infinite"], [459, 1, 1, "", "is_last"], [460, 1, 1, "", "is_last_distinct"], [461, 1, 1, "", "is_nan"], [462, 1, 1, "", "is_not"], [463, 1, 1, "", "is_not_nan"], [464, 1, 1, "", "is_not_null"], [465, 1, 1, "", "is_null"], [466, 1, 1, "", "is_unique"], [467, 1, 1, "", "keep_name"], [468, 1, 1, "", "kurtosis"], [469, 1, 1, "", "last"], [470, 1, 1, "", "le"], [471, 1, 1, "", "len"], [472, 1, 1, "", "limit"], [511, 1, 1, "", "log"], [512, 1, 1, "", "log10"], [513, 1, 1, "", "log1p"], [514, 1, 1, "", "lower_bound"], [515, 1, 1, "", "lt"], [516, 1, 1, "", "map"], [517, 1, 1, "", "map_alias"], [518, 1, 1, "", "map_batches"], [519, 1, 1, "", "map_dict"], [520, 1, 1, "", "map_elements"], [521, 1, 1, "", "max"], [522, 1, 1, "", "mean"], [523, 1, 1, "", "median"], [534, 1, 1, "", "min"], [535, 1, 1, "", "mod"], [536, 1, 1, "", "mode"], [537, 1, 1, "", "mul"], [538, 1, 1, "", "n_unique"], [545, 1, 1, "", "nan_max"], [546, 1, 1, "", "nan_min"], [547, 1, 1, "", "ne"], [548, 1, 1, "", "ne_missing"], [549, 1, 1, "", "not_"], [550, 1, 1, "", "null_count"], [551, 1, 1, "", "or_"], [552, 1, 1, "", "over"], [553, 1, 1, "", "pct_change"], [554, 1, 1, "", "peak_max"], [555, 1, 1, "", "peak_min"], [556, 1, 1, "", "pipe"], [557, 1, 1, "", "pow"], [558, 1, 1, "", "prefix"], [559, 1, 1, "", "product"], [560, 1, 1, "", "qcut"], [561, 1, 1, "", "quantile"], [562, 1, 1, "", "radians"], [563, 1, 1, "", "rank"], [564, 1, 1, "", "rechunk"], [565, 1, 1, "", "reinterpret"], [566, 1, 1, "", "repeat_by"], [567, 1, 1, "", "replace"], [568, 1, 1, "", "reshape"], [569, 1, 1, "", "reverse"], [570, 1, 1, "", "rle"], [571, 1, 1, "", "rle_id"], [572, 1, 1, "", "rolling"], [573, 1, 1, "", "rolling_apply"], [574, 1, 1, "", "rolling_map"], [575, 1, 1, "", "rolling_max"], [576, 1, 1, "", "rolling_mean"], [577, 1, 1, "", "rolling_median"], [578, 1, 1, "", "rolling_min"], [579, 1, 1, "", "rolling_quantile"], [580, 1, 1, "", "rolling_skew"], [581, 1, 1, "", "rolling_std"], [582, 1, 1, "", "rolling_sum"], [583, 1, 1, "", "rolling_var"], [584, 1, 1, "", "round"], [585, 1, 1, "", "round_sig_figs"], [586, 1, 1, "", "sample"], [587, 1, 1, "", "search_sorted"], [588, 1, 1, "", "set_sorted"], [589, 1, 1, "", "shift"], [590, 1, 1, "", "shift_and_fill"], [591, 1, 1, "", "shrink_dtype"], [592, 1, 1, "", "shuffle"], [593, 1, 1, "", "sign"], [594, 1, 1, "", "sin"], [595, 1, 1, "", "sinh"], [596, 1, 1, "", "skew"], [597, 1, 1, "", "slice"], [598, 1, 1, "", "sort"], [599, 1, 1, "", "sort_by"], [600, 1, 1, "", "sqrt"], [601, 1, 1, "", "std"], [656, 1, 1, "", "sub"], [657, 1, 1, "", "suffix"], [658, 1, 1, "", "sum"], [659, 1, 1, "", "tail"], [660, 1, 1, "", "take"], [661, 1, 1, "", "take_every"], [662, 1, 1, "", "tan"], [663, 1, 1, "", "tanh"], [664, 1, 1, "", "to_physical"], [665, 1, 1, "", "top_k"], [666, 1, 1, "", "truediv"], [667, 1, 1, "", "unique"], [668, 1, 1, "", "unique_counts"], [669, 1, 1, "", "upper_bound"], [670, 1, 1, "", "value_counts"], [671, 1, 1, "", "var"], [672, 1, 1, "", "where"], [673, 1, 1, "", "xor"]], "polars.Expr.arr": [[327, 1, 1, "", "all"], [328, 1, 1, "", "any"], [329, 1, 1, "", "arg_max"], [330, 1, 1, "", "arg_min"], [331, 1, 1, "", "max"], [332, 1, 1, "", "min"], [333, 1, 1, "", "reverse"], [334, 1, 1, "", "sort"], [335, 1, 1, "", "sum"], [336, 1, 1, "", "to_list"], [337, 1, 1, "", "unique"]], "polars.Expr.bin": [[339, 1, 1, "", "contains"], [340, 1, 1, "", "decode"], [341, 1, 1, "", "encode"], [342, 1, 1, "", "ends_with"], [343, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[346, 1, 1, "", "get_categories"], [347, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[374, 1, 1, "", "base_utc_offset"], [375, 1, 1, "", "cast_time_unit"], [376, 1, 1, "", "combine"], [377, 1, 1, "", "convert_time_zone"], [378, 1, 1, "", "date"], [379, 1, 1, "", "datetime"], [380, 1, 1, "", "day"], [381, 1, 1, "", "days"], [382, 1, 1, "", "dst_offset"], [383, 1, 1, "", "epoch"], [384, 1, 1, "", "hour"], [385, 1, 1, "", "hours"], [386, 1, 1, "", "is_leap_year"], [387, 1, 1, "", "iso_year"], [388, 1, 1, "", "microsecond"], [389, 1, 1, "", "microseconds"], [390, 1, 1, "", "millisecond"], [391, 1, 1, "", "milliseconds"], [392, 1, 1, "", "minute"], [393, 1, 1, "", "minutes"], [394, 1, 1, "", "month"], [395, 1, 1, "", "month_end"], [396, 1, 1, "", "month_start"], [397, 1, 1, "", "nanosecond"], [398, 1, 1, "", "nanoseconds"], [399, 1, 1, "", "offset_by"], [400, 1, 1, "", "ordinal_day"], [401, 1, 1, "", "quarter"], [402, 1, 1, "", "replace_time_zone"], [403, 1, 1, "", "round"], [404, 1, 1, "", "second"], [405, 1, 1, "", "seconds"], [406, 1, 1, "", "strftime"], [407, 1, 1, "", "time"], [408, 1, 1, "", "timestamp"], [409, 1, 1, "", "to_string"], [410, 1, 1, "", "total_days"], [411, 1, 1, "", "total_hours"], [412, 1, 1, "", "total_microseconds"], [413, 1, 1, "", "total_milliseconds"], [414, 1, 1, "", "total_minutes"], [415, 1, 1, "", "total_nanoseconds"], [416, 1, 1, "", "total_seconds"], [417, 1, 1, "", "truncate"], [418, 1, 1, "", "week"], [419, 1, 1, "", "weekday"], [420, 1, 1, "", "with_time_unit"], [421, 1, 1, "", "year"]], "polars.Expr.list": [[473, 1, 1, "", "all"], [474, 1, 1, "", "any"], [475, 1, 1, "", "arg_max"], [476, 1, 1, "", "arg_min"], [477, 1, 1, "", "concat"], [478, 1, 1, "", "contains"], [479, 1, 1, "", "count_match"], [480, 1, 1, "", "count_matches"], [481, 1, 1, "", "diff"], [482, 1, 1, "", "drop_nulls"], [483, 1, 1, "", "eval"], [484, 1, 1, "", "explode"], [485, 1, 1, "", "first"], [486, 1, 1, "", "gather"], [487, 1, 1, "", "get"], [488, 1, 1, "", "head"], [489, 1, 1, "", "join"], [490, 1, 1, "", "last"], [491, 1, 1, "", "len"], [492, 1, 1, "", "lengths"], [493, 1, 1, "", "max"], [494, 1, 1, "", "mean"], [495, 1, 1, "", "min"], [496, 1, 1, "", "reverse"], [497, 1, 1, "", "sample"], [498, 1, 1, "", "set_difference"], [499, 1, 1, "", "set_intersection"], [500, 1, 1, "", "set_symmetric_difference"], [501, 1, 1, "", "set_union"], [502, 1, 1, "", "shift"], [503, 1, 1, "", "slice"], [504, 1, 1, "", "sort"], [505, 1, 1, "", "sum"], [506, 1, 1, "", "tail"], [507, 1, 1, "", "take"], [508, 1, 1, "", "to_array"], [509, 1, 1, "", "to_struct"], [510, 1, 1, "", "unique"]], "polars.Expr.meta": [[524, 1, 1, "", "eq"], [525, 1, 1, "", "has_multiple_outputs"], [526, 1, 1, "", "is_regex_projection"], [527, 1, 1, "", "ne"], [528, 1, 1, "", "output_name"], [529, 1, 1, "", "pop"], [530, 1, 1, "", "root_names"], [531, 1, 1, "", "tree_format"], [532, 1, 1, "", "undo_aliases"], [533, 1, 1, "", "write_json"]], "polars.Expr.name": [[539, 1, 1, "", "keep"], [540, 1, 1, "", "map"], [541, 1, 1, "", "prefix"], [542, 1, 1, "", "suffix"], [543, 1, 1, "", "to_lowercase"], [544, 1, 1, "", "to_uppercase"]], "polars.Expr.str": [[602, 1, 1, "", "concat"], [603, 1, 1, "", "contains"], [604, 1, 1, "", "contains_any"], [605, 1, 1, "", "count_match"], [606, 1, 1, "", "count_matches"], [607, 1, 1, "", "decode"], [608, 1, 1, "", "encode"], [609, 1, 1, "", "ends_with"], [610, 1, 1, "", "explode"], [611, 1, 1, "", "extract"], [612, 1, 1, "", "extract_all"], [613, 1, 1, "", "extract_groups"], [614, 1, 1, "", "json_decode"], [615, 1, 1, "", "json_extract"], [616, 1, 1, "", "json_path_match"], [617, 1, 1, "", "len_bytes"], [618, 1, 1, "", "len_chars"], [619, 1, 1, "", "lengths"], [620, 1, 1, "", "ljust"], [621, 1, 1, "", "lstrip"], [622, 1, 1, "", "n_chars"], [623, 1, 1, "", "pad_end"], [624, 1, 1, "", "pad_start"], [625, 1, 1, "", "parse_int"], [626, 1, 1, "", "replace"], [627, 1, 1, "", "replace_all"], [628, 1, 1, "", "replace_many"], [629, 1, 1, "", "reverse"], [630, 1, 1, "", "rjust"], [631, 1, 1, "", "rstrip"], [632, 1, 1, "", "slice"], [633, 1, 1, "", "split"], [634, 1, 1, "", "split_exact"], [635, 1, 1, "", "splitn"], [636, 1, 1, "", "starts_with"], [637, 1, 1, "", "strip"], [638, 1, 1, "", "strip_chars"], [639, 1, 1, "", "strip_chars_end"], [640, 1, 1, "", "strip_chars_start"], [641, 1, 1, "", "strip_prefix"], [642, 1, 1, "", "strip_suffix"], [643, 1, 1, "", "strptime"], [644, 1, 1, "", "to_date"], [645, 1, 1, "", "to_datetime"], [646, 1, 1, "", "to_decimal"], [647, 1, 1, "", "to_integer"], [648, 1, 1, "", "to_lowercase"], [649, 1, 1, "", "to_time"], [650, 1, 1, "", "to_titlecase"], [651, 1, 1, "", "to_uppercase"], [652, 1, 1, "", "zfill"]], "polars.Expr.struct": [[653, 1, 1, "", "field"], [654, 1, 1, "", "json_encode"], [655, 1, 1, "", "rename_fields"]], "polars.Float32": [[52, 1, 1, "", "__init__"]], "polars.Float64": [[53, 1, 1, "", "__init__"]], "polars.Int16": [[54, 1, 1, "", "__init__"]], "polars.Int32": [[55, 1, 1, "", "__init__"]], "polars.Int64": [[56, 1, 1, "", "__init__"]], "polars.Int8": [[57, 1, 1, "", "__init__"]], "polars.LazyFrame": [[772, 1, 1, "", "approx_n_unique"], [773, 1, 1, "", "bottom_k"], [774, 1, 1, "", "cache"], [775, 1, 1, "", "cast"], [776, 1, 1, "", "clear"], [777, 1, 1, "", "clone"], [778, 1, 1, "", "collect"], [779, 1, 1, "", "collect_async"], [780, 2, 1, "", "columns"], [781, 1, 1, "", "count"], [782, 1, 1, "", "deserialize"], [783, 1, 1, "", "drop"], [784, 1, 1, "", "drop_nulls"], [785, 2, 1, "", "dtypes"], [786, 1, 1, "", "explain"], [787, 1, 1, "", "explode"], [788, 1, 1, "", "fetch"], [789, 1, 1, "", "fill_nan"], [790, 1, 1, "", "fill_null"], [791, 1, 1, "", "filter"], [792, 1, 1, "", "first"], [793, 1, 1, "", "gather_every"], [794, 1, 1, "", "group_by"], [795, 1, 1, "", "group_by_dynamic"], [796, 1, 1, "", "group_by_rolling"], [797, 1, 1, "", "groupby"], [798, 1, 1, "", "groupby_dynamic"], [799, 1, 1, "", "groupby_rolling"], [800, 1, 1, "", "head"], [801, 1, 1, "", "inspect"], [802, 1, 1, "", "interpolate"], [803, 1, 1, "", "join"], [804, 1, 1, "", "join_asof"], [805, 1, 1, "", "last"], [806, 1, 1, "", "lazy"], [807, 1, 1, "", "limit"], [808, 1, 1, "", "map"], [809, 1, 1, "", "map_batches"], [810, 1, 1, "", "max"], [811, 1, 1, "", "mean"], [812, 1, 1, "", "median"], [813, 1, 1, "", "melt"], [814, 1, 1, "", "merge_sorted"], [815, 1, 1, "", "min"], [816, 1, 1, "", "null_count"], [817, 1, 1, "", "pipe"], [818, 1, 1, "", "profile"], [819, 1, 1, "", "quantile"], [820, 1, 1, "", "rename"], [821, 1, 1, "", "reverse"], [822, 1, 1, "", "rolling"], [823, 2, 1, "", "schema"], [824, 1, 1, "", "select"], [825, 1, 1, "", "select_seq"], [826, 1, 1, "", "serialize"], [827, 1, 1, "", "set_sorted"], [828, 1, 1, "", "shift"], [829, 1, 1, "", "shift_and_fill"], [830, 1, 1, "", "show_graph"], [58, 1, 1, "", "sink_csv"], [59, 1, 1, "", "sink_ipc"], [60, 1, 1, "", "sink_parquet"], [831, 1, 1, "", "slice"], [832, 1, 1, "", "sort"], [833, 1, 1, "", "std"], [834, 1, 1, "", "sum"], [835, 1, 1, "", "tail"], [836, 1, 1, "", "take_every"], [837, 1, 1, "", "top_k"], [838, 1, 1, "", "unique"], [839, 1, 1, "", "unnest"], [840, 1, 1, "", "update"], [841, 1, 1, "", "var"], [842, 2, 1, "", "width"], [843, 1, 1, "", "with_columns"], [844, 1, 1, "", "with_columns_seq"], [845, 1, 1, "", "with_context"], [846, 1, 1, "", "with_row_count"], [847, 1, 1, "", "with_row_index"]], "polars.List": [[61, 1, 1, "", "__init__"]], "polars.Null": [[62, 1, 1, "", "__init__"]], "polars.Object": [[63, 1, 1, "", "__init__"]], "polars.SQLContext": [[1248, 1, 1, "", "__enter__"], [1248, 1, 1, "", "__exit__"], [1248, 1, 1, "", "__init__"], [64, 1, 1, "", "execute"], [65, 1, 1, "", "register"], [66, 1, 1, "", "register_globals"], [67, 1, 1, "", "register_many"], [68, 1, 1, "", "tables"], [69, 1, 1, "", "unregister"]], "polars.Series": [[872, 1, 1, "", "abs"], [873, 1, 1, "", "alias"], [874, 1, 1, "", "all"], [875, 1, 1, "", "any"], [876, 1, 1, "", "append"], [877, 1, 1, "", "apply"], [878, 1, 1, "", "arccos"], [879, 1, 1, "", "arccosh"], [880, 1, 1, "", "arcsin"], [881, 1, 1, "", "arcsinh"], [882, 1, 1, "", "arctan"], [883, 1, 1, "", "arctanh"], [884, 1, 1, "", "arg_max"], [885, 1, 1, "", "arg_min"], [886, 1, 1, "", "arg_sort"], [887, 1, 1, "", "arg_true"], [888, 1, 1, "", "arg_unique"], [905, 1, 1, "", "bottom_k"], [906, 1, 1, "", "cast"], [907, 3, 1, "", "cat"], [913, 1, 1, "", "cbrt"], [914, 1, 1, "", "ceil"], [915, 1, 1, "", "chunk_lengths"], [916, 1, 1, "", "clear"], [917, 1, 1, "", "clip"], [918, 1, 1, "", "clip_max"], [919, 1, 1, "", "clip_min"], [920, 1, 1, "", "clone"], [921, 1, 1, "", "cos"], [922, 1, 1, "", "cosh"], [923, 1, 1, "", "cot"], [924, 1, 1, "", "cum_max"], [925, 1, 1, "", "cum_min"], [926, 1, 1, "", "cum_prod"], [927, 1, 1, "", "cum_sum"], [928, 1, 1, "", "cummax"], [929, 1, 1, "", "cummin"], [930, 1, 1, "", "cumprod"], [931, 1, 1, "", "cumsum"], [932, 1, 1, "", "cumulative_eval"], [933, 1, 1, "", "cut"], [934, 1, 1, "", "describe"], [935, 1, 1, "", "diff"], [936, 1, 1, "", "dot"], [937, 1, 1, "", "drop_nans"], [938, 1, 1, "", "drop_nulls"], [939, 3, 1, "", "dt"], [992, 3, 1, "", "dtype"], [993, 1, 1, "", "entropy"], [994, 1, 1, "", "equals"], [995, 1, 1, "", "estimated_size"], [996, 1, 1, "", "ewm_mean"], [997, 1, 1, "", "ewm_std"], [998, 1, 1, "", "ewm_var"], [999, 1, 1, "", "exp"], [1000, 1, 1, "", "explode"], [1001, 1, 1, "", "extend"], [1002, 1, 1, "", "extend_constant"], [1003, 1, 1, "", "fill_nan"], [1004, 1, 1, "", "fill_null"], [1005, 1, 1, "", "filter"], [1006, 3, 1, "", "flags"], [1007, 1, 1, "", "floor"], [1008, 1, 1, "", "gather"], [1009, 1, 1, "", "gather_every"], [1010, 1, 1, "", "get_chunks"], [1011, 1, 1, "", "has_validity"], [1012, 1, 1, "", "hash"], [1013, 1, 1, "", "head"], [1014, 1, 1, "", "hist"], [1015, 1, 1, "", "implode"], [1016, 3, 1, "", "inner_dtype"], [1017, 1, 1, "", "interpolate"], [1018, 1, 1, "", "is_between"], [1019, 1, 1, "", "is_boolean"], [1020, 1, 1, "", "is_duplicated"], [1021, 1, 1, "", "is_empty"], [1022, 1, 1, "", "is_finite"], [1023, 1, 1, "", "is_first"], [1024, 1, 1, "", "is_first_distinct"], [1025, 1, 1, "", "is_float"], [1026, 1, 1, "", "is_in"], [1027, 1, 1, "", "is_infinite"], [1028, 1, 1, "", "is_integer"], [1029, 1, 1, "", "is_last"], [1030, 1, 1, "", "is_last_distinct"], [1031, 1, 1, "", "is_nan"], [1032, 1, 1, "", "is_not_nan"], [1033, 1, 1, "", "is_not_null"], [1034, 1, 1, "", "is_null"], [1035, 1, 1, "", "is_numeric"], [1036, 1, 1, "", "is_sorted"], [1037, 1, 1, "", "is_temporal"], [1038, 1, 1, "", "is_unique"], [1039, 1, 1, "", "is_utf8"], [1040, 1, 1, "", "item"], [1041, 1, 1, "", "kurtosis"], [1042, 1, 1, "", "len"], [1043, 1, 1, "", "limit"], [1044, 3, 1, "", "list"], [1083, 1, 1, "", "log"], [1084, 1, 1, "", "log10"], [1085, 1, 1, "", "log1p"], [1086, 1, 1, "", "lower_bound"], [1087, 1, 1, "", "map_dict"], [1088, 1, 1, "", "map_elements"], [1089, 1, 1, "", "max"], [1090, 1, 1, "", "mean"], [1091, 1, 1, "", "median"], [1092, 1, 1, "", "min"], [1093, 1, 1, "", "mode"], [1094, 1, 1, "", "n_chunks"], [1095, 1, 1, "", "n_unique"], [1096, 3, 1, "", "name"], [1097, 1, 1, "", "nan_max"], [1098, 1, 1, "", "nan_min"], [1099, 1, 1, "", "new_from_index"], [1100, 1, 1, "", "not_"], [1101, 1, 1, "", "null_count"], [1102, 1, 1, "", "pct_change"], [1103, 1, 1, "", "peak_max"], [1104, 1, 1, "", "peak_min"], [1105, 3, 1, "", "plot"], [1106, 1, 1, "", "product"], [1107, 1, 1, "", "qcut"], [1108, 1, 1, "", "quantile"], [1109, 1, 1, "", "rank"], [1110, 1, 1, "", "rechunk"], [1111, 1, 1, "", "reinterpret"], [1112, 1, 1, "", "rename"], [1113, 1, 1, "", "replace"], [1114, 1, 1, "", "reshape"], [1115, 1, 1, "", "reverse"], [1116, 1, 1, "", "rle"], [1117, 1, 1, "", "rle_id"], [1118, 1, 1, "", "rolling_apply"], [1119, 1, 1, "", "rolling_map"], [1120, 1, 1, "", "rolling_max"], [1121, 1, 1, "", "rolling_mean"], [1122, 1, 1, "", "rolling_median"], [1123, 1, 1, "", "rolling_min"], [1124, 1, 1, "", "rolling_quantile"], [1125, 1, 1, "", "rolling_skew"], [1126, 1, 1, "", "rolling_std"], [1127, 1, 1, "", "rolling_sum"], [1128, 1, 1, "", "rolling_var"], [1129, 1, 1, "", "round"], [1130, 1, 1, "", "round_sig_figs"], [1131, 1, 1, "", "sample"], [1132, 1, 1, "", "scatter"], [1133, 1, 1, "", "search_sorted"], [1134, 1, 1, "", "series_equal"], [1135, 1, 1, "", "set"], [1136, 1, 1, "", "set_at_idx"], [1137, 1, 1, "", "set_sorted"], [1138, 3, 1, "", "shape"], [1139, 1, 1, "", "shift"], [1140, 1, 1, "", "shift_and_fill"], [1141, 1, 1, "", "shrink_dtype"], [1142, 1, 1, "", "shrink_to_fit"], [1143, 1, 1, "", "shuffle"], [1144, 1, 1, "", "sign"], [1145, 1, 1, "", "sin"], [1146, 1, 1, "", "sinh"], [1147, 1, 1, "", "skew"], [1148, 1, 1, "", "slice"], [1149, 1, 1, "", "sort"], [1150, 1, 1, "", "sqrt"], [1151, 1, 1, "", "std"], [1152, 3, 1, "", "str"], [1210, 1, 1, "", "sum"], [1211, 1, 1, "", "tail"], [1212, 1, 1, "", "take"], [1213, 1, 1, "", "take_every"], [1214, 1, 1, "", "tan"], [1215, 1, 1, "", "tanh"], [1216, 1, 1, "", "to_arrow"], [1217, 1, 1, "", "to_dummies"], [1218, 1, 1, "", "to_frame"], [1219, 1, 1, "", "to_init_repr"], [1220, 1, 1, "", "to_list"], [1221, 1, 1, "", "to_numpy"], [1222, 1, 1, "", "to_pandas"], [1223, 1, 1, "", "to_physical"], [1224, 1, 1, "", "top_k"], [1225, 1, 1, "", "unique"], [1226, 1, 1, "", "unique_counts"], [1227, 1, 1, "", "upper_bound"], [1228, 1, 1, "", "value_counts"], [1229, 1, 1, "", "var"], [1230, 1, 1, "", "view"], [1231, 1, 1, "", "zip_with"]], "polars.Series.arr": [[889, 1, 1, "", "all"], [890, 1, 1, "", "any"], [891, 1, 1, "", "arg_max"], [892, 1, 1, "", "arg_min"], [893, 1, 1, "", "max"], [894, 1, 1, "", "min"], [895, 1, 1, "", "reverse"], [896, 1, 1, "", "sort"], [897, 1, 1, "", "sum"], [898, 1, 1, "", "to_list"], [899, 1, 1, "", "unique"]], "polars.Series.bin": [[900, 1, 1, "", "contains"], [901, 1, 1, "", "decode"], [902, 1, 1, "", "encode"], [903, 1, 1, "", "ends_with"], [904, 1, 1, "", "starts_with"]], "polars.Series.cat": [[908, 1, 1, "", "get_categories"], [909, 1, 1, "", "is_local"], [910, 1, 1, "", "set_ordering"], [911, 1, 1, "", "to_local"], [912, 1, 1, "", "uses_lexical_ordering"]], "polars.Series.dt": [[940, 1, 1, "", "base_utc_offset"], [941, 1, 1, "", "cast_time_unit"], [942, 1, 1, "", "combine"], [943, 1, 1, "", "convert_time_zone"], [944, 1, 1, "", "date"], [945, 1, 1, "", "datetime"], [946, 1, 1, "", "day"], [947, 1, 1, "", "days"], [948, 1, 1, "", "dst_offset"], [949, 1, 1, "", "epoch"], [950, 1, 1, "", "hour"], [951, 1, 1, "", "hours"], [952, 1, 1, "", "is_leap_year"], [953, 1, 1, "", "iso_year"], [954, 1, 1, "", "max"], [955, 1, 1, "", "mean"], [956, 1, 1, "", "median"], [957, 1, 1, "", "microsecond"], [958, 1, 1, "", "microseconds"], [959, 1, 1, "", "millisecond"], [960, 1, 1, "", "milliseconds"], [961, 1, 1, "", "min"], [962, 1, 1, "", "minute"], [963, 1, 1, "", "minutes"], [964, 1, 1, "", "month"], [965, 1, 1, "", "month_end"], [966, 1, 1, "", "month_start"], [967, 1, 1, "", "nanosecond"], [968, 1, 1, "", "nanoseconds"], [969, 1, 1, "", "offset_by"], [970, 1, 1, "", "ordinal_day"], [971, 1, 1, "", "quarter"], [972, 1, 1, "", "replace_time_zone"], [973, 1, 1, "", "round"], [974, 1, 1, "", "second"], [975, 1, 1, "", "seconds"], [976, 1, 1, "", "strftime"], [977, 1, 1, "", "time"], [978, 1, 1, "", "timestamp"], [979, 1, 1, "", "to_string"], [980, 1, 1, "", "total_days"], [981, 1, 1, "", "total_hours"], [982, 1, 1, "", "total_microseconds"], [983, 1, 1, "", "total_milliseconds"], [984, 1, 1, "", "total_minutes"], [985, 1, 1, "", "total_nanoseconds"], [986, 1, 1, "", "total_seconds"], [987, 1, 1, "", "truncate"], [988, 1, 1, "", "week"], [989, 1, 1, "", "weekday"], [990, 1, 1, "", "with_time_unit"], [991, 1, 1, "", "year"]], "polars.Series.list": [[1045, 1, 1, "", "all"], [1046, 1, 1, "", "any"], [1047, 1, 1, "", "arg_max"], [1048, 1, 1, "", "arg_min"], [1049, 1, 1, "", "concat"], [1050, 1, 1, "", "contains"], [1051, 1, 1, "", "count_match"], [1052, 1, 1, "", "count_matches"], [1053, 1, 1, "", "diff"], [1054, 1, 1, "", "drop_nulls"], [1055, 1, 1, "", "eval"], [1056, 1, 1, "", "explode"], [1057, 1, 1, "", "first"], [1058, 1, 1, "", "gather"], [1059, 1, 1, "", "get"], [1060, 1, 1, "", "head"], [1061, 1, 1, "", "join"], [1062, 1, 1, "", "last"], [1063, 1, 1, "", "len"], [1064, 1, 1, "", "lengths"], [1065, 1, 1, "", "max"], [1066, 1, 1, "", "mean"], [1067, 1, 1, "", "min"], [1068, 1, 1, "", "reverse"], [1069, 1, 1, "", "sample"], [1070, 1, 1, "", "set_difference"], [1071, 1, 1, "", "set_intersection"], [1072, 1, 1, "", "set_symmetric_difference"], [1073, 1, 1, "", "set_union"], [1074, 1, 1, "", "shift"], [1075, 1, 1, "", "slice"], [1076, 1, 1, "", "sort"], [1077, 1, 1, "", "sum"], [1078, 1, 1, "", "tail"], [1079, 1, 1, "", "take"], [1080, 1, 1, "", "to_array"], [1081, 1, 1, "", "to_struct"], [1082, 1, 1, "", "unique"]], "polars.Series.str": [[1153, 1, 1, "", "concat"], [1154, 1, 1, "", "contains"], [1155, 1, 1, "", "contains_any"], [1156, 1, 1, "", "count_match"], [1157, 1, 1, "", "count_matches"], [1158, 1, 1, "", "decode"], [1159, 1, 1, "", "encode"], [1160, 1, 1, "", "ends_with"], [1161, 1, 1, "", "explode"], [1162, 1, 1, "", "extract"], [1163, 1, 1, "", "extract_all"], [1164, 1, 1, "", "extract_groups"], [1165, 1, 1, "", "json_decode"], [1166, 1, 1, "", "json_extract"], [1167, 1, 1, "", "json_path_match"], [1168, 1, 1, "", "len_bytes"], [1169, 1, 1, "", "len_chars"], [1170, 1, 1, "", "lengths"], [1171, 1, 1, "", "ljust"], [1172, 1, 1, "", "lstrip"], [1173, 1, 1, "", "n_chars"], [1174, 1, 1, "", "pad_end"], [1175, 1, 1, "", "pad_start"], [1176, 1, 1, "", "parse_int"], [1177, 1, 1, "", "replace"], [1178, 1, 1, "", "replace_all"], [1179, 1, 1, "", "replace_many"], [1180, 1, 1, "", "reverse"], [1181, 1, 1, "", "rjust"], [1182, 1, 1, "", "rstrip"], [1183, 1, 1, "", "slice"], [1184, 1, 1, "", "split"], [1185, 1, 1, "", "split_exact"], [1186, 1, 1, "", "splitn"], [1187, 1, 1, "", "starts_with"], [1188, 1, 1, "", "strip"], [1189, 1, 1, "", "strip_chars"], [1190, 1, 1, "", "strip_chars_end"], [1191, 1, 1, "", "strip_chars_start"], [1192, 1, 1, "", "strip_prefix"], [1193, 1, 1, "", "strip_suffix"], [1194, 1, 1, "", "strptime"], [1195, 1, 1, "", "to_date"], [1196, 1, 1, "", "to_datetime"], [1197, 1, 1, "", "to_decimal"], [1198, 1, 1, "", "to_integer"], [1199, 1, 1, "", "to_lowercase"], [1200, 1, 1, "", "to_time"], [1201, 1, 1, "", "to_titlecase"], [1202, 1, 1, "", "to_uppercase"], [1203, 1, 1, "", "zfill"]], "polars.Series.struct": [[1204, 1, 1, "", "field"], [1205, 3, 1, "", "fields"], [1206, 1, 1, "", "json_encode"], [1207, 1, 1, "", "rename_fields"], [1208, 3, 1, "", "schema"], [1209, 1, 1, "", "unnest"]], "polars.String": [[70, 1, 1, "", "__init__"]], "polars.StringCache": [[71, 1, 1, "", "__init__"]], "polars.Struct": [[72, 1, 1, "", "__init__"]], "polars.Time": [[73, 1, 1, "", "__init__"]], "polars.UInt16": [[74, 1, 1, "", "__init__"]], "polars.UInt32": [[75, 1, 1, "", "__init__"]], "polars.UInt64": [[76, 1, 1, "", "__init__"]], "polars.UInt8": [[77, 1, 1, "", "__init__"]], "polars.Unknown": [[78, 1, 1, "", "__init__"]], "polars.api": [[81, 4, 1, "", "register_dataframe_namespace"], [82, 4, 1, "", "register_expr_namespace"], [83, 4, 1, "", "register_lazyframe_namespace"], [84, 4, 1, "", "register_series_namespace"]], "polars.dataframe.group_by.GroupBy": [[277, 1, 1, "", "__iter__"], [278, 1, 1, "", "agg"], [279, 1, 1, "", "all"], [280, 1, 1, "", "apply"], [281, 1, 1, "", "count"], [282, 1, 1, "", "first"], [283, 1, 1, "", "head"], [284, 1, 1, "", "last"], [285, 1, 1, "", "map_groups"], [286, 1, 1, "", "max"], [287, 1, 1, "", "mean"], [288, 1, 1, "", "median"], [289, 1, 1, "", "min"], [290, 1, 1, "", "n_unique"], [291, 1, 1, "", "quantile"], [292, 1, 1, "", "sum"], [293, 1, 1, "", "tail"]], "polars.exceptions": [[91, 5, 1, "", "ArrowError"], [92, 5, 1, "", "ColumnNotFoundError"], [93, 5, 1, "", "ComputeError"], [94, 5, 1, "", "DuplicateError"], [95, 5, 1, "", "InvalidOperationError"], [96, 5, 1, "", "NoDataError"], [97, 5, 1, "", "NoRowsReturnedError"], [98, 5, 1, "", "PolarsPanicError"], [99, 5, 1, "", "RowsError"], [100, 5, 1, "", "SchemaError"], [101, 5, 1, "", "SchemaFieldNotFoundError"], [102, 5, 1, "", "ShapeError"], [103, 5, 1, "", "StructFieldNotFoundError"], [104, 5, 1, "", "TooManyRowsReturnedError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[114, 1, 1, "", "next_batches"]], "polars.lazyframe.group_by.LazyGroupBy": [[848, 1, 1, "", "agg"], [849, 1, 1, "", "all"], [850, 1, 1, "", "apply"], [851, 1, 1, "", "count"], [852, 1, 1, "", "first"], [853, 1, 1, "", "head"], [854, 1, 1, "", "last"], [855, 1, 1, "", "map_groups"], [856, 1, 1, "", "max"], [857, 1, 1, "", "mean"], [858, 1, 1, "", "median"], [859, 1, 1, "", "min"], [860, 1, 1, "", "n_unique"], [861, 1, 1, "", "quantile"], [862, 1, 1, "", "sum"], [863, 1, 1, "", "tail"]], "polars.selectors": [[870, 4, 1, "", "all"], [870, 4, 1, "", "by_dtype"], [870, 4, 1, "", "by_name"], [870, 4, 1, "", "categorical"], [870, 4, 1, "", "contains"], [870, 4, 1, "", "date"], [870, 4, 1, "", "datetime"], [870, 4, 1, "", "duration"], [870, 4, 1, "", "ends_with"], [870, 4, 1, "", "expand_selector"], [870, 4, 1, "", "first"], [870, 4, 1, "", "float"], [870, 4, 1, "", "integer"], [870, 4, 1, "", "is_selector"], [870, 4, 1, "", "last"], [870, 4, 1, "", "matches"], [870, 4, 1, "", "numeric"], [870, 4, 1, "", "starts_with"], [870, 4, 1, "", "string"], [870, 4, 1, "", "temporal"], [870, 4, 1, "", "time"]], "polars.testing": [[139, 4, 1, "", "assert_frame_equal"], [140, 4, 1, "", "assert_frame_not_equal"], [141, 4, 1, "", "assert_series_equal"], [142, 4, 1, "", "assert_series_not_equal"]], "polars.testing.parametric": [[143, 0, 1, "", "column"], [144, 4, 1, "", "columns"], [145, 4, 1, "", "create_list_strategy"], [146, 4, 1, "", "dataframes"], [147, 4, 1, "", "load_profile"], [148, 4, 1, "", "series"], [149, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[143, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception", "6": "py:module"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "module", "Python module"]}, "titleterms": {"index": 0, "extend": [1, 172, 1001], "api": [1, 81, 82, 83, 84, 769], "provid": 1, "new": 1, "function": [1, 152, 756, 768, 870], "avail": 1, "registr": 1, "exampl": [1, 302, 870, 1244, 1249], "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 753, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1249], "arrai": [2, 749, 1232], "binari": [3, 750, 763, 1234], "boolean": [4, 751, 1235], "categor": 5, "config": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 152], "activate_decim": 6, "load": [7, 152], "load_from_fil": 8, "restore_default": 9, "save": [10, 152], "save_to_fil": 11, "set_ascii_t": 12, "set_auto_structifi": 13, "set_decimal_separ": 14, "set_float_precis": 15, "set_fmt_float": 16, "set_fmt_str_length": 17, "set_fmt_table_cell_list_len": 18, "set_streaming_chunk_s": 19, "set_tbl_cell_align": 20, "set_tbl_cell_numeric_align": 21, "set_tbl_col": 22, "set_tbl_column_data_type_inlin": 23, "set_tbl_dataframe_shape_below": 24, "set_tbl_format": 25, "set_tbl_hide_column_data_typ": 26, "set_tbl_hide_column_nam": 27, "set_tbl_hide_dataframe_shap": 28, "set_tbl_hide_dtype_separ": 29, "set_tbl_row": 30, "set_tbl_width_char": 31, "set_thousands_separ": 32, "set_trim_decimal_zero": 33, "set_verbos": 34, "state": [35, 152], "datafram": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 146, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 299], "write_avro": 36, "write_csv": 37, "write_databas": 38, "write_delta": 39, "write_excel": 40, "write_ipc": 41, "write_ipc_stream": 42, "write_json": [43, 533], "write_ndjson": 44, "write_parquet": 45, "datatyp": 46, "date": [47, 378, 700, 944], "datetim": [48, 379, 703, 945], "decim": 49, "durat": [50, 706], "enum": 51, "float32": 52, "float64": 53, "int16": 54, "int32": 55, "int64": 56, "int8": 57, "lazyfram": [58, 59, 60, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867], "sink_csv": 58, "sink_ipc": 59, "sink_parquet": 60, "list": [61, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 758, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1241], "null": 62, "object": 63, "sqlcontext": [64, 65, 66, 67, 68, 69], "execut": 64, "regist": 65, "register_glob": 66, "register_mani": 67, "tabl": 68, "unregist": 69, "string": [70, 764, 1245], "stringcach": [71, 768], "struct": [72, 653, 654, 655, 739, 765, 1204, 1205, 1206, 1207, 1208, 1209, 1246], "time": [73, 407, 743, 977], "uint16": 74, "uint32": 75, "uint64": 76, "uint8": 77, "unknown": 78, "utf8": 79, "align_fram": 80, "register_dataframe_namespac": 81, "register_expr_namespac": 82, "register_lazyframe_namespac": 83, "register_series_namespac": 84, "build_info": 85, "collect_al": 86, "collect_all_async": 87, "concat": [88, 477, 602, 1049, 1153], "disable_string_cach": 89, "enable_string_cach": 90, "except": [91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 304], "arrowerror": 91, "columnnotfounderror": 92, "computeerror": 93, "duplicateerror": 94, "invalidoperationerror": 95, "nodataerror": 96, "norowsreturnederror": 97, "polarspanicerror": 98, "rowserror": 99, "schemaerror": 100, "schemafieldnotfounderror": 101, "shapeerror": 102, "structfieldnotfounderror": 103, "toomanyrowsreturnederror": 104, "from_arrow": 105, "from_datafram": 106, "from_dict": [107, 108], "from_numpi": 109, "from_panda": 110, "from_record": 111, "from_repr": 112, "get_index_typ": 113, "io": 114, "csv": [114, 770], "batched_read": 114, "batchedcsvread": [114, 770], "next_batch": 114, "read_avro": 115, "read_csv": 116, "read_csv_batch": 117, "read_databas": 118, "read_database_uri": 119, "read_delta": 120, "read_excel": 121, "read_ipc": 122, "read_ipc_schema": 123, "read_ipc_stream": 124, "read_json": 125, "read_ndjson": 126, "read_od": 127, "read_parquet": 128, "read_parquet_schema": 129, "scan_csv": 130, "scan_delta": 131, "scan_iceberg": 132, "scan_ipc": 133, "scan_ndjson": 134, "scan_parquet": 135, "scan_pyarrow_dataset": 136, "set_random_se": 137, "show_vers": 138, "test": [139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 1249], "assert_frame_equ": 139, "assert_frame_not_equ": 140, "assert_series_equ": 141, "assert_series_not_equ": 142, "parametr": [143, 144, 145, 146, 147, 148, 149, 1249], "column": [143, 144, 161, 754, 780], "create_list_strategi": 145, "load_profil": 147, "seri": [148, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1240], "set_profil": 149, "threadpool_s": 150, "using_string_cach": 151, "option": 152, "current": 152, "us": 152, "context": 152, "manag": 152, "decor": 152, "aggreg": [153, 305, 771, 871], "__dataframe__": 154, "appli": [155, 280, 314, 678, 850, 877], "approx_n_uniqu": [156, 315, 679, 772], "bottom_k": [157, 344, 773, 905], "cast": [158, 345, 775, 906], "clear": [159, 776, 916], "clone": [160, 777, 920], "corr": [162, 688], "count": [163, 281, 356, 689, 781, 851], "describ": [164, 934], "drop": [165, 783], "drop_in_plac": 166, "drop_nul": [167, 373, 482, 784, 938, 1054], "dtype": [168, 785, 992], "equal": [169, 994], "estimated_s": [170, 995], "explod": [171, 430, 484, 610, 787, 1000, 1056, 1161], "fill_nan": [173, 432, 789, 1003], "fill_nul": [174, 433, 790, 1004], "filter": [175, 434, 791, 1005], "find_idx_by_nam": 176, "flag": [177, 1006], "fold": [178, 710], "frame_equ": 179, "gather_everi": [180, 442, 793, 1009], "get_column": [181, 183], "get_column_index": 182, "glimps": 184, "group_bi": [185, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 794, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863], "group_by_dynam": [186, 795], "group_by_rol": [187, 796], "groupbi": [188, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 298, 797, 866], "groupby_dynam": [189, 798], "groupby_rol": [190, 799], "hash_row": 191, "head": [192, 283, 447, 488, 714, 800, 853, 1013, 1060], "height": 193, "hstack": 194, "insert_at_idx": 195, "insert_column": 196, "interpol": [197, 451, 802, 1017], "is_dupl": [198, 453, 1020], "is_empti": [199, 1021], "is_uniqu": [200, 466, 1038], "item": [201, 1040], "iter_column": 202, "iter_row": 203, "iter_slic": 204, "join": [205, 489, 803, 1061], "join_asof": [206, 804], "lazi": [207, 806], "limit": [208, 472, 807, 1043], "map_row": 209, "max": [210, 286, 331, 493, 521, 723, 810, 856, 893, 954, 1065, 1089], "max_horizont": [211, 724], "mean": [212, 287, 494, 522, 725, 811, 857, 955, 1066, 1090], "mean_horizont": 213, "median": [214, 288, 523, 726, 812, 858, 956, 1091], "melt": [215, 813], "merge_sort": [216, 814], "min": [217, 289, 332, 495, 534, 727, 815, 859, 894, 961, 1067, 1092], "min_horizont": [218, 728], "n_chunk": [219, 1094], "n_uniqu": [220, 290, 538, 729, 860, 1095], "null_count": [221, 550, 816, 1101], "partition_bi": 222, "pipe": [223, 556, 817], "pivot": 224, "plot": [225, 302, 1105, 1244], "product": [226, 559, 1106], "quantil": [227, 291, 561, 731, 819, 861, 1108], "rechunk": [228, 564, 1110], "renam": [229, 820, 1112], "replac": [230, 567, 626, 1113, 1177], "replace_at_idx": 231, "replace_column": 232, "revers": [233, 333, 496, 569, 629, 821, 895, 1068, 1115, 1180], "roll": [234, 572, 822], "row": [235, 236], "rows_by_kei": 237, "sampl": [238, 497, 586, 1069, 1131], "schema": [239, 823, 1208], "select": [240, 301, 736, 761, 824, 869, 1243], "select_seq": [241, 825], "set_sort": [242, 588, 827, 1137], "shape": [243, 1138], "shift": [244, 502, 589, 828, 1074, 1139], "shift_and_fil": [245, 590, 829, 1140], "shrink_to_fit": [246, 1142], "slice": [247, 503, 597, 632, 831, 1075, 1148, 1183], "sort": [248, 334, 504, 598, 832, 896, 1076, 1149], "std": [249, 601, 738, 833, 1151], "sum": [250, 292, 335, 505, 658, 740, 834, 862, 897, 1077, 1210], "sum_horizont": [251, 741], "tail": [252, 293, 506, 659, 742, 835, 863, 1078, 1211], "take_everi": [253, 661, 836, 1213], "to_arrow": [254, 1216], "to_dict": [255, 256], "to_dummi": [257, 1217], "to_init_repr": [258, 1219], "to_numpi": [259, 1221], "to_panda": [260, 1222], "to_seri": 261, "to_struct": [262, 509, 1081], "top_k": [263, 665, 837, 1224], "transpos": 264, "uniqu": [265, 337, 510, 667, 838, 899, 1082, 1225], "unnest": [266, 839, 1209], "unstack": 267, "updat": [268, 840], "upsampl": 269, "var": [270, 671, 746, 841, 1229], "vstack": 271, "width": [272, 842], "with_column": [273, 843], "with_columns_seq": [274, 844], "with_row_count": [275, 846], "with_row_index": [276, 847], "__iter__": 277, "agg": [278, 848], "all": [279, 310, 327, 473, 674, 849, 874, 889, 1045], "first": [282, 435, 485, 709, 792, 852, 1057], "last": [284, 469, 490, 718, 805, 854, 1062], "map_group": [285, 722, 855], "attribut": [294, 864, 1233], "comput": [295, 755, 1237], "descript": [296, 865, 1238], "export": [297, 1239], "miscellan": [300, 760, 768, 868, 1242], "manipul": [301, 761, 869, 1243], "data": 303, "type": 303, "numer": [303, 763], "tempor": [303, 766, 1247], "nest": 303, "other": 303, "expr": [306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673], "ab": [306, 872], "add": 307, "agg_group": 308, "alia": [309, 873], "and_": 311, "ani": [312, 328, 474, 676, 875, 890, 1046], "append": [313, 876], "arcco": [316, 878], "arccosh": [317, 879], "arcsin": [318, 880], "arcsinh": [319, 881], "arctan": [320, 882], "arctanh": [321, 883], "arg_max": [322, 329, 475, 884, 891, 1047], "arg_min": [323, 330, 476, 885, 892, 1048], "arg_sort": [324, 886], "arg_tru": [325, 887], "arg_uniqu": [326, 888], "arr": [327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899], "to_list": [336, 898, 1220], "backward_fil": 338, "bin": [339, 340, 341, 342, 343, 900, 901, 902, 903, 904], "contain": [339, 478, 603, 900, 1050, 1154], "decod": [340, 607, 901, 1158], "encod": [341, 608, 902, 1159], "ends_with": [342, 609, 903, 1160], "starts_with": [343, 636, 904, 1187], "cat": [346, 347, 907, 908, 909, 910, 911, 912], "get_categori": [346, 908], "set_ord": [347, 910], "cbrt": [348, 913], "ceil": [349, 914], "clip": [350, 917], "clip_max": [351, 918], "clip_min": [352, 919], "co": [353, 921], "cosh": [354, 922], "cot": [355, 923], "cum_count": [357, 691], "cum_max": [358, 924], "cum_min": [359, 925], "cum_prod": [360, 926], "cum_sum": [361, 694, 927], "cumcount": 362, "cummax": [363, 928], "cummin": [364, 929], "cumprod": [365, 930], "cumsum": [366, 698, 931], "cumulative_ev": [367, 932], "cut": [368, 933], "degre": 369, "diff": [370, 481, 935, 1053], "dot": [371, 936], "drop_nan": [372, 937], "dt": [374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991], "base_utc_offset": [374, 940], "cast_time_unit": [375, 941], "combin": [376, 942], "convert_time_zon": [377, 943], "dai": [380, 381, 946, 947], "dst_offset": [382, 948], "epoch": [383, 949], "hour": [384, 385, 950, 951], "is_leap_year": [386, 952], "iso_year": [387, 953], "microsecond": [388, 389, 957, 958], "millisecond": [390, 391, 959, 960], "minut": [392, 393, 962, 963], "month": [394, 964], "month_end": [395, 965], "month_start": [396, 966], "nanosecond": [397, 398, 967, 968], "offset_bi": [399, 969], "ordinal_dai": [400, 970], "quarter": [401, 971], "replace_time_zon": [402, 972], "round": [403, 584, 973, 1129], "second": [404, 405, 974, 975], "strftime": [406, 976], "timestamp": [408, 978], "to_str": [409, 979], "total_dai": [410, 980], "total_hour": [411, 981], "total_microsecond": [412, 982], "total_millisecond": [413, 983], "total_minut": [414, 984], "total_nanosecond": [415, 985], "total_second": [416, 986], "truncat": [417, 987], "week": [418, 988], "weekdai": [419, 989], "with_time_unit": [420, 990], "year": [421, 991], "entropi": [422, 993], "eq": [423, 524], "eq_miss": 424, "ewm_mean": [425, 996], "ewm_std": [426, 997], "ewm_var": [427, 998], "exclud": [428, 708], "exp": [429, 999], "extend_const": [431, 1002], "flatten": 436, "floor": [437, 1007], "floordiv": 438, "forward_fil": 439, "from_json": 440, "gather": [441, 486, 1008, 1058], "ge": 443, "get": [444, 487, 1059], "gt": 445, "hash": [446, 1012], "hist": [448, 1014], "implod": [449, 715, 1015], "inspect": [450, 801], "is_between": [452, 1018], "is_finit": [454, 1022], "is_first": [455, 1023], "is_first_distinct": [456, 1024], "is_in": [457, 1026], "is_infinit": [458, 1027], "is_last": [459, 1029], "is_last_distinct": [460, 1030], "is_nan": [461, 1031], "is_not": 462, "is_not_nan": [463, 1032], "is_not_nul": [464, 1033], "is_nul": [465, 1034], "keep_nam": 467, "kurtosi": [468, 1041], "le": 470, "len": [471, 491, 1042, 1063], "count_match": [479, 480, 605, 606, 1051, 1052, 1156, 1157], "eval": [483, 1055], "length": [492, 619, 1064, 1170], "set_differ": [498, 1070], "set_intersect": [499, 1071], "set_symmetric_differ": [500, 1072], "set_union": [501, 1073], "take": [507, 660, 1079, 1212], "to_arrai": [508, 1080], "log": [511, 1083], "log10": [512, 1084], "log1p": [513, 1085], "lower_bound": [514, 1086], "lt": 515, "map": [516, 540, 720, 808], "map_alia": 517, "map_batch": [518, 721, 809], "map_dict": [519, 1087], "map_el": [520, 1088], "meta": [524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 759], "has_multiple_output": 525, "is_regex_project": 526, "ne": [527, 547], "output_nam": 528, "pop": 529, "root_nam": 530, "tree_format": 531, "undo_alias": 532, "mod": 535, "mode": [536, 1093], "mul": 537, "name": [539, 540, 541, 542, 543, 544, 754, 762, 1096], "keep": 539, "prefix": [541, 558], "suffix": [542, 657], "to_lowercas": [543, 648, 1199], "to_uppercas": [544, 651, 1202], "nan_max": [545, 1097], "nan_min": [546, 1098], "ne_miss": 548, "not_": [549, 1100], "or_": 551, "over": 552, "pct_chang": [553, 1102], "peak_max": [554, 1103], "peak_min": [555, 1104], "pow": 557, "qcut": [560, 1107], "radian": 562, "rank": [563, 1109], "reinterpret": [565, 1111], "repeat_bi": 566, "reshap": [568, 1114], "rle": [570, 1116], "rle_id": [571, 1117], "rolling_appli": [573, 1118], "rolling_map": [574, 1119], "rolling_max": [575, 1120], "rolling_mean": [576, 1121], "rolling_median": [577, 1122], "rolling_min": [578, 1123], "rolling_quantil": [579, 1124], "rolling_skew": [580, 1125], "rolling_std": [581, 1126], "rolling_sum": [582, 1127], "rolling_var": [583, 1128], "round_sig_fig": [585, 1130], "search_sort": [587, 1133], "shrink_dtyp": [591, 1141], "shuffl": [592, 1143], "sign": [593, 1144], "sin": [594, 1145], "sinh": [595, 1146], "skew": [596, 1147], "sort_bi": 599, "sqrt": [600, 1150], "str": [602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203], "contains_ani": [604, 1155], "extract": [611, 1162], "extract_al": [612, 1163], "extract_group": [613, 1164], "json_decod": [614, 1165], "json_extract": [615, 1166], "json_path_match": [616, 1167], "len_byt": [617, 1168], "len_char": [618, 1169], "ljust": [620, 1171], "lstrip": [621, 1172], "n_char": [622, 1173], "pad_end": [623, 1174], "pad_start": [624, 1175], "parse_int": [625, 1176], "replace_al": [627, 1178], "replace_mani": [628, 1179], "rjust": [630, 1181], "rstrip": [631, 1182], "split": [633, 1184], "split_exact": [634, 1185], "splitn": [635, 1186], "strip": [637, 1188], "strip_char": [638, 1189], "strip_chars_end": [639, 1190], "strip_chars_start": [640, 1191], "strip_prefix": [641, 1192], "strip_suffix": [642, 1193], "strptime": [643, 1194], "to_dat": [644, 1195], "to_datetim": [645, 1196], "to_decim": [646, 1197], "to_integ": [647, 1198], "to_tim": [649, 1200], "to_titlecas": [650, 1201], "zfill": [652, 1203], "field": [653, 1204, 1205], "json_encod": [654, 1206], "rename_field": [655, 1207], "sub": 656, "tan": [662, 1214], "tanh": [663, 1215], "to_phys": [664, 1223], "truediv": 666, "unique_count": [668, 1226], "upper_bound": [669, 1227], "value_count": [670, 1228], "where": 672, "xor": 673, "all_horizont": 675, "any_horizont": 677, "arang": 680, "arctan2": 681, "arctan2d": 682, "arg_sort_bi": 683, "arg_wher": 684, "coalesc": 685, "concat_list": 686, "concat_str": 687, "cov": 690, "cum_fold": 692, "cum_reduc": 693, "cum_sum_horizont": 695, "cumfold": 696, "cumreduc": 697, "cumsum_horizont": 699, "date_rang": [701, 702], "datetime_rang": [704, 705], "element": 707, "format": 711, "from_epoch": 712, "group": 713, "int_rang": [716, 717], "lit": 719, "ones": 730, "reduc": 732, "repeat": 733, "rolling_corr": 734, "rolling_cov": 735, "sql_expr": 737, "time_rang": [744, 745], "when": 747, "zero": 748, "categori": [752, 1236], "col": 753, "express": 757, "oper": [763, 870], "conjunct": 763, "comparison": 763, "window": 767, "convers": 768, "parallel": 768, "random": 768, "refer": 769, "input": 770, "output": 770, "feather": 770, "ipc": 770, "parquet": 770, "databas": 770, "json": 770, "avro": 770, "spreadsheet": 770, "apach": 770, "iceberg": 770, "delta": 770, "lake": 770, "dataset": 770, "cach": 774, "collect": 778, "collect_async": 779, "deseri": 782, "explain": 786, "fetch": 788, "profil": [818, 1249], "serial": 826, "show_graph": 830, "with_context": 845, "lazygroupbi": [848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863], "read": 868, "write": 868, "logic": 868, "plan": 868, "selector": 870, "import": 870, "set": [870, 1135], "is_loc": 909, "to_loc": 911, "uses_lexical_ord": 912, "chunk_length": 915, "get_chunk": 1010, "has_valid": 1011, "inner_dtyp": 1016, "is_boolean": 1019, "is_float": 1025, "is_integ": 1028, "is_numer": 1035, "is_sort": 1036, "is_tempor": 1037, "is_utf8": 1039, "new_from_index": 1099, "scatter": 1132, "series_equ": 1134, "set_at_idx": 1136, "to_fram": 1218, "view": 1230, "zip_with": 1231, "sql": 1248, "method": 1248, "assert": 1249, "primit": 1249, "strategi": 1249, "helper": 1249, "util": 1250}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"polars.DataFrame.groupby_dynamic": [[189, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.explode": [[171, "polars-dataframe-explode"]], "polars.DataFrame.iter_columns": [[202, "polars-dataframe-iter-columns"]], "polars.DataFrame.fill_nan": [[173, "polars-dataframe-fill-nan"]], "polars.DataFrame.n_chunks": [[219, "polars-dataframe-n-chunks"]], "polars.DataFrame.gather_every": [[180, "polars-dataframe-gather-every"]], "polars.DataFrame.height": [[193, "polars-dataframe-height"]], "polars.DataFrame.merge_sorted": [[216, "polars-dataframe-merge-sorted"]], "polars.DataFrame.min": [[217, "polars-dataframe-min"]], "polars.DataFrame.join": [[205, "polars-dataframe-join"]], "polars.DataFrame.equals": [[169, "polars-dataframe-equals"]], "polars.DataFrame.get_column": [[181, "polars-dataframe-get-column"]], "polars.DataFrame.glimpse": [[184, "polars-dataframe-glimpse"]], "polars.DataFrame.flags": [[177, "polars-dataframe-flags"]], "polars.DataFrame.is_duplicated": [[198, "polars-dataframe-is-duplicated"]], "polars.DataFrame.iter_slices": [[204, "polars-dataframe-iter-slices"]], "polars.DataFrame.join_asof": [[206, "polars-dataframe-join-asof"]], "polars.DataFrame.estimated_size": [[170, "polars-dataframe-estimated-size"]], "polars.DataFrame.map_rows": [[209, "polars-dataframe-map-rows"]], "polars.DataFrame.hash_rows": [[191, "polars-dataframe-hash-rows"]], "polars.DataFrame.get_column_index": [[182, "polars-dataframe-get-column-index"]], "polars.DataFrame.drop_nulls": [[167, "polars-dataframe-drop-nulls"]], "polars.DataFrame.extend": [[172, "polars-dataframe-extend"]], "polars.DataFrame.filter": [[175, "polars-dataframe-filter"]], "polars.DataFrame.min_horizontal": [[218, "polars-dataframe-min-horizontal"]], "polars.DataFrame.insert_at_idx": [[195, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.lazy": [[207, "polars-dataframe-lazy"]], "polars.DataFrame.group_by_dynamic": [[186, "polars-dataframe-group-by-dynamic"]], "polars.DataFrame.head": [[192, "polars-dataframe-head"]], "polars.DataFrame.mean": [[212, "polars-dataframe-mean"]], "polars.DataFrame.groupby": [[188, "polars-dataframe-groupby"]], "polars.DataFrame.dtypes": [[168, "polars-dataframe-dtypes"]], "polars.DataFrame.hstack": [[194, "polars-dataframe-hstack"]], "polars.DataFrame.group_by": [[185, "polars-dataframe-group-by"]], "polars.DataFrame.insert_column": [[196, "polars-dataframe-insert-column"]], "polars.DataFrame.is_unique": [[200, "polars-dataframe-is-unique"]], "polars.DataFrame.iter_rows": [[203, "polars-dataframe-iter-rows"]], "polars.DataFrame.drop_in_place": [[166, "polars-dataframe-drop-in-place"]], "polars.DataFrame.fill_null": [[174, "polars-dataframe-fill-null"]], "polars.DataFrame.max_horizontal": [[211, "polars-dataframe-max-horizontal"]], "polars.DataFrame.interpolate": [[197, "polars-dataframe-interpolate"]], "polars.DataFrame.drop": [[165, "polars-dataframe-drop"]], "polars.DataFrame.limit": [[208, "polars-dataframe-limit"]], "polars.DataFrame.find_idx_by_name": [[176, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.max": [[210, "polars-dataframe-max"]], "polars.DataFrame.frame_equal": [[179, "polars-dataframe-frame-equal"]], "polars.DataFrame.median": [[214, "polars-dataframe-median"]], "polars.DataFrame.mean_horizontal": [[213, "polars-dataframe-mean-horizontal"]], "polars.DataFrame.melt": [[215, "polars-dataframe-melt"]], "polars.DataFrame.is_empty": [[199, "polars-dataframe-is-empty"]], "polars.DataFrame.group_by_rolling": [[187, "polars-dataframe-group-by-rolling"]], "polars.DataFrame.fold": [[178, "polars-dataframe-fold"]], "polars.DataFrame.groupby_rolling": [[190, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.item": [[201, "polars-dataframe-item"]], "polars.DataFrame.get_columns": [[183, "polars-dataframe-get-columns"]], "polars.read_csv": [[116, "polars-read-csv"]], "polars.from_pandas": [[110, "polars-from-pandas"]], "polars.testing.assert_frame_not_equal": [[140, "polars-testing-assert-frame-not-equal"]], "polars.read_ipc_stream": [[124, "polars-read-ipc-stream"]], "polars.testing.parametric.columns": [[144, "polars-testing-parametric-columns"]], "polars.DataFrame.__dataframe__": [[154, "polars-dataframe-dataframe"]], "polars.from_records": [[111, "polars-from-records"]], "polars.read_delta": [[120, "polars-read-delta"]], "polars.read_excel": [[121, "polars-read-excel"]], "polars.DataFrame.cast": [[158, "polars-dataframe-cast"]], "polars.read_ipc": [[122, "polars-read-ipc"]], "polars.from_repr": [[112, "polars-from-repr"]], "polars.scan_csv": [[130, "polars-scan-csv"]], "polars.read_database": [[118, "polars-read-database"]], "polars.show_versions": [[138, "polars-show-versions"]], "polars.testing.parametric.set_profile": [[149, "polars-testing-parametric-set-profile"]], "polars.scan_delta": [[131, "polars-scan-delta"]], "polars.DataFrame.describe": [[164, "polars-dataframe-describe"]], "polars.testing.parametric.series": [[148, "polars-testing-parametric-series"]], "polars.testing.assert_series_not_equal": [[142, "polars-testing-assert-series-not-equal"]], "polars.read_ods": [[127, "polars-read-ods"]], "polars.scan_ndjson": [[134, "polars-scan-ndjson"]], "polars.scan_ipc": [[133, "polars-scan-ipc"]], "polars.scan_pyarrow_dataset": [[136, "polars-scan-pyarrow-dataset"]], "polars.DataFrame.clear": [[159, "polars-dataframe-clear"]], "polars.get_index_type": [[113, "polars-get-index-type"]], "polars.DataFrame.columns": [[161, "polars-dataframe-columns"]], "polars.testing.assert_series_equal": [[141, "polars-testing-assert-series-equal"]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[114, "polars-io-csv-batched-reader-batchedcsvreader-next-batches"]], "polars.testing.parametric.dataframes": [[146, "polars-testing-parametric-dataframes"]], "polars.read_avro": [[115, "polars-read-avro"]], "polars.read_database_uri": [[119, "polars-read-database-uri"]], "polars.scan_iceberg": [[132, "polars-scan-iceberg"]], "polars.testing.parametric.load_profile": [[147, "polars-testing-parametric-load-profile"]], "polars.DataFrame.apply": [[155, "polars-dataframe-apply"]], "polars.DataFrame.bottom_k": [[157, "polars-dataframe-bottom-k"]], "polars.DataFrame.count": [[163, "polars-dataframe-count"]], "polars.read_ndjson": [[126, "polars-read-ndjson"]], "polars.read_json": [[125, "polars-read-json"]], "polars.using_string_cache": [[151, "polars-using-string-cache"]], "polars.testing.assert_frame_equal": [[139, "polars-testing-assert-frame-equal"]], "Config": [[152, "config"]], "Config options": [[152, "config-options"]], "Config load, save, and current state": [[152, "config-load-save-and-current-state"]], "Use as a context manager": [[152, "use-as-a-context-manager"]], "Use as a function decorator": [[152, "use-as-a-function-decorator"]], "polars.DataFrame.clone": [[160, "polars-dataframe-clone"]], "polars.read_ipc_schema": [[123, "polars-read-ipc-schema"]], "polars.read_parquet": [[128, "polars-read-parquet"]], "polars.testing.parametric.create_list_strategy": [[145, "polars-testing-parametric-create-list-strategy"]], "polars.DataFrame.corr": [[162, "polars-dataframe-corr"]], "polars.scan_parquet": [[135, "polars-scan-parquet"]], "polars.set_random_seed": [[137, "polars-set-random-seed"]], "Aggregation": [[153, "aggregation"], [771, "aggregation"], [871, "aggregation"], [305, "aggregation"]], "polars.read_parquet_schema": [[129, "polars-read-parquet-schema"]], "polars.read_csv_batched": [[117, "polars-read-csv-batched"]], "polars.DataFrame.approx_n_unique": [[156, "polars-dataframe-approx-n-unique"]], "polars.threadpool_size": [[150, "polars-threadpool-size"]], "polars.testing.parametric.column": [[143, "polars-testing-parametric-column"]], "polars.Series.struct.fields": [[1205, "polars-series-struct-fields"]], "polars.Series.struct.schema": [[1208, "polars-series-struct-schema"]], "polars.Series.str.json_decode": [[1165, "polars-series-str-json-decode"]], "polars.Series.str.pad_end": [[1174, "polars-series-str-pad-end"]], "polars.Series.str.strip": [[1188, "polars-series-str-strip"]], "polars.Series.str.replace": [[1177, "polars-series-str-replace"]], "polars.Series.str.n_chars": [[1173, "polars-series-str-n-chars"]], "polars.Series.str.reverse": [[1180, "polars-series-str-reverse"]], "polars.Series.str.splitn": [[1186, "polars-series-str-splitn"]], "polars.Series.str.len_chars": [[1169, "polars-series-str-len-chars"]], "polars.Series.str.split": [[1184, "polars-series-str-split"]], "polars.Series.str.strip_chars_end": [[1190, "polars-series-str-strip-chars-end"]], "polars.Series.str.pad_start": [[1175, "polars-series-str-pad-start"]], "polars.Series.str.parse_int": [[1176, "polars-series-str-parse-int"]], "polars.Series.str.to_integer": [[1198, "polars-series-str-to-integer"]], "polars.Series.struct.json_encode": [[1206, "polars-series-struct-json-encode"]], "polars.Series.str.strip_prefix": [[1192, "polars-series-str-strip-prefix"]], "polars.Series.str.ljust": [[1171, "polars-series-str-ljust"]], "polars.Series.str.extract": [[1162, "polars-series-str-extract"]], "polars.Series.str.strip_chars": [[1189, "polars-series-str-strip-chars"]], "polars.Series.str.to_lowercase": [[1199, "polars-series-str-to-lowercase"]], "polars.Series.str.replace_many": [[1179, "polars-series-str-replace-many"]], "polars.Series.str.json_path_match": [[1167, "polars-series-str-json-path-match"]], "polars.Series.str.extract_groups": [[1164, "polars-series-str-extract-groups"]], "polars.Series.str.to_decimal": [[1197, "polars-series-str-to-decimal"]], "polars.Series.str.to_datetime": [[1196, "polars-series-str-to-datetime"]], "polars.Series.str.zfill": [[1203, "polars-series-str-zfill"]], "polars.Series.str.strip_suffix": [[1193, "polars-series-str-strip-suffix"]], "polars.Series.str.split_exact": [[1185, "polars-series-str-split-exact"]], "polars.Series.str.count_match": [[1156, "polars-series-str-count-match"]], "polars.Series.str.rstrip": [[1182, "polars-series-str-rstrip"]], "polars.Series.str.ends_with": [[1160, "polars-series-str-ends-with"]], "polars.Series.str.rjust": [[1181, "polars-series-str-rjust"]], "polars.Series.str.len_bytes": [[1168, "polars-series-str-len-bytes"]], "polars.Series.struct.rename_fields": [[1207, "polars-series-struct-rename-fields"]], "polars.Series.str.to_date": [[1195, "polars-series-str-to-date"]], "polars.Series.str.to_uppercase": [[1202, "polars-series-str-to-uppercase"]], "polars.Series.str.slice": [[1183, "polars-series-str-slice"]], "polars.Series.str.contains_any": [[1155, "polars-series-str-contains-any"]], "polars.Series.str.starts_with": [[1187, "polars-series-str-starts-with"]], "polars.Series.str.strptime": [[1194, "polars-series-str-strptime"]], "polars.Series.str.to_titlecase": [[1201, "polars-series-str-to-titlecase"]], "polars.Series.struct.unnest": [[1209, "polars-series-struct-unnest"]], "polars.Series.str.to_time": [[1200, "polars-series-str-to-time"]], "polars.Series.str.json_extract": [[1166, "polars-series-str-json-extract"]], "polars.Series.struct.field": [[1204, "polars-series-struct-field"]], "polars.Series.str.replace_all": [[1178, "polars-series-str-replace-all"]], "polars.Series.str.count_matches": [[1157, "polars-series-str-count-matches"]], "polars.Series.str.lengths": [[1170, "polars-series-str-lengths"]], "polars.Series.str.encode": [[1159, "polars-series-str-encode"]], "polars.Series.str.strip_chars_start": [[1191, "polars-series-str-strip-chars-start"]], "polars.Series.str.lstrip": [[1172, "polars-series-str-lstrip"]], "polars.Series.str.extract_all": [[1163, "polars-series-str-extract-all"]], "polars.Series.str.decode": [[1158, "polars-series-str-decode"]], "polars.Series.str.explode": [[1161, "polars-series-str-explode"]], "polars.DataType": [[46, "polars-datatype"]], "polars.Int16": [[54, "polars-int16"]], "polars.Config.set_tbl_cols": [[22, "polars-config-set-tbl-cols"]], "polars.Config.set_decimal_separator": [[14, "polars-config-set-decimal-separator"]], "polars.DataFrame.write_delta": [[39, "polars-dataframe-write-delta"]], "polars.Decimal": [[49, "polars-decimal"]], "polars.Config.set_tbl_dataframe_shape_below": [[24, "polars-config-set-tbl-dataframe-shape-below"]], "polars.Array": [[2, "polars-array"]], "polars.DataFrame.write_avro": [[36, "polars-dataframe-write-avro"]], "polars.Config.set_tbl_hide_dtype_separator": [[29, "polars-config-set-tbl-hide-dtype-separator"]], "polars.Categorical": [[5, "polars-categorical"]], "polars.Config.set_streaming_chunk_size": [[19, "polars-config-set-streaming-chunk-size"]], "polars.Config.set_tbl_cell_alignment": [[20, "polars-config-set-tbl-cell-alignment"]], "polars.Date": [[47, "polars-date"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"], [870, "examples"], [1249, "examples"], [1244, "examples"], [302, "examples"]], "polars.DataFrame.write_csv": [[37, "polars-dataframe-write-csv"]], "polars.Binary": [[3, "polars-binary"]], "polars.Config.set_tbl_column_data_type_inline": [[23, "polars-config-set-tbl-column-data-type-inline"]], "polars.Config.set_fmt_float": [[16, "polars-config-set-fmt-float"]], "polars.Config.set_auto_structify": [[13, "polars-config-set-auto-structify"]], "polars.Config.set_ascii_tables": [[12, "polars-config-set-ascii-tables"]], "polars.Config.set_tbl_hide_column_names": [[27, "polars-config-set-tbl-hide-column-names"]], "polars.Float32": [[52, "polars-float32"]], "polars.Config.set_tbl_rows": [[30, "polars-config-set-tbl-rows"]], "polars.DataFrame.write_ipc_stream": [[42, "polars-dataframe-write-ipc-stream"]], "polars.Config.load_from_file": [[8, "polars-config-load-from-file"]], "polars.Duration": [[50, "polars-duration"]], "polars.Config.set_float_precision": [[15, "polars-config-set-float-precision"]], "polars.Config.state": [[35, "polars-config-state"]], "polars.Config.set_thousands_separator": [[32, "polars-config-set-thousands-separator"]], "polars.Config.save": [[10, "polars-config-save"]], "polars.Config.set_fmt_table_cell_list_len": [[18, "polars-config-set-fmt-table-cell-list-len"]], "polars.Config.set_tbl_formatting": [[25, "polars-config-set-tbl-formatting"]], "polars.Config.save_to_file": [[11, "polars-config-save-to-file"]], "polars.Config.set_tbl_cell_numeric_alignment": [[21, "polars-config-set-tbl-cell-numeric-alignment"]], "polars.DataFrame.write_excel": [[40, "polars-dataframe-write-excel"]], "polars.Config.set_verbose": [[34, "polars-config-set-verbose"]], "polars.DataFrame.write_ipc": [[41, "polars-dataframe-write-ipc"]], "polars.DataFrame.write_json": [[43, "polars-dataframe-write-json"]], "polars.DataFrame.write_parquet": [[45, "polars-dataframe-write-parquet"]], "Index": [[0, "index"]], "polars.Config.activate_decimals": [[6, "polars-config-activate-decimals"]], "polars.Datetime": [[48, "polars-datetime"]], "polars.Config.set_tbl_hide_column_data_types": [[26, "polars-config-set-tbl-hide-column-data-types"]], "polars.Config.restore_defaults": [[9, "polars-config-restore-defaults"]], "polars.Config.set_tbl_width_chars": [[31, "polars-config-set-tbl-width-chars"]], "polars.DataFrame.write_database": [[38, "polars-dataframe-write-database"]], "polars.Enum": [[51, "polars-enum"]], "polars.Config.set_trim_decimal_zeros": [[33, "polars-config-set-trim-decimal-zeros"]], "polars.Float64": [[53, "polars-float64"]], "polars.Config.load": [[7, "polars-config-load"]], "polars.Config.set_fmt_str_lengths": [[17, "polars-config-set-fmt-str-lengths"]], "polars.DataFrame.write_ndjson": [[44, "polars-dataframe-write-ndjson"]], "polars.Boolean": [[4, "polars-boolean"]], "polars.Config.set_tbl_hide_dataframe_shape": [[28, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.Time": [[73, "polars-time"]], "polars.enable_string_cache": [[90, "polars-enable-string-cache"]], "polars.String": [[70, "polars-string"]], "polars.Null": [[62, "polars-null"]], "polars.api.register_series_namespace": [[84, "polars-api-register-series-namespace"]], "polars.exceptions.DuplicateError": [[94, "polars-exceptions-duplicateerror"]], "polars.exceptions.SchemaError": [[100, "polars-exceptions-schemaerror"]], "polars.from_numpy": [[109, "polars-from-numpy"]], "polars.Int64": [[56, "polars-int64"]], "polars.from_arrow": [[105, "polars-from-arrow"]], "polars.exceptions.TooManyRowsReturnedError": [[104, "polars-exceptions-toomanyrowsreturnederror"]], "polars.api.register_lazyframe_namespace": [[83, "polars-api-register-lazyframe-namespace"]], "polars.UInt64": [[76, "polars-uint64"]], "polars.Unknown": [[78, "polars-unknown"]], "polars.exceptions.ColumnNotFoundError": [[92, "polars-exceptions-columnnotfounderror"]], "polars.from_dict": [[107, "polars-from-dict"]], "polars.UInt16": [[74, "polars-uint16"]], "polars.exceptions.PolarsPanicError": [[98, "polars-exceptions-polarspanicerror"]], "polars.Struct": [[72, "polars-struct"]], "polars.SQLContext.execute": [[64, "polars-sqlcontext-execute"]], "polars.UInt32": [[75, "polars-uint32"]], "polars.exceptions.ComputeError": [[93, "polars-exceptions-computeerror"]], "polars.from_dicts": [[108, "polars-from-dicts"]], "polars.align_frames": [[80, "polars-align-frames"]], "polars.api.register_expr_namespace": [[82, "polars-api-register-expr-namespace"]], "polars.Int8": [[57, "polars-int8"]], "polars.LazyFrame.sink_ipc": [[59, "polars-lazyframe-sink-ipc"]], "polars.StringCache": [[71, "polars-stringcache"]], "polars.SQLContext.register": [[65, "polars-sqlcontext-register"]], "polars.concat": [[88, "polars-concat"]], "polars.from_dataframe": [[106, "polars-from-dataframe"]], "polars.UInt8": [[77, "polars-uint8"]], "polars.build_info": [[85, "polars-build-info"]], "polars.exceptions.NoRowsReturnedError": [[97, "polars-exceptions-norowsreturnederror"]], "polars.Object": [[63, "polars-object"]], "polars.SQLContext.register_globals": [[66, "polars-sqlcontext-register-globals"]], "polars.collect_all": [[86, "polars-collect-all"]], "polars.exceptions.StructFieldNotFoundError": [[103, "polars-exceptions-structfieldnotfounderror"]], "polars.List": [[61, "polars-list"]], "polars.SQLContext.tables": [[68, "polars-sqlcontext-tables"]], "polars.collect_all_async": [[87, "polars-collect-all-async"]], "polars.exceptions.RowsError": [[99, "polars-exceptions-rowserror"]], "polars.api.register_dataframe_namespace": [[81, "polars-api-register-dataframe-namespace"]], "polars.exceptions.ArrowError": [[91, "polars-exceptions-arrowerror"]], "polars.disable_string_cache": [[89, "polars-disable-string-cache"]], "polars.Utf8": [[79, "polars-utf8"]], "polars.exceptions.ShapeError": [[102, "polars-exceptions-shapeerror"]], "polars.exceptions.NoDataError": [[96, "polars-exceptions-nodataerror"]], "polars.SQLContext.unregister": [[69, "polars-sqlcontext-unregister"]], "polars.LazyFrame.sink_parquet": [[60, "polars-lazyframe-sink-parquet"]], "polars.exceptions.InvalidOperationError": [[95, "polars-exceptions-invalidoperationerror"]], "polars.LazyFrame.sink_csv": [[58, "polars-lazyframe-sink-csv"]], "polars.Int32": [[55, "polars-int32"]], "polars.exceptions.SchemaFieldNotFoundError": [[101, "polars-exceptions-schemafieldnotfounderror"]], "polars.SQLContext.register_many": [[67, "polars-sqlcontext-register-many"]], "polars.Series.lower_bound": [[1086, "polars-series-lower-bound"]], "polars.Series.mode": [[1093, "polars-series-mode"]], "polars.Series.list.count_matches": [[1052, "polars-series-list-count-matches"]], "polars.Series.list.set_symmetric_difference": [[1072, "polars-series-list-set-symmetric-difference"]], "polars.Series.list.sample": [[1069, "polars-series-list-sample"]], "polars.Series.list.diff": [[1053, "polars-series-list-diff"]], "polars.Series.list.min": [[1067, "polars-series-list-min"]], "polars.Series.list.set_union": [[1073, "polars-series-list-set-union"]], "polars.Series.log": [[1083, "polars-series-log"]], "polars.Series.list.reverse": [[1068, "polars-series-list-reverse"]], "polars.Series.max": [[1089, "polars-series-max"]], "polars.Series.list.to_array": [[1080, "polars-series-list-to-array"]], "polars.Series.list.set_intersection": [[1071, "polars-series-list-set-intersection"]], "polars.Series.list.len": [[1063, "polars-series-list-len"]], "polars.Series.list.count_match": [[1051, "polars-series-list-count-match"]], "polars.Series.nan_min": [[1098, "polars-series-nan-min"]], "polars.Series.list.last": [[1062, "polars-series-list-last"]], "polars.Series.list.eval": [[1055, "polars-series-list-eval"]], "polars.Series.list.drop_nulls": [[1054, "polars-series-list-drop-nulls"]], "polars.Series.map_elements": [[1088, "polars-series-map-elements"]], "polars.Series.map_dict": [[1087, "polars-series-map-dict"]], "polars.Series.list.explode": [[1056, "polars-series-list-explode"]], "polars.Series.list.unique": [[1082, "polars-series-list-unique"]], "polars.Series.median": [[1091, "polars-series-median"]], "polars.Series.list.arg_min": [[1048, "polars-series-list-arg-min"]], "polars.Series.list.slice": [[1075, "polars-series-list-slice"]], "polars.Series.n_chunks": [[1094, "polars-series-n-chunks"]], "polars.Series.list.concat": [[1049, "polars-series-list-concat"]], "polars.Series.list.any": [[1046, "polars-series-list-any"]], "polars.Series.list.set_difference": [[1070, "polars-series-list-set-difference"]], "polars.Series.list.tail": [[1078, "polars-series-list-tail"]], "polars.Series.name": [[1096, "polars-series-name"]], "polars.Series.list.arg_max": [[1047, "polars-series-list-arg-max"]], "polars.Series.nan_max": [[1097, "polars-series-nan-max"]], "polars.Series.min": [[1092, "polars-series-min"]], "polars.Series.list.head": [[1060, "polars-series-list-head"]], "polars.Series.list.sort": [[1076, "polars-series-list-sort"]], "polars.Series.list.to_struct": [[1081, "polars-series-list-to-struct"]], "polars.Series.list.gather": [[1058, "polars-series-list-gather"]], "polars.Series.new_from_index": [[1099, "polars-series-new-from-index"]], "polars.Series.list.get": [[1059, "polars-series-list-get"]], "polars.Series.list.sum": [[1077, "polars-series-list-sum"]], "polars.Series.list.mean": [[1066, "polars-series-list-mean"]], "polars.Series.log10": [[1084, "polars-series-log10"]], "polars.Series.mean": [[1090, "polars-series-mean"]], "polars.Series.list.lengths": [[1064, "polars-series-list-lengths"]], "polars.Series.list.take": [[1079, "polars-series-list-take"]], "polars.Series.list.contains": [[1050, "polars-series-list-contains"]], "polars.Series.list.all": [[1045, "polars-series-list-all"]], "polars.Series.list.first": [[1057, "polars-series-list-first"]], "polars.Series.list.join": [[1061, "polars-series-list-join"]], "polars.Series.log1p": [[1085, "polars-series-log1p"]], "polars.Series.n_unique": [[1095, "polars-series-n-unique"]], "polars.Series.list.max": [[1065, "polars-series-list-max"]], "polars.Series.list.shift": [[1074, "polars-series-list-shift"]], "polars.Series.gather": [[1008, "polars-series-gather"]], "polars.Series.is_utf8": [[1039, "polars-series-is-utf8"]], "polars.Series.dtype": [[992, "polars-series-dtype"]], "polars.Series.kurtosis": [[1041, "polars-series-kurtosis"]], "polars.Series.hash": [[1012, "polars-series-hash"]], "polars.Series.head": [[1013, "polars-series-head"]], "polars.Series.is_between": [[1018, "polars-series-is-between"]], "polars.Series.is_null": [[1034, "polars-series-is-null"]], "polars.Series.is_finite": [[1022, "polars-series-is-finite"]], "polars.Series.filter": [[1005, "polars-series-filter"]], "polars.Series.is_infinite": [[1027, "polars-series-is-infinite"]], "polars.Series.is_integer": [[1028, "polars-series-is-integer"]], "polars.Series.has_validity": [[1011, "polars-series-has-validity"]], "polars.Series.is_not_null": [[1033, "polars-series-is-not-null"]], "polars.Series.fill_nan": [[1003, "polars-series-fill-nan"]], "polars.Series.extend_constant": [[1002, "polars-series-extend-constant"]], "polars.Series.exp": [[999, "polars-series-exp"]], "polars.Series.hist": [[1014, "polars-series-hist"]], "polars.Series.is_last": [[1029, "polars-series-is-last"]], "polars.Series.is_duplicated": [[1020, "polars-series-is-duplicated"]], "polars.Series.is_last_distinct": [[1030, "polars-series-is-last-distinct"]], "polars.Series.entropy": [[993, "polars-series-entropy"]], "polars.Series.gather_every": [[1009, "polars-series-gather-every"]], "polars.Series.is_first_distinct": [[1024, "polars-series-is-first-distinct"]], "polars.Series.extend": [[1001, "polars-series-extend"]], "polars.Series.dt.year": [[991, "polars-series-dt-year"]], "polars.Series.is_boolean": [[1019, "polars-series-is-boolean"]], "polars.Series.item": [[1040, "polars-series-item"]], "polars.Series.is_sorted": [[1036, "polars-series-is-sorted"]], "polars.Series.ewm_mean": [[996, "polars-series-ewm-mean"]], "polars.Series.is_temporal": [[1037, "polars-series-is-temporal"]], "polars.Series.get_chunks": [[1010, "polars-series-get-chunks"]], "polars.Series.is_unique": [[1038, "polars-series-is-unique"]], "polars.Series.is_nan": [[1031, "polars-series-is-nan"]], "polars.Series.interpolate": [[1017, "polars-series-interpolate"]], "polars.Series.limit": [[1043, "polars-series-limit"]], "polars.Series.dt.with_time_unit": [[990, "polars-series-dt-with-time-unit"]], "polars.Series.list": [[1044, "polars-series-list"]], "polars.Series.floor": [[1007, "polars-series-floor"]], "polars.Series.equals": [[994, "polars-series-equals"]], "polars.Series.inner_dtype": [[1016, "polars-series-inner-dtype"]], "polars.Series.is_empty": [[1021, "polars-series-is-empty"]], "polars.Series.is_numeric": [[1035, "polars-series-is-numeric"]], "polars.Series.len": [[1042, "polars-series-len"]], "polars.Series.explode": [[1000, "polars-series-explode"]], "polars.Series.implode": [[1015, "polars-series-implode"]], "polars.Series.estimated_size": [[995, "polars-series-estimated-size"]], "polars.Series.fill_null": [[1004, "polars-series-fill-null"]], "polars.Series.flags": [[1006, "polars-series-flags"]], "polars.Series.ewm_std": [[997, "polars-series-ewm-std"]], "polars.Series.is_first": [[1023, "polars-series-is-first"]], "polars.Series.is_float": [[1025, "polars-series-is-float"]], "polars.Series.is_not_nan": [[1032, "polars-series-is-not-nan"]], "polars.Series.ewm_var": [[998, "polars-series-ewm-var"]], "polars.Series.is_in": [[1026, "polars-series-is-in"]], "polars.Series.shrink_to_fit": [[1142, "polars-series-shrink-to-fit"]], "polars.Series.slice": [[1148, "polars-series-slice"]], "polars.Series.rle_id": [[1117, "polars-series-rle-id"]], "polars.Series.rank": [[1109, "polars-series-rank"]], "polars.Series.pct_change": [[1102, "polars-series-pct-change"]], "polars.Series.rechunk": [[1110, "polars-series-rechunk"]], "polars.Series.reverse": [[1115, "polars-series-reverse"]], "polars.Series.not_": [[1100, "polars-series-not"]], "polars.Series.shuffle": [[1143, "polars-series-shuffle"]], "polars.Series.sample": [[1131, "polars-series-sample"]], "polars.Series.skew": [[1147, "polars-series-skew"]], "polars.Series.rolling_map": [[1119, "polars-series-rolling-map"]], "polars.Series.reshape": [[1114, "polars-series-reshape"]], "polars.Series.str.concat": [[1153, "polars-series-str-concat"]], "polars.Series.qcut": [[1107, "polars-series-qcut"]], "polars.Series.shift": [[1139, "polars-series-shift"]], "polars.Series.plot": [[1105, "polars-series-plot"]], "polars.Series.scatter": [[1132, "polars-series-scatter"]], "polars.Series.set_at_idx": [[1136, "polars-series-set-at-idx"]], "polars.Series.rolling_quantile": [[1124, "polars-series-rolling-quantile"]], "polars.Series.series_equal": [[1134, "polars-series-series-equal"]], "polars.Series.rolling_skew": [[1125, "polars-series-rolling-skew"]], "polars.Series.rle": [[1116, "polars-series-rle"]], "polars.Series.rename": [[1112, "polars-series-rename"]], "polars.Series.sort": [[1149, "polars-series-sort"]], "polars.Series.product": [[1106, "polars-series-product"]], "polars.Series.replace": [[1113, "polars-series-replace"]], "polars.Series.rolling_median": [[1122, "polars-series-rolling-median"]], "polars.Series.round": [[1129, "polars-series-round"]], "polars.Series.rolling_std": [[1126, "polars-series-rolling-std"]], "polars.Series.shape": [[1138, "polars-series-shape"]], "polars.Series.sin": [[1145, "polars-series-sin"]], "polars.Series.std": [[1151, "polars-series-std"]], "polars.Series.str": [[1152, "polars-series-str"]], "polars.Series.sqrt": [[1150, "polars-series-sqrt"]], "polars.Series.peak_min": [[1104, "polars-series-peak-min"]], "polars.Series.rolling_apply": [[1118, "polars-series-rolling-apply"]], "polars.Series.set_sorted": [[1137, "polars-series-set-sorted"]], "polars.Series.shrink_dtype": [[1141, "polars-series-shrink-dtype"]], "polars.Series.rolling_min": [[1123, "polars-series-rolling-min"]], "polars.Series.shift_and_fill": [[1140, "polars-series-shift-and-fill"]], "polars.Series.set": [[1135, "polars-series-set"]], "polars.Series.reinterpret": [[1111, "polars-series-reinterpret"]], "polars.Series.rolling_var": [[1128, "polars-series-rolling-var"]], "polars.Series.round_sig_figs": [[1130, "polars-series-round-sig-figs"]], "polars.Series.rolling_mean": [[1121, "polars-series-rolling-mean"]], "polars.Series.str.contains": [[1154, "polars-series-str-contains"]], "polars.Series.quantile": [[1108, "polars-series-quantile"]], "polars.Series.rolling_sum": [[1127, "polars-series-rolling-sum"]], "polars.Series.sign": [[1144, "polars-series-sign"]], "polars.Series.rolling_max": [[1120, "polars-series-rolling-max"]], "polars.Series.null_count": [[1101, "polars-series-null-count"]], "polars.Series.peak_max": [[1103, "polars-series-peak-max"]], "polars.Series.sinh": [[1146, "polars-series-sinh"]], "polars.Series.search_sorted": [[1133, "polars-series-search-sorted"]], "polars.Series.arctan": [[882, "polars-series-arctan"]], "polars.Series.chunk_lengths": [[915, "polars-series-chunk-lengths"]], "polars.Series.arg_sort": [[886, "polars-series-arg-sort"]], "polars.Series.describe": [[934, "polars-series-describe"]], "polars.Series.arr.all": [[889, "polars-series-arr-all"]], "polars.Series.cast": [[906, "polars-series-cast"]], "polars.Series.cummax": [[928, "polars-series-cummax"]], "polars.Series.clip_min": [[919, "polars-series-clip-min"]], "polars.Series.cum_sum": [[927, "polars-series-cum-sum"]], "polars.Series.bin.decode": [[901, "polars-series-bin-decode"]], "polars.Series.cbrt": [[913, "polars-series-cbrt"]], "polars.Series.cat.is_local": [[909, "polars-series-cat-is-local"]], "polars.Series.arg_max": [[884, "polars-series-arg-max"]], "polars.Series.bin.contains": [[900, "polars-series-bin-contains"]], "polars.Series.arr.arg_min": [[892, "polars-series-arr-arg-min"]], "polars.Series.arr.arg_max": [[891, "polars-series-arr-arg-max"]], "polars.Series.cat.set_ordering": [[910, "polars-series-cat-set-ordering"]], "polars.Series.clip": [[917, "polars-series-clip"]], "polars.Series.arg_min": [[885, "polars-series-arg-min"]], "polars.Series.cut": [[933, "polars-series-cut"]], "polars.Series.arr.sort": [[896, "polars-series-arr-sort"]], "polars.Series.arr.min": [[894, "polars-series-arr-min"]], "polars.Series.bin.encode": [[902, "polars-series-bin-encode"]], "polars.Series.cat.to_local": [[911, "polars-series-cat-to-local"]], "polars.Series.clone": [[920, "polars-series-clone"]], "polars.Series.arcsin": [[880, "polars-series-arcsin"]], "polars.Series.arctanh": [[883, "polars-series-arctanh"]], "polars.Series.cumprod": [[930, "polars-series-cumprod"]], "polars.Series.arg_true": [[887, "polars-series-arg-true"]], "polars.Series.arr.any": [[890, "polars-series-arr-any"]], "polars.Series.arr.reverse": [[895, "polars-series-arr-reverse"]], "polars.Series.arr.to_list": [[898, "polars-series-arr-to-list"]], "polars.Series.arg_unique": [[888, "polars-series-arg-unique"]], "polars.Series.cat": [[907, "polars-series-cat"]], "polars.Series.cum_min": [[925, "polars-series-cum-min"]], "polars.Series.cum_max": [[924, "polars-series-cum-max"]], "polars.Series.cos": [[921, "polars-series-cos"]], "polars.Series.cot": [[923, "polars-series-cot"]], "polars.Series.cumsum": [[931, "polars-series-cumsum"]], "polars.Series.bin.ends_with": [[903, "polars-series-bin-ends-with"]], "polars.Series.cum_prod": [[926, "polars-series-cum-prod"]], "polars.Series.arr.max": [[893, "polars-series-arr-max"]], "polars.Series.clip_max": [[918, "polars-series-clip-max"]], "polars.Series.arcsinh": [[881, "polars-series-arcsinh"]], "polars.Series.cat.uses_lexical_ordering": [[912, "polars-series-cat-uses-lexical-ordering"]], "polars.Series.bottom_k": [[905, "polars-series-bottom-k"]], "polars.Series.arr.sum": [[897, "polars-series-arr-sum"]], "polars.Series.bin.starts_with": [[904, "polars-series-bin-starts-with"]], "polars.Series.cummin": [[929, "polars-series-cummin"]], "polars.Series.cosh": [[922, "polars-series-cosh"]], "polars.Series.cat.get_categories": [[908, "polars-series-cat-get-categories"]], "polars.Series.ceil": [[914, "polars-series-ceil"]], "polars.Series.clear": [[916, "polars-series-clear"]], "polars.Series.cumulative_eval": [[932, "polars-series-cumulative-eval"]], "polars.Series.arr.unique": [[899, "polars-series-arr-unique"]], "polars.Series.dt.total_hours": [[981, "polars-series-dt-total-hours"]], "polars.Series.dt.month_end": [[965, "polars-series-dt-month-end"]], "polars.Series.dt.mean": [[955, "polars-series-dt-mean"]], "polars.Series.dt.total_seconds": [[986, "polars-series-dt-total-seconds"]], "polars.Series.dt.base_utc_offset": [[940, "polars-series-dt-base-utc-offset"]], "polars.Series.dt.combine": [[942, "polars-series-dt-combine"]], "polars.Series.dt.month_start": [[966, "polars-series-dt-month-start"]], "polars.Series.dt.iso_year": [[953, "polars-series-dt-iso-year"]], "polars.Series.dt.milliseconds": [[960, "polars-series-dt-milliseconds"]], "polars.Series.dt.strftime": [[976, "polars-series-dt-strftime"]], "polars.Series.dt.is_leap_year": [[952, "polars-series-dt-is-leap-year"]], "polars.Series.dt.total_days": [[980, "polars-series-dt-total-days"]], "polars.Series.dt.total_milliseconds": [[983, "polars-series-dt-total-milliseconds"]], "polars.Series.dt.datetime": [[945, "polars-series-dt-datetime"]], "polars.Series.dt.minutes": [[963, "polars-series-dt-minutes"]], "polars.Series.dt.epoch": [[949, "polars-series-dt-epoch"]], "polars.Series.dt.microsecond": [[957, "polars-series-dt-microsecond"]], "polars.Series.diff": [[935, "polars-series-diff"]], "polars.Series.dt.days": [[947, "polars-series-dt-days"]], "polars.Series.dt.hour": [[950, "polars-series-dt-hour"]], "polars.Series.dt.total_minutes": [[984, "polars-series-dt-total-minutes"]], "polars.Series.dt.nanosecond": [[967, "polars-series-dt-nanosecond"]], "polars.Series.drop_nans": [[937, "polars-series-drop-nans"]], "polars.Series.dt.total_nanoseconds": [[985, "polars-series-dt-total-nanoseconds"]], "polars.Series.dt.offset_by": [[969, "polars-series-dt-offset-by"]], "polars.Series.dt.hours": [[951, "polars-series-dt-hours"]], "polars.Series.dt.total_microseconds": [[982, "polars-series-dt-total-microseconds"]], "polars.Series.dt.replace_time_zone": [[972, "polars-series-dt-replace-time-zone"]], "polars.Series.dt.timestamp": [[978, "polars-series-dt-timestamp"]], "polars.Series.dt.seconds": [[975, "polars-series-dt-seconds"]], "polars.Series.dt.week": [[988, "polars-series-dt-week"]], "polars.Series.dt.day": [[946, "polars-series-dt-day"]], "polars.Series.dt.microseconds": [[958, "polars-series-dt-microseconds"]], "polars.Series.drop_nulls": [[938, "polars-series-drop-nulls"]], "polars.Series.dt.minute": [[962, "polars-series-dt-minute"]], "polars.Series.dt.median": [[956, "polars-series-dt-median"]], "polars.Series.dt.quarter": [[971, "polars-series-dt-quarter"]], "polars.Series.dt.weekday": [[989, "polars-series-dt-weekday"]], "polars.Series.dt.truncate": [[987, "polars-series-dt-truncate"]], "polars.Series.dt.min": [[961, "polars-series-dt-min"]], "polars.Series.dt.nanoseconds": [[968, "polars-series-dt-nanoseconds"]], "polars.Series.dt": [[939, "polars-series-dt"]], "polars.Series.dt.round": [[973, "polars-series-dt-round"]], "polars.Series.dt.millisecond": [[959, "polars-series-dt-millisecond"]], "polars.Series.dt.date": [[944, "polars-series-dt-date"]], "polars.Series.dot": [[936, "polars-series-dot"]], "polars.Series.dt.to_string": [[979, "polars-series-dt-to-string"]], "polars.Series.dt.max": [[954, "polars-series-dt-max"]], "polars.Series.dt.second": [[974, "polars-series-dt-second"]], "polars.Series.dt.time": [[977, "polars-series-dt-time"]], "polars.Series.dt.cast_time_unit": [[941, "polars-series-dt-cast-time-unit"]], "polars.Series.dt.ordinal_day": [[970, "polars-series-dt-ordinal-day"]], "polars.Series.dt.convert_time_zone": [[943, "polars-series-dt-convert-time-zone"]], "polars.Series.dt.dst_offset": [[948, "polars-series-dt-dst-offset"]], "polars.Series.dt.month": [[964, "polars-series-dt-month"]], "polars.LazyFrame.gather_every": [[793, "polars-lazyframe-gather-every"]], "polars.LazyFrame.join_asof": [[804, "polars-lazyframe-join-asof"]], "polars.LazyFrame.fetch": [[788, "polars-lazyframe-fetch"]], "polars.LazyFrame.select": [[824, "polars-lazyframe-select"]], "polars.LazyFrame.fill_nan": [[789, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.clone": [[777, "polars-lazyframe-clone"]], "polars.LazyFrame.collect": [[778, "polars-lazyframe-collect"]], "polars.LazyFrame.interpolate": [[802, "polars-lazyframe-interpolate"]], "polars.LazyFrame.deserialize": [[782, "polars-lazyframe-deserialize"]], "polars.LazyFrame.quantile": [[819, "polars-lazyframe-quantile"]], "polars.LazyFrame.approx_n_unique": [[772, "polars-lazyframe-approx-n-unique"]], "polars.LazyFrame.count": [[781, "polars-lazyframe-count"]], "polars.LazyFrame.profile": [[818, "polars-lazyframe-profile"]], "polars.LazyFrame.limit": [[807, "polars-lazyframe-limit"]], "polars.LazyFrame.collect_async": [[779, "polars-lazyframe-collect-async"]], "polars.LazyFrame.drop_nulls": [[784, "polars-lazyframe-drop-nulls"]], "polars.LazyFrame.min": [[815, "polars-lazyframe-min"]], "polars.LazyFrame.map": [[808, "polars-lazyframe-map"]], "polars.LazyFrame.group_by_rolling": [[796, "polars-lazyframe-group-by-rolling"]], "polars.LazyFrame.dtypes": [[785, "polars-lazyframe-dtypes"]], "polars.LazyFrame.map_batches": [[809, "polars-lazyframe-map-batches"]], "polars.LazyFrame.cast": [[775, "polars-lazyframe-cast"]], "polars.LazyFrame.head": [[800, "polars-lazyframe-head"]], "polars.LazyFrame.rename": [[820, "polars-lazyframe-rename"]], "polars.LazyFrame.group_by": [[794, "polars-lazyframe-group-by"]], "polars.LazyFrame.merge_sorted": [[814, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.columns": [[780, "polars-lazyframe-columns"]], "polars.LazyFrame.null_count": [[816, "polars-lazyframe-null-count"]], "polars.LazyFrame.fill_null": [[790, "polars-lazyframe-fill-null"]], "polars.LazyFrame.rolling": [[822, "polars-lazyframe-rolling"]], "polars.LazyFrame.melt": [[813, "polars-lazyframe-melt"]], "polars.LazyFrame.lazy": [[806, "polars-lazyframe-lazy"]], "polars.LazyFrame.mean": [[811, "polars-lazyframe-mean"]], "polars.LazyFrame.inspect": [[801, "polars-lazyframe-inspect"]], "polars.LazyFrame.max": [[810, "polars-lazyframe-max"]], "polars.LazyFrame.pipe": [[817, "polars-lazyframe-pipe"]], "polars.LazyFrame.drop": [[783, "polars-lazyframe-drop"]], "polars.LazyFrame.median": [[812, "polars-lazyframe-median"]], "Input/output": [[770, "input-output"]], "CSV": [[770, "csv"]], "Feather/ IPC": [[770, "feather-ipc"]], "Parquet": [[770, "parquet"]], "Database": [[770, "database"]], "JSON": [[770, "json"]], "AVRO": [[770, "avro"]], "Spreadsheet": [[770, "spreadsheet"]], "Apache Iceberg": [[770, "apache-iceberg"]], "Delta Lake": [[770, "delta-lake"]], "Datasets": [[770, "datasets"]], "BatchedCsvReader": [[770, "batchedcsvreader"]], "polars.LazyFrame.reverse": [[821, "polars-lazyframe-reverse"]], "polars.LazyFrame.first": [[792, "polars-lazyframe-first"]], "polars.LazyFrame.explain": [[786, "polars-lazyframe-explain"]], "polars.LazyFrame.groupby_dynamic": [[798, "polars-lazyframe-groupby-dynamic"]], "polars.LazyFrame.join": [[803, "polars-lazyframe-join"]], "polars.LazyFrame.filter": [[791, "polars-lazyframe-filter"]], "polars.LazyFrame.groupby_rolling": [[799, "polars-lazyframe-groupby-rolling"]], "polars.LazyFrame.explode": [[787, "polars-lazyframe-explode"]], "polars.LazyFrame.group_by_dynamic": [[795, "polars-lazyframe-group-by-dynamic"]], "polars.LazyFrame.cache": [[774, "polars-lazyframe-cache"]], "polars.LazyFrame.clear": [[776, "polars-lazyframe-clear"]], "polars.LazyFrame.bottom_k": [[773, "polars-lazyframe-bottom-k"]], "polars.LazyFrame.last": [[805, "polars-lazyframe-last"]], "polars.LazyFrame.groupby": [[797, "polars-lazyframe-groupby"]], "polars.LazyFrame.schema": [[823, "polars-lazyframe-schema"]], "polars.date_range": [[701, "polars-date-range"]], "polars.concat_list": [[686, "polars-concat-list"]], "polars.cumfold": [[696, "polars-cumfold"]], "polars.Expr.unique_counts": [[668, "polars-expr-unique-counts"]], "polars.cum_sum": [[694, "polars-cum-sum"]], "polars.arange": [[680, "polars-arange"]], "polars.Expr.xor": [[673, "polars-expr-xor"]], "polars.Expr.truediv": [[666, "polars-expr-truediv"]], "polars.cum_reduce": [[693, "polars-cum-reduce"]], "polars.Expr.take": [[660, "polars-expr-take"]], "polars.groups": [[713, "polars-groups"]], "polars.any_horizontal": [[677, "polars-any-horizontal"]], "polars.apply": [[678, "polars-apply"]], "polars.approx_n_unique": [[679, "polars-approx-n-unique"]], "polars.all": [[674, "polars-all"]], "polars.Expr.unique": [[667, "polars-expr-unique"]], "polars.Expr.where": [[672, "polars-expr-where"]], "polars.datetime": [[703, "polars-datetime"]], "polars.datetime_range": [[704, "polars-datetime-range"]], "polars.first": [[709, "polars-first"]], "polars.from_epoch": [[712, "polars-from-epoch"]], "polars.all_horizontal": [[675, "polars-all-horizontal"]], "polars.Expr.value_counts": [[670, "polars-expr-value-counts"]], "polars.exclude": [[708, "polars-exclude"]], "polars.duration": [[706, "polars-duration"]], "polars.Expr.take_every": [[661, "polars-expr-take-every"]], "polars.arctan2d": [[682, "polars-arctan2d"]], "polars.cum_count": [[691, "polars-cum-count"]], "polars.Expr.tanh": [[663, "polars-expr-tanh"]], "polars.element": [[707, "polars-element"]], "polars.count": [[689, "polars-count"]], "polars.cov": [[690, "polars-cov"]], "polars.Expr.to_physical": [[664, "polars-expr-to-physical"]], "polars.Expr.var": [[671, "polars-expr-var"]], "polars.cumreduce": [[697, "polars-cumreduce"]], "polars.cum_sum_horizontal": [[695, "polars-cum-sum-horizontal"]], "polars.cumsum_horizontal": [[699, "polars-cumsum-horizontal"]], "polars.arg_where": [[684, "polars-arg-where"]], "polars.fold": [[710, "polars-fold"]], "polars.datetime_ranges": [[705, "polars-datetime-ranges"]], "polars.arg_sort_by": [[683, "polars-arg-sort-by"]], "polars.format": [[711, "polars-format"]], "polars.corr": [[688, "polars-corr"]], "polars.date_ranges": [[702, "polars-date-ranges"]], "polars.date": [[700, "polars-date"]], "polars.any": [[676, "polars-any"]], "polars.head": [[714, "polars-head"]], "polars.cumsum": [[698, "polars-cumsum"]], "polars.cum_fold": [[692, "polars-cum-fold"]], "polars.concat_str": [[687, "polars-concat-str"]], "polars.Expr.upper_bound": [[669, "polars-expr-upper-bound"]], "polars.Expr.top_k": [[665, "polars-expr-top-k"]], "polars.coalesce": [[685, "polars-coalesce"]], "polars.Expr.tan": [[662, "polars-expr-tan"]], "polars.arctan2": [[681, "polars-arctan2"]], "polars.LazyFrame.take_every": [[836, "polars-lazyframe-take-every"]], "polars.Series.abs": [[872, "polars-series-abs"]], "polars.lazyframe.group_by.LazyGroupBy.last": [[854, "polars-lazyframe-group-by-lazygroupby-last"]], "polars.lazyframe.group_by.LazyGroupBy.count": [[851, "polars-lazyframe-group-by-lazygroupby-count"]], "Manipulation/selection": [[869, "manipulation-selection"], [1243, "manipulation-selection"], [761, "manipulation-selection"], [301, "manipulation-selection"]], "polars.LazyFrame.sum": [[834, "polars-lazyframe-sum"]], "polars.LazyFrame.update": [[840, "polars-lazyframe-update"]], "polars.LazyFrame.slice": [[831, "polars-lazyframe-slice"]], "polars.lazyframe.group_by.LazyGroupBy.n_unique": [[860, "polars-lazyframe-group-by-lazygroupby-n-unique"]], "polars.lazyframe.group_by.LazyGroupBy.max": [[856, "polars-lazyframe-group-by-lazygroupby-max"]], "polars.LazyFrame.with_row_count": [[846, "polars-lazyframe-with-row-count"]], "polars.LazyFrame.with_columns_seq": [[844, "polars-lazyframe-with-columns-seq"]], "polars.LazyFrame.var": [[841, "polars-lazyframe-var"]], "polars.Series.arccosh": [[879, "polars-series-arccosh"]], "polars.LazyFrame.sort": [[832, "polars-lazyframe-sort"]], "polars.lazyframe.group_by.LazyGroupBy.mean": [[857, "polars-lazyframe-group-by-lazygroupby-mean"]], "polars.LazyFrame.set_sorted": [[827, "polars-lazyframe-set-sorted"]], "polars.LazyFrame.tail": [[835, "polars-lazyframe-tail"]], "polars.Series.apply": [[877, "polars-series-apply"]], "polars.LazyFrame.show_graph": [[830, "polars-lazyframe-show-graph"]], "polars.LazyFrame.unique": [[838, "polars-lazyframe-unique"]], "polars.Series.arccos": [[878, "polars-series-arccos"]], "polars.LazyFrame.with_row_index": [[847, "polars-lazyframe-with-row-index"]], "polars.LazyFrame.unnest": [[839, "polars-lazyframe-unnest"]], "polars.lazyframe.group_by.LazyGroupBy.head": [[853, "polars-lazyframe-group-by-lazygroupby-head"]], "polars.lazyframe.group_by.LazyGroupBy.apply": [[850, "polars-lazyframe-group-by-lazygroupby-apply"]], "polars.LazyFrame.with_columns": [[843, "polars-lazyframe-with-columns"]], "Attributes": [[864, "attributes"], [1233, "attributes"], [294, "attributes"]], "polars.LazyFrame.top_k": [[837, "polars-lazyframe-top-k"]], "GroupBy": [[866, "groupby"], [298, "groupby"]], "polars.Series.alias": [[873, "polars-series-alias"]], "polars.Series.append": [[876, "polars-series-append"]], "polars.LazyFrame.shift_and_fill": [[829, "polars-lazyframe-shift-and-fill"]], "polars.LazyFrame.shift": [[828, "polars-lazyframe-shift"]], "polars.LazyFrame.select_seq": [[825, "polars-lazyframe-select-seq"]], "polars.Series.all": [[874, "polars-series-all"]], "polars.lazyframe.group_by.LazyGroupBy.map_groups": [[855, "polars-lazyframe-group-by-lazygroupby-map-groups"]], "polars.lazyframe.group_by.LazyGroupBy.tail": [[863, "polars-lazyframe-group-by-lazygroupby-tail"]], "Selectors": [[870, "selectors"]], "Importing": [[870, "importing"]], "Set operations": [[870, "set-operations"]], "Functions": [[870, "functions"], [756, "functions"], [768, "functions"]], "polars.lazyframe.group_by.LazyGroupBy.sum": [[862, "polars-lazyframe-group-by-lazygroupby-sum"]], "polars.LazyFrame.width": [[842, "polars-lazyframe-width"]], "polars.lazyframe.group_by.LazyGroupBy.median": [[858, "polars-lazyframe-group-by-lazygroupby-median"]], "Miscellaneous": [[868, "miscellaneous"], [1242, "miscellaneous"], [760, "miscellaneous"], [768, "miscellaneous"], [300, "miscellaneous"]], "Read/write logical plan": [[868, "read-write-logical-plan"]], "Descriptive": [[865, "descriptive"], [1238, "descriptive"], [296, "descriptive"]], "polars.LazyFrame.with_context": [[845, "polars-lazyframe-with-context"]], "LazyFrame": [[867, "lazyframe"]], "polars.lazyframe.group_by.LazyGroupBy.first": [[852, "polars-lazyframe-group-by-lazygroupby-first"]], "polars.Series.any": [[875, "polars-series-any"]], "polars.lazyframe.group_by.LazyGroupBy.all": [[849, "polars-lazyframe-group-by-lazygroupby-all"]], "polars.lazyframe.group_by.LazyGroupBy.min": [[859, "polars-lazyframe-group-by-lazygroupby-min"]], "polars.lazyframe.group_by.LazyGroupBy.quantile": [[861, "polars-lazyframe-group-by-lazygroupby-quantile"]], "polars.lazyframe.group_by.LazyGroupBy.agg": [[848, "polars-lazyframe-group-by-lazygroupby-agg"]], "polars.LazyFrame.serialize": [[826, "polars-lazyframe-serialize"]], "polars.LazyFrame.std": [[833, "polars-lazyframe-std"]], "String": [[1245, "string"], [764, "string"]], "polars.Series.to_list": [[1220, "polars-series-to-list"]], "polars.Series.value_counts": [[1228, "polars-series-value-counts"]], "Utils": [[1250, "utils"]], "List": [[1241, "list"], [758, "list"]], "polars.Series.take_every": [[1213, "polars-series-take-every"]], "Series": [[1240, "series"]], "SQL": [[1248, "sql"]], "Methods": [[1248, "methods"]], "polars.Series.unique": [[1225, "polars-series-unique"]], "polars.Series.view": [[1230, "polars-series-view"]], "Computation": [[1237, "computation"], [755, "computation"], [295, "computation"]], "Testing": [[1249, "testing"]], "Asserts": [[1249, "asserts"]], "Parametric testing": [[1249, "parametric-testing"]], "Polars primitives": [[1249, "polars-primitives"]], "Strategy helpers": [[1249, "strategy-helpers"]], "Profiles": [[1249, "profiles"]], "polars.Series.to_dummies": [[1217, "polars-series-to-dummies"]], "polars.Series.to_physical": [[1223, "polars-series-to-physical"]], "polars.Series.to_frame": [[1218, "polars-series-to-frame"]], "polars.Series.to_init_repr": [[1219, "polars-series-to-init-repr"]], "polars.Series.to_numpy": [[1221, "polars-series-to-numpy"]], "polars.Series.to_arrow": [[1216, "polars-series-to-arrow"]], "polars.Series.tan": [[1214, "polars-series-tan"]], "Boolean": [[1235, "boolean"], [751, "boolean"]], "polars.Series.var": [[1229, "polars-series-var"]], "polars.Series.take": [[1212, "polars-series-take"]], "polars.Series.tanh": [[1215, "polars-series-tanh"]], "polars.Series.to_pandas": [[1222, "polars-series-to-pandas"]], "polars.Series.upper_bound": [[1227, "polars-series-upper-bound"]], "Plot": [[1244, "plot"], [302, "plot"]], "polars.Series.zip_with": [[1231, "polars-series-zip-with"]], "polars.Series.unique_counts": [[1226, "polars-series-unique-counts"]], "Array": [[1232, "array"], [749, "array"]], "Temporal": [[1247, "temporal"], [766, "temporal"], [303, "temporal"]], "polars.Series.tail": [[1211, "polars-series-tail"]], "Categories": [[1236, "categories"], [752, "categories"]], "Struct": [[1246, "struct"], [765, "struct"]], "polars.Series.sum": [[1210, "polars-series-sum"]], "polars.Series.top_k": [[1224, "polars-series-top-k"]], "Export": [[1239, "export"], [297, "export"]], "Binary": [[1234, "binary"], [763, "binary"], [750, "binary"]], "polars.Expr.str.split": [[633, "polars-expr-str-split"]], "polars.Expr.str.splitn": [[635, "polars-expr-str-splitn"]], "polars.Expr.str.ends_with": [[609, "polars-expr-str-ends-with"]], "polars.Expr.str.starts_with": [[636, "polars-expr-str-starts-with"]], "polars.Expr.str.pad_start": [[624, "polars-expr-str-pad-start"]], "polars.Expr.str.encode": [[608, "polars-expr-str-encode"]], "polars.Expr.str.to_decimal": [[646, "polars-expr-str-to-decimal"]], "polars.Expr.str.replace_many": [[628, "polars-expr-str-replace-many"]], "polars.Expr.str.rjust": [[630, "polars-expr-str-rjust"]], "polars.Expr.suffix": [[657, "polars-expr-suffix"]], "polars.Expr.tail": [[659, "polars-expr-tail"]], "polars.Expr.str.to_datetime": [[645, "polars-expr-str-to-datetime"]], "polars.Expr.str.split_exact": [[634, "polars-expr-str-split-exact"]], "polars.Expr.str.json_path_match": [[616, "polars-expr-str-json-path-match"]], "polars.Expr.str.zfill": [[652, "polars-expr-str-zfill"]], "polars.Expr.struct.json_encode": [[654, "polars-expr-struct-json-encode"]], "polars.Expr.str.rstrip": [[631, "polars-expr-str-rstrip"]], "polars.Expr.str.len_chars": [[618, "polars-expr-str-len-chars"]], "polars.Expr.sub": [[656, "polars-expr-sub"]], "polars.Expr.str.replace_all": [[627, "polars-expr-str-replace-all"]], "polars.Expr.str.strip_chars": [[638, "polars-expr-str-strip-chars"]], "polars.Expr.str.strip_prefix": [[641, "polars-expr-str-strip-prefix"]], "polars.Expr.str.to_uppercase": [[651, "polars-expr-str-to-uppercase"]], "polars.Expr.str.to_titlecase": [[650, "polars-expr-str-to-titlecase"]], "polars.Expr.struct.rename_fields": [[655, "polars-expr-struct-rename-fields"]], "polars.Expr.str.json_extract": [[615, "polars-expr-str-json-extract"]], "polars.Expr.sum": [[658, "polars-expr-sum"]], "polars.Expr.str.replace": [[626, "polars-expr-str-replace"]], "polars.Expr.str.lstrip": [[621, "polars-expr-str-lstrip"]], "polars.Expr.str.ljust": [[620, "polars-expr-str-ljust"]], "polars.Expr.str.count_matches": [[606, "polars-expr-str-count-matches"]], "polars.Expr.str.strptime": [[643, "polars-expr-str-strptime"]], "polars.Expr.struct.field": [[653, "polars-expr-struct-field"]], "polars.Expr.str.to_lowercase": [[648, "polars-expr-str-to-lowercase"]], "polars.Expr.str.strip": [[637, "polars-expr-str-strip"]], "polars.Expr.str.reverse": [[629, "polars-expr-str-reverse"]], "polars.Expr.str.extract_all": [[612, "polars-expr-str-extract-all"]], "polars.Expr.str.pad_end": [[623, "polars-expr-str-pad-end"]], "polars.Expr.str.strip_chars_start": [[640, "polars-expr-str-strip-chars-start"]], "polars.Expr.str.lengths": [[619, "polars-expr-str-lengths"]], "polars.Expr.str.count_match": [[605, "polars-expr-str-count-match"]], "polars.Expr.str.to_time": [[649, "polars-expr-str-to-time"]], "polars.Expr.str.decode": [[607, "polars-expr-str-decode"]], "polars.Expr.str.len_bytes": [[617, "polars-expr-str-len-bytes"]], "polars.Expr.str.extract": [[611, "polars-expr-str-extract"]], "polars.Expr.str.slice": [[632, "polars-expr-str-slice"]], "polars.Expr.str.to_integer": [[647, "polars-expr-str-to-integer"]], "polars.Expr.str.parse_int": [[625, "polars-expr-str-parse-int"]], "polars.Expr.str.explode": [[610, "polars-expr-str-explode"]], "polars.Expr.str.json_decode": [[614, "polars-expr-str-json-decode"]], "polars.Expr.str.to_date": [[644, "polars-expr-str-to-date"]], "polars.Expr.str.n_chars": [[622, "polars-expr-str-n-chars"]], "polars.Expr.str.strip_suffix": [[642, "polars-expr-str-strip-suffix"]], "polars.Expr.str.strip_chars_end": [[639, "polars-expr-str-strip-chars-end"]], "polars.Expr.str.extract_groups": [[613, "polars-expr-str-extract-groups"]], "polars.Expr.mean": [[522, "polars-expr-mean"]], "polars.Expr.median": [[523, "polars-expr-median"]], "polars.Expr.list.sort": [[504, "polars-expr-list-sort"]], "polars.Expr.log10": [[512, "polars-expr-log10"]], "polars.Expr.map_elements": [[520, "polars-expr-map-elements"]], "polars.Expr.list.to_struct": [[509, "polars-expr-list-to-struct"]], "polars.Expr.name.to_uppercase": [[544, "polars-expr-name-to-uppercase"]], "polars.Expr.list.set_difference": [[498, "polars-expr-list-set-difference"]], "polars.Expr.list.sample": [[497, "polars-expr-list-sample"]], "polars.Expr.list.sum": [[505, "polars-expr-list-sum"]], "polars.Expr.list.tail": [[506, "polars-expr-list-tail"]], "polars.Expr.name.keep": [[539, "polars-expr-name-keep"]], "polars.Expr.log": [[511, "polars-expr-log"]], "polars.Expr.meta.undo_aliases": [[532, "polars-expr-meta-undo-aliases"]], "polars.Expr.meta.ne": [[527, "polars-expr-meta-ne"]], "polars.Expr.list.to_array": [[508, "polars-expr-list-to-array"]], "polars.Expr.meta.write_json": [[533, "polars-expr-meta-write-json"]], "polars.Expr.list.take": [[507, "polars-expr-list-take"]], "polars.Expr.map_dict": [[519, "polars-expr-map-dict"]], "polars.Expr.min": [[534, "polars-expr-min"]], "polars.Expr.not_": [[549, "polars-expr-not"]], "polars.Expr.name.suffix": [[542, "polars-expr-name-suffix"]], "polars.Expr.lt": [[515, "polars-expr-lt"]], "polars.Expr.list.slice": [[503, "polars-expr-list-slice"]], "polars.Expr.nan_min": [[546, "polars-expr-nan-min"]], "polars.Expr.name.to_lowercase": [[543, "polars-expr-name-to-lowercase"]], "polars.Expr.name.map": [[540, "polars-expr-name-map"]], "polars.Expr.nan_max": [[545, "polars-expr-nan-max"]], "polars.Expr.meta.has_multiple_outputs": [[525, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.list.shift": [[502, "polars-expr-list-shift"]], "polars.Expr.meta.pop": [[529, "polars-expr-meta-pop"]], "polars.Expr.list.set_intersection": [[499, "polars-expr-list-set-intersection"]], "polars.Expr.meta.is_regex_projection": [[526, "polars-expr-meta-is-regex-projection"]], "polars.Expr.ne_missing": [[548, "polars-expr-ne-missing"]], "polars.Expr.meta.eq": [[524, "polars-expr-meta-eq"]], "polars.Expr.max": [[521, "polars-expr-max"]], "polars.Expr.list.reverse": [[496, "polars-expr-list-reverse"]], "polars.Expr.n_unique": [[538, "polars-expr-n-unique"]], "polars.Expr.mode": [[536, "polars-expr-mode"]], "polars.Expr.map_alias": [[517, "polars-expr-map-alias"]], "polars.Expr.meta.root_names": [[530, "polars-expr-meta-root-names"]], "polars.Expr.log1p": [[513, "polars-expr-log1p"]], "polars.Expr.meta.tree_format": [[531, "polars-expr-meta-tree-format"]], "polars.Expr.mod": [[535, "polars-expr-mod"]], "polars.Expr.name.prefix": [[541, "polars-expr-name-prefix"]], "polars.Expr.list.unique": [[510, "polars-expr-list-unique"]], "polars.Expr.map": [[516, "polars-expr-map"]], "polars.Expr.mul": [[537, "polars-expr-mul"]], "polars.Expr.lower_bound": [[514, "polars-expr-lower-bound"]], "polars.Expr.list.min": [[495, "polars-expr-list-min"]], "polars.Expr.map_batches": [[518, "polars-expr-map-batches"]], "polars.Expr.ne": [[547, "polars-expr-ne"]], "polars.Expr.list.set_symmetric_difference": [[500, "polars-expr-list-set-symmetric-difference"]], "polars.Expr.list.set_union": [[501, "polars-expr-list-set-union"]], "polars.Expr.meta.output_name": [[528, "polars-expr-meta-output-name"]], "polars.Expr.pct_change": [[553, "polars-expr-pct-change"]], "polars.Expr.reverse": [[569, "polars-expr-reverse"]], "polars.Expr.shift_and_fill": [[590, "polars-expr-shift-and-fill"]], "polars.Expr.std": [[601, "polars-expr-std"]], "polars.Expr.rolling_max": [[575, "polars-expr-rolling-max"]], "polars.Expr.sort": [[598, "polars-expr-sort"]], "polars.Expr.sin": [[594, "polars-expr-sin"]], "polars.Expr.slice": [[597, "polars-expr-slice"]], "polars.Expr.quantile": [[561, "polars-expr-quantile"]], "polars.Expr.reshape": [[568, "polars-expr-reshape"]], "polars.Expr.rolling_min": [[578, "polars-expr-rolling-min"]], "polars.Expr.round_sig_figs": [[585, "polars-expr-round-sig-figs"]], "polars.Expr.rolling_skew": [[580, "polars-expr-rolling-skew"]], "polars.Expr.pow": [[557, "polars-expr-pow"]], "polars.Expr.set_sorted": [[588, "polars-expr-set-sorted"]], "polars.Expr.prefix": [[558, "polars-expr-prefix"]], "polars.Expr.rolling_mean": [[576, "polars-expr-rolling-mean"]], "polars.Expr.str.contains": [[603, "polars-expr-str-contains"]], "polars.Expr.rolling_var": [[583, "polars-expr-rolling-var"]], "polars.Expr.rolling": [[572, "polars-expr-rolling"]], "polars.Expr.rle": [[570, "polars-expr-rle"]], "polars.Expr.round": [[584, "polars-expr-round"]], "polars.Expr.repeat_by": [[566, "polars-expr-repeat-by"]], "polars.Expr.rle_id": [[571, "polars-expr-rle-id"]], "polars.Expr.skew": [[596, "polars-expr-skew"]], "polars.Expr.over": [[552, "polars-expr-over"]], "polars.Expr.null_count": [[550, "polars-expr-null-count"]], "polars.Expr.qcut": [[560, "polars-expr-qcut"]], "polars.Expr.rank": [[563, "polars-expr-rank"]], "polars.Expr.rolling_map": [[574, "polars-expr-rolling-map"]], "polars.Expr.replace": [[567, "polars-expr-replace"]], "polars.Expr.rolling_apply": [[573, "polars-expr-rolling-apply"]], "polars.Expr.rolling_std": [[581, "polars-expr-rolling-std"]], "polars.Expr.sign": [[593, "polars-expr-sign"]], "polars.Expr.sqrt": [[600, "polars-expr-sqrt"]], "polars.Expr.str.concat": [[602, "polars-expr-str-concat"]], "polars.Expr.sinh": [[595, "polars-expr-sinh"]], "polars.Expr.product": [[559, "polars-expr-product"]], "polars.Expr.sort_by": [[599, "polars-expr-sort-by"]], "polars.Expr.peak_min": [[555, "polars-expr-peak-min"]], "polars.Expr.rechunk": [[564, "polars-expr-rechunk"]], "polars.Expr.rolling_median": [[577, "polars-expr-rolling-median"]], "polars.Expr.peak_max": [[554, "polars-expr-peak-max"]], "polars.Expr.search_sorted": [[587, "polars-expr-search-sorted"]], "polars.Expr.shrink_dtype": [[591, "polars-expr-shrink-dtype"]], "polars.Expr.pipe": [[556, "polars-expr-pipe"]], "polars.Expr.or_": [[551, "polars-expr-or"]], "polars.Expr.rolling_sum": [[582, "polars-expr-rolling-sum"]], "polars.Expr.radians": [[562, "polars-expr-radians"]], "polars.Expr.shift": [[589, "polars-expr-shift"]], "polars.Expr.str.contains_any": [[604, "polars-expr-str-contains-any"]], "polars.Expr.sample": [[586, "polars-expr-sample"]], "polars.Expr.shuffle": [[592, "polars-expr-shuffle"]], "polars.Expr.reinterpret": [[565, "polars-expr-reinterpret"]], "polars.Expr.rolling_quantile": [[579, "polars-expr-rolling-quantile"]], "polars.Expr.is_not": [[462, "polars-expr-is-not"]], "polars.Expr.list.arg_max": [[475, "polars-expr-list-arg-max"]], "polars.Expr.from_json": [[440, "polars-expr-from-json"]], "polars.Expr.limit": [[472, "polars-expr-limit"]], "polars.Expr.list.concat": [[477, "polars-expr-list-concat"]], "polars.Expr.is_last": [[459, "polars-expr-is-last"]], "polars.Expr.list.len": [[491, "polars-expr-list-len"]], "polars.Expr.keep_name": [[467, "polars-expr-keep-name"]], "polars.Expr.list.max": [[493, "polars-expr-list-max"]], "polars.Expr.is_unique": [[466, "polars-expr-is-unique"]], "polars.Expr.is_not_nan": [[463, "polars-expr-is-not-nan"]], "polars.Expr.head": [[447, "polars-expr-head"]], "polars.Expr.is_between": [[452, "polars-expr-is-between"]], "polars.Expr.is_nan": [[461, "polars-expr-is-nan"]], "polars.Expr.list.count_matches": [[480, "polars-expr-list-count-matches"]], "polars.Expr.list.explode": [[484, "polars-expr-list-explode"]], "polars.Expr.list.last": [[490, "polars-expr-list-last"]], "polars.Expr.is_in": [[457, "polars-expr-is-in"]], "polars.Expr.is_duplicated": [[453, "polars-expr-is-duplicated"]], "polars.Expr.is_finite": [[454, "polars-expr-is-finite"]], "polars.Expr.gather": [[441, "polars-expr-gather"]], "polars.Expr.list.arg_min": [[476, "polars-expr-list-arg-min"]], "polars.Expr.list.eval": [[483, "polars-expr-list-eval"]], "polars.Expr.list.gather": [[486, "polars-expr-list-gather"]], "polars.Expr.interpolate": [[451, "polars-expr-interpolate"]], "polars.Expr.len": [[471, "polars-expr-len"]], "polars.Expr.list.drop_nulls": [[482, "polars-expr-list-drop-nulls"]], "polars.Expr.list.all": [[473, "polars-expr-list-all"]], "polars.Expr.list.first": [[485, "polars-expr-list-first"]], "polars.Expr.gt": [[445, "polars-expr-gt"]], "polars.Expr.get": [[444, "polars-expr-get"]], "polars.Expr.list.head": [[488, "polars-expr-list-head"]], "polars.Expr.list.join": [[489, "polars-expr-list-join"]], "polars.Expr.list.lengths": [[492, "polars-expr-list-lengths"]], "polars.Expr.kurtosis": [[468, "polars-expr-kurtosis"]], "polars.Expr.is_first": [[455, "polars-expr-is-first"]], "polars.Expr.list.get": [[487, "polars-expr-list-get"]], "polars.Expr.is_infinite": [[458, "polars-expr-is-infinite"]], "polars.Expr.hist": [[448, "polars-expr-hist"]], "polars.Expr.list.count_match": [[479, "polars-expr-list-count-match"]], "polars.Expr.is_first_distinct": [[456, "polars-expr-is-first-distinct"]], "polars.Expr.list.any": [[474, "polars-expr-list-any"]], "polars.Expr.is_last_distinct": [[460, "polars-expr-is-last-distinct"]], "polars.Expr.last": [[469, "polars-expr-last"]], "polars.Expr.list.contains": [[478, "polars-expr-list-contains"]], "polars.Expr.is_null": [[465, "polars-expr-is-null"]], "polars.Expr.le": [[470, "polars-expr-le"]], "polars.Expr.list.diff": [[481, "polars-expr-list-diff"]], "polars.Expr.ge": [[443, "polars-expr-ge"]], "polars.Expr.hash": [[446, "polars-expr-hash"]], "polars.Expr.list.mean": [[494, "polars-expr-list-mean"]], "polars.Expr.gather_every": [[442, "polars-expr-gather-every"]], "polars.Expr.implode": [[449, "polars-expr-implode"]], "polars.Expr.inspect": [[450, "polars-expr-inspect"]], "polars.Expr.is_not_null": [[464, "polars-expr-is-not-null"]], "polars.Expr.dt.minutes": [[393, "polars-expr-dt-minutes"]], "polars.Expr.exclude": [[428, "polars-expr-exclude"]], "polars.Expr.flatten": [[436, "polars-expr-flatten"]], "polars.Expr.filter": [[434, "polars-expr-filter"]], "polars.Expr.dt.timestamp": [[408, "polars-expr-dt-timestamp"]], "polars.Expr.dt.microseconds": [[389, "polars-expr-dt-microseconds"]], "polars.Expr.dt.ordinal_day": [[400, "polars-expr-dt-ordinal-day"]], "polars.Expr.dt.year": [[421, "polars-expr-dt-year"]], "polars.Expr.dt.minute": [[392, "polars-expr-dt-minute"]], "polars.Expr.eq": [[423, "polars-expr-eq"]], "polars.Expr.ewm_mean": [[425, "polars-expr-ewm-mean"]], "polars.Expr.eq_missing": [[424, "polars-expr-eq-missing"]], "polars.Expr.dt.total_microseconds": [[412, "polars-expr-dt-total-microseconds"]], "polars.Expr.forward_fill": [[439, "polars-expr-forward-fill"]], "polars.Expr.ewm_std": [[426, "polars-expr-ewm-std"]], "polars.Expr.dt.nanosecond": [[397, "polars-expr-dt-nanosecond"]], "polars.Expr.dt.total_nanoseconds": [[415, "polars-expr-dt-total-nanoseconds"]], "polars.Expr.dt.millisecond": [[390, "polars-expr-dt-millisecond"]], "polars.Expr.dt.total_seconds": [[416, "polars-expr-dt-total-seconds"]], "polars.Expr.dt.with_time_unit": [[420, "polars-expr-dt-with-time-unit"]], "polars.Expr.ewm_var": [[427, "polars-expr-ewm-var"]], "polars.Expr.fill_nan": [[432, "polars-expr-fill-nan"]], "polars.Expr.dt.seconds": [[405, "polars-expr-dt-seconds"]], "polars.Expr.dt.is_leap_year": [[386, "polars-expr-dt-is-leap-year"]], "polars.Expr.dt.nanoseconds": [[398, "polars-expr-dt-nanoseconds"]], "polars.Expr.dt.total_minutes": [[414, "polars-expr-dt-total-minutes"]], "polars.Expr.exp": [[429, "polars-expr-exp"]], "polars.Expr.dt.month_start": [[396, "polars-expr-dt-month-start"]], "polars.Expr.floordiv": [[438, "polars-expr-floordiv"]], "polars.Expr.dt.second": [[404, "polars-expr-dt-second"]], "polars.Expr.dt.week": [[418, "polars-expr-dt-week"]], "polars.Expr.dt.month": [[394, "polars-expr-dt-month"]], "polars.Expr.entropy": [[422, "polars-expr-entropy"]], "polars.Expr.dt.round": [[403, "polars-expr-dt-round"]], "polars.Expr.dt.offset_by": [[399, "polars-expr-dt-offset-by"]], "polars.Expr.dt.replace_time_zone": [[402, "polars-expr-dt-replace-time-zone"]], "polars.Expr.dt.time": [[407, "polars-expr-dt-time"]], "polars.Expr.explode": [[430, "polars-expr-explode"]], "polars.Expr.dt.total_milliseconds": [[413, "polars-expr-dt-total-milliseconds"]], "polars.Expr.fill_null": [[433, "polars-expr-fill-null"]], "polars.Expr.dt.to_string": [[409, "polars-expr-dt-to-string"]], "polars.Expr.dt.quarter": [[401, "polars-expr-dt-quarter"]], "polars.Expr.dt.weekday": [[419, "polars-expr-dt-weekday"]], "polars.Expr.dt.iso_year": [[387, "polars-expr-dt-iso-year"]], "polars.Expr.dt.hours": [[385, "polars-expr-dt-hours"]], "polars.Expr.floor": [[437, "polars-expr-floor"]], "polars.Expr.dt.total_days": [[410, "polars-expr-dt-total-days"]], "polars.Expr.first": [[435, "polars-expr-first"]], "polars.Expr.dt.total_hours": [[411, "polars-expr-dt-total-hours"]], "polars.Expr.dt.microsecond": [[388, "polars-expr-dt-microsecond"]], "polars.Expr.extend_constant": [[431, "polars-expr-extend-constant"]], "polars.Expr.dt.milliseconds": [[391, "polars-expr-dt-milliseconds"]], "polars.Expr.dt.strftime": [[406, "polars-expr-dt-strftime"]], "polars.Expr.dt.truncate": [[417, "polars-expr-dt-truncate"]], "polars.Expr.dt.month_end": [[395, "polars-expr-dt-month-end"]], "polars.Expr.dot": [[371, "polars-expr-dot"]], "polars.Expr.arr.unique": [[337, "polars-expr-arr-unique"]], "polars.Expr.ceil": [[349, "polars-expr-ceil"]], "polars.Expr.cum_count": [[357, "polars-expr-cum-count"]], "polars.Expr.arr.sort": [[334, "polars-expr-arr-sort"]], "polars.Expr.dt.epoch": [[383, "polars-expr-dt-epoch"]], "polars.Expr.arr.max": [[331, "polars-expr-arr-max"]], "polars.Expr.backward_fill": [[338, "polars-expr-backward-fill"]], "polars.Expr.bin.starts_with": [[343, "polars-expr-bin-starts-with"]], "polars.Expr.arr.reverse": [[333, "polars-expr-arr-reverse"]], "polars.Expr.diff": [[370, "polars-expr-diff"]], "polars.Expr.drop_nulls": [[373, "polars-expr-drop-nulls"]], "polars.Expr.dt.convert_time_zone": [[377, "polars-expr-dt-convert-time-zone"]], "polars.Expr.bin.decode": [[340, "polars-expr-bin-decode"]], "polars.Expr.bottom_k": [[344, "polars-expr-bottom-k"]], "polars.Expr.cumcount": [[362, "polars-expr-cumcount"]], "polars.Expr.cummin": [[364, "polars-expr-cummin"]], "polars.Expr.arr.sum": [[335, "polars-expr-arr-sum"]], "polars.Expr.cast": [[345, "polars-expr-cast"]], "polars.Expr.cut": [[368, "polars-expr-cut"]], "polars.Expr.dt.base_utc_offset": [[374, "polars-expr-dt-base-utc-offset"]], "polars.Expr.arr.to_list": [[336, "polars-expr-arr-to-list"]], "polars.Expr.dt.day": [[380, "polars-expr-dt-day"]], "polars.Expr.degrees": [[369, "polars-expr-degrees"]], "polars.Expr.bin.ends_with": [[342, "polars-expr-bin-ends-with"]], "polars.Expr.clip_max": [[351, "polars-expr-clip-max"]], "polars.Expr.cosh": [[354, "polars-expr-cosh"]], "polars.Expr.cot": [[355, "polars-expr-cot"]], "polars.Expr.dt.cast_time_unit": [[375, "polars-expr-dt-cast-time-unit"]], "polars.Expr.dt.combine": [[376, "polars-expr-dt-combine"]], "polars.Expr.arr.min": [[332, "polars-expr-arr-min"]], "polars.Expr.cummax": [[363, "polars-expr-cummax"]], "polars.Expr.cum_prod": [[360, "polars-expr-cum-prod"]], "polars.Expr.dt.date": [[378, "polars-expr-dt-date"]], "polars.Expr.clip_min": [[352, "polars-expr-clip-min"]], "polars.Expr.count": [[356, "polars-expr-count"]], "polars.Expr.dt.datetime": [[379, "polars-expr-dt-datetime"]], "polars.Expr.dt.dst_offset": [[382, "polars-expr-dt-dst-offset"]], "polars.Expr.cat.set_ordering": [[347, "polars-expr-cat-set-ordering"]], "polars.Expr.bin.encode": [[341, "polars-expr-bin-encode"]], "polars.Expr.drop_nans": [[372, "polars-expr-drop-nans"]], "polars.Expr.cbrt": [[348, "polars-expr-cbrt"]], "polars.Expr.cos": [[353, "polars-expr-cos"]], "polars.Expr.cumulative_eval": [[367, "polars-expr-cumulative-eval"]], "polars.Expr.dt.hour": [[384, "polars-expr-dt-hour"]], "polars.Expr.cum_sum": [[361, "polars-expr-cum-sum"]], "polars.Expr.dt.days": [[381, "polars-expr-dt-days"]], "polars.Expr.arr.arg_min": [[330, "polars-expr-arr-arg-min"]], "polars.Expr.cum_max": [[358, "polars-expr-cum-max"]], "polars.Expr.cum_min": [[359, "polars-expr-cum-min"]], "polars.Expr.bin.contains": [[339, "polars-expr-bin-contains"]], "polars.Expr.cumprod": [[365, "polars-expr-cumprod"]], "polars.Expr.cumsum": [[366, "polars-expr-cumsum"]], "polars.Expr.clip": [[350, "polars-expr-clip"]], "polars.Expr.cat.get_categories": [[346, "polars-expr-cat-get-categories"]], "polars.DataFrame.with_columns": [[273, "polars-dataframe-with-columns"]], "polars.DataFrame.replace_column": [[232, "polars-dataframe-replace-column"]], "polars.DataFrame.select": [[240, "polars-dataframe-select"]], "polars.DataFrame.shift_and_fill": [[245, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.std": [[249, "polars-dataframe-std"]], "polars.DataFrame.schema": [[239, "polars-dataframe-schema"]], "polars.DataFrame.width": [[272, "polars-dataframe-width"]], "polars.DataFrame.var": [[270, "polars-dataframe-var"]], "polars.DataFrame.rows_by_key": [[237, "polars-dataframe-rows-by-key"]], "polars.DataFrame.row": [[235, "polars-dataframe-row"]], "polars.DataFrame.replace_at_idx": [[231, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.update": [[268, "polars-dataframe-update"]], "polars.DataFrame.unstack": [[267, "polars-dataframe-unstack"]], "polars.DataFrame.to_series": [[261, "polars-dataframe-to-series"]], "polars.DataFrame.unique": [[265, "polars-dataframe-unique"]], "polars.DataFrame.quantile": [[227, "polars-dataframe-quantile"]], "polars.DataFrame.sum": [[250, "polars-dataframe-sum"]], "polars.DataFrame.shrink_to_fit": [[246, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.to_dicts": [[256, "polars-dataframe-to-dicts"]], "polars.DataFrame.sum_horizontal": [[251, "polars-dataframe-sum-horizontal"]], "polars.DataFrame.rechunk": [[228, "polars-dataframe-rechunk"]], "polars.DataFrame.set_sorted": [[242, "polars-dataframe-set-sorted"]], "polars.DataFrame.reverse": [[233, "polars-dataframe-reverse"]], "polars.DataFrame.rolling": [[234, "polars-dataframe-rolling"]], "polars.DataFrame.transpose": [[264, "polars-dataframe-transpose"]], "polars.DataFrame.sample": [[238, "polars-dataframe-sample"]], "polars.DataFrame.sort": [[248, "polars-dataframe-sort"]], "polars.DataFrame.to_init_repr": [[258, "polars-dataframe-to-init-repr"]], "polars.DataFrame.rename": [[229, "polars-dataframe-rename"]], "polars.DataFrame.top_k": [[263, "polars-dataframe-top-k"]], "polars.DataFrame.with_columns_seq": [[274, "polars-dataframe-with-columns-seq"]], "polars.DataFrame.shift": [[244, "polars-dataframe-shift"]], "polars.DataFrame.tail": [[252, "polars-dataframe-tail"]], "polars.DataFrame.vstack": [[271, "polars-dataframe-vstack"]], "polars.DataFrame.pivot": [[224, "polars-dataframe-pivot"]], "polars.DataFrame.partition_by": [[222, "polars-dataframe-partition-by"]], "polars.DataFrame.take_every": [[253, "polars-dataframe-take-every"]], "polars.DataFrame.to_numpy": [[259, "polars-dataframe-to-numpy"]], "polars.DataFrame.product": [[226, "polars-dataframe-product"]], "polars.DataFrame.to_dummies": [[257, "polars-dataframe-to-dummies"]], "polars.DataFrame.to_struct": [[262, "polars-dataframe-to-struct"]], "polars.DataFrame.n_unique": [[220, "polars-dataframe-n-unique"]], "polars.DataFrame.to_arrow": [[254, "polars-dataframe-to-arrow"]], "polars.DataFrame.rows": [[236, "polars-dataframe-rows"]], "polars.DataFrame.replace": [[230, "polars-dataframe-replace"]], "polars.DataFrame.select_seq": [[241, "polars-dataframe-select-seq"]], "polars.DataFrame.upsample": [[269, "polars-dataframe-upsample"]], "polars.DataFrame.plot": [[225, "polars-dataframe-plot"]], "polars.DataFrame.to_pandas": [[260, "polars-dataframe-to-pandas"]], "polars.DataFrame.pipe": [[223, "polars-dataframe-pipe"]], "polars.DataFrame.slice": [[247, "polars-dataframe-slice"]], "polars.DataFrame.shape": [[243, "polars-dataframe-shape"]], "polars.DataFrame.null_count": [[221, "polars-dataframe-null-count"]], "polars.DataFrame.unnest": [[266, "polars-dataframe-unnest"]], "polars.DataFrame.to_dict": [[255, "polars-dataframe-to-dict"]], "Operators": [[763, "operators"]], "Conjunction": [[763, "conjunction"]], "Comparison": [[763, "comparison"]], "Numeric": [[763, "numeric"], [303, "numeric"]], "polars.sum_horizontal": [[741, "polars-sum-horizontal"]], "polars.sum": [[740, "polars-sum"]], "polars.ones": [[730, "polars-ones"]], "polars.rolling_cov": [[735, "polars-rolling-cov"]], "polars.map_batches": [[721, "polars-map-batches"]], "polars.max": [[723, "polars-max"]], "polars.map": [[720, "polars-map"]], "Meta": [[759, "meta"]], "polars.max_horizontal": [[724, "polars-max-horizontal"]], "polars.mean": [[725, "polars-mean"]], "polars.int_range": [[716, "polars-int-range"]], "Conversion": [[768, "conversion"]], "Parallelization": [[768, "parallelization"]], "Random": [[768, "random"]], "StringCache": [[768, "stringcache"]], "polars.time_range": [[744, "polars-time-range"]], "polars.median": [[726, "polars-median"]], "polars.n_unique": [[729, "polars-n-unique"]], "polars.when": [[747, "polars-when"]], "polars.time_ranges": [[745, "polars-time-ranges"]], "polars.col": [[753, "polars-col"]], "polars.int_ranges": [[717, "polars-int-ranges"]], "polars.implode": [[715, "polars-implode"]], "polars.min_horizontal": [[728, "polars-min-horizontal"]], "polars.select": [[736, "polars-select"]], "polars.sql_expr": [[737, "polars-sql-expr"]], "polars.var": [[746, "polars-var"]], "polars.reduce": [[732, "polars-reduce"]], "polars.struct": [[739, "polars-struct"]], "polars.min": [[727, "polars-min"]], "polars.zeros": [[748, "polars-zeros"]], "polars.tail": [[742, "polars-tail"]], "Name": [[762, "name"]], "polars.last": [[718, "polars-last"]], "Columns / names": [[754, "columns-names"]], "polars.repeat": [[733, "polars-repeat"]], "polars.rolling_corr": [[734, "polars-rolling-corr"]], "polars.std": [[738, "polars-std"]], "polars.map_groups": [[722, "polars-map-groups"]], "Expressions": [[757, "expressions"]], "polars.lit": [[719, "polars-lit"]], "API reference": [[769, "api-reference"]], "polars.quantile": [[731, "polars-quantile"]], "polars.time": [[743, "polars-time"]], "Window": [[767, "window"]], "polars.Expr.arg_min": [[323, "polars-expr-arg-min"]], "polars.dataframe.group_by.GroupBy.max": [[286, "polars-dataframe-group-by-groupby-max"]], "polars.dataframe.group_by.GroupBy.count": [[281, "polars-dataframe-group-by-groupby-count"]], "polars.dataframe.group_by.GroupBy.median": [[288, "polars-dataframe-group-by-groupby-median"]], "polars.Expr.arg_true": [[325, "polars-expr-arg-true"]], "polars.Expr.arr.any": [[328, "polars-expr-arr-any"]], "polars.Expr.abs": [[306, "polars-expr-abs"]], "polars.dataframe.group_by.GroupBy.first": [[282, "polars-dataframe-group-by-groupby-first"]], "polars.DataFrame.with_row_index": [[276, "polars-dataframe-with-row-index"]], "polars.Expr.add": [[307, "polars-expr-add"]], "polars.Expr.arctan": [[320, "polars-expr-arctan"]], "polars.Expr.arr.arg_max": [[329, "polars-expr-arr-arg-max"]], "polars.Expr.arctanh": [[321, "polars-expr-arctanh"]], "polars.dataframe.group_by.GroupBy.head": [[283, "polars-dataframe-group-by-groupby-head"]], "polars.Expr.arccosh": [[317, "polars-expr-arccosh"]], "polars.Expr.approx_n_unique": [[315, "polars-expr-approx-n-unique"]], "Exceptions": [[304, "exceptions"]], "polars.dataframe.group_by.GroupBy.mean": [[287, "polars-dataframe-group-by-groupby-mean"]], "polars.dataframe.group_by.GroupBy.quantile": [[291, "polars-dataframe-group-by-groupby-quantile"]], "polars.Expr.arg_unique": [[326, "polars-expr-arg-unique"]], "polars.dataframe.group_by.GroupBy.all": [[279, "polars-dataframe-group-by-groupby-all"]], "polars.Expr.arccos": [[316, "polars-expr-arccos"]], "polars.Expr.and_": [[311, "polars-expr-and"]], "polars.Expr.apply": [[314, "polars-expr-apply"]], "polars.Expr.any": [[312, "polars-expr-any"]], "polars.Expr.arr.all": [[327, "polars-expr-arr-all"]], "polars.Expr.arg_max": [[322, "polars-expr-arg-max"]], "polars.Expr.append": [[313, "polars-expr-append"]], "polars.dataframe.group_by.GroupBy.apply": [[280, "polars-dataframe-group-by-groupby-apply"]], "polars.Expr.arg_sort": [[324, "polars-expr-arg-sort"]], "polars.Expr.arcsinh": [[319, "polars-expr-arcsinh"]], "Data types": [[303, "data-types"]], "Nested": [[303, "nested"]], "Other": [[303, "other"]], "polars.dataframe.group_by.GroupBy.__iter__": [[277, "polars-dataframe-group-by-groupby-iter"]], "polars.dataframe.group_by.GroupBy.last": [[284, "polars-dataframe-group-by-groupby-last"]], "polars.dataframe.group_by.GroupBy.tail": [[293, "polars-dataframe-group-by-groupby-tail"]], "polars.Expr.agg_groups": [[308, "polars-expr-agg-groups"]], "polars.Expr.all": [[310, "polars-expr-all"]], "polars.dataframe.group_by.GroupBy.n_unique": [[290, "polars-dataframe-group-by-groupby-n-unique"]], "polars.dataframe.group_by.GroupBy.sum": [[292, "polars-dataframe-group-by-groupby-sum"]], "polars.Expr.alias": [[309, "polars-expr-alias"]], "polars.Expr.arcsin": [[318, "polars-expr-arcsin"]], "polars.dataframe.group_by.GroupBy.agg": [[278, "polars-dataframe-group-by-groupby-agg"]], "polars.dataframe.group_by.GroupBy.min": [[289, "polars-dataframe-group-by-groupby-min"]], "polars.DataFrame.with_row_count": [[275, "polars-dataframe-with-row-count"]], "DataFrame": [[299, "dataframe"]], "polars.dataframe.group_by.GroupBy.map_groups": [[285, "polars-dataframe-group-by-groupby-map-groups"]]}, "indexentries": {"array (class in polars)": [[2, "polars.Array"]], "__init__() (polars.array method)": [[2, "polars.Array.__init__"]], "binary (class in polars)": [[3, "polars.Binary"]], "__init__() (polars.binary method)": [[3, "polars.Binary.__init__"]], "boolean (class in polars)": [[4, "polars.Boolean"]], "__init__() (polars.boolean method)": [[4, "polars.Boolean.__init__"]], "categorical (class in polars)": [[5, "polars.Categorical"]], "__init__() (polars.categorical method)": [[5, "polars.Categorical.__init__"]], "activate_decimals() (polars.config class method)": [[6, "polars.Config.activate_decimals"]], "load() (polars.config class method)": [[7, "polars.Config.load"]], "load_from_file() (polars.config class method)": [[8, "polars.Config.load_from_file"]], "restore_defaults() (polars.config class method)": [[9, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[10, "polars.Config.save"]], "save_to_file() (polars.config class method)": [[11, "polars.Config.save_to_file"]], "set_ascii_tables() (polars.config class method)": [[12, "polars.Config.set_ascii_tables"]], "set_auto_structify() (polars.config class method)": [[13, "polars.Config.set_auto_structify"]], "set_decimal_separator() (polars.config class method)": [[14, "polars.Config.set_decimal_separator"]], "set_float_precision() (polars.config class method)": [[15, "polars.Config.set_float_precision"]], "set_fmt_float() (polars.config class method)": [[16, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[17, "polars.Config.set_fmt_str_lengths"]], "set_fmt_table_cell_list_len() (polars.config class method)": [[18, "polars.Config.set_fmt_table_cell_list_len"]], "set_streaming_chunk_size() (polars.config class method)": [[19, "polars.Config.set_streaming_chunk_size"]], "set_tbl_cell_alignment() (polars.config class method)": [[20, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cell_numeric_alignment() (polars.config class method)": [[21, "polars.Config.set_tbl_cell_numeric_alignment"]], "set_tbl_cols() (polars.config class method)": [[22, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[23, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[24, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[25, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[26, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[27, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[28, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[29, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[30, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[31, "polars.Config.set_tbl_width_chars"]], "set_thousands_separator() (polars.config class method)": [[32, "polars.Config.set_thousands_separator"]], "set_trim_decimal_zeros() (polars.config class method)": [[33, "polars.Config.set_trim_decimal_zeros"]], "set_verbose() (polars.config class method)": [[34, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[35, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[36, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[37, "polars.DataFrame.write_csv"]], "write_database() (polars.dataframe method)": [[38, "polars.DataFrame.write_database"]], "write_delta() (polars.dataframe method)": [[39, "polars.DataFrame.write_delta"]], "write_excel() (polars.dataframe method)": [[40, "polars.DataFrame.write_excel"]], "write_ipc() (polars.dataframe method)": [[41, "polars.DataFrame.write_ipc"]], "write_ipc_stream() (polars.dataframe method)": [[42, "polars.DataFrame.write_ipc_stream"]], "write_json() (polars.dataframe method)": [[43, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[44, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[45, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[46, "polars.DataType"]], "__init__() (polars.datatype method)": [[46, "polars.DataType.__init__"]], "date (class in polars)": [[47, "polars.Date"]], "__init__() (polars.date method)": [[47, "polars.Date.__init__"]], "datetime (class in polars)": [[48, "polars.Datetime"]], "__init__() (polars.datetime method)": [[48, "polars.Datetime.__init__"]], "decimal (class in polars)": [[49, "polars.Decimal"]], "__init__() (polars.decimal method)": [[49, "polars.Decimal.__init__"]], "duration (class in polars)": [[50, "polars.Duration"]], "__init__() (polars.duration method)": [[50, "polars.Duration.__init__"]], "enum (class in polars)": [[51, "polars.Enum"]], "__init__() (polars.enum method)": [[51, "polars.Enum.__init__"]], "float32 (class in polars)": [[52, "polars.Float32"]], "__init__() (polars.float32 method)": [[52, "polars.Float32.__init__"]], "float64 (class in polars)": [[53, "polars.Float64"]], "__init__() (polars.float64 method)": [[53, "polars.Float64.__init__"]], "int16 (class in polars)": [[54, "polars.Int16"]], "__init__() (polars.int16 method)": [[54, "polars.Int16.__init__"]], "int32 (class in polars)": [[55, "polars.Int32"]], "__init__() (polars.int32 method)": [[55, "polars.Int32.__init__"]], "int64 (class in polars)": [[56, "polars.Int64"]], "__init__() (polars.int64 method)": [[56, "polars.Int64.__init__"]], "int8 (class in polars)": [[57, "polars.Int8"]], "__init__() (polars.int8 method)": [[57, "polars.Int8.__init__"]], "sink_csv() (polars.lazyframe method)": [[58, "polars.LazyFrame.sink_csv"]], "sink_ipc() (polars.lazyframe method)": [[59, "polars.LazyFrame.sink_ipc"]], "sink_parquet() (polars.lazyframe method)": [[60, "polars.LazyFrame.sink_parquet"]], "list (class in polars)": [[61, "polars.List"]], "__init__() (polars.list method)": [[61, "polars.List.__init__"]], "null (class in polars)": [[62, "polars.Null"]], "__init__() (polars.null method)": [[62, "polars.Null.__init__"]], "object (class in polars)": [[63, "polars.Object"]], "__init__() (polars.object method)": [[63, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[64, "polars.SQLContext.execute"]], "register() (polars.sqlcontext method)": [[65, "polars.SQLContext.register"]], "register_globals() (polars.sqlcontext method)": [[66, "polars.SQLContext.register_globals"]], "register_many() (polars.sqlcontext method)": [[67, "polars.SQLContext.register_many"]], "tables() (polars.sqlcontext method)": [[68, "polars.SQLContext.tables"]], "unregister() (polars.sqlcontext method)": [[69, "polars.SQLContext.unregister"]], "string (class in polars)": [[70, "polars.String"]], "__init__() (polars.string method)": [[70, "polars.String.__init__"]], "stringcache (class in polars)": [[71, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[71, "polars.StringCache.__init__"]], "struct (class in polars)": [[72, "polars.Struct"]], "__init__() (polars.struct method)": [[72, "polars.Struct.__init__"]], "time (class in polars)": [[73, "polars.Time"]], "__init__() (polars.time method)": [[73, "polars.Time.__init__"]], "uint16 (class in polars)": [[74, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[74, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[75, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[75, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[76, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[76, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[77, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[77, "polars.UInt8.__init__"]], "unknown (class in polars)": [[78, "polars.Unknown"]], "__init__() (polars.unknown method)": [[78, "polars.Unknown.__init__"]], "utf8 (in module polars)": [[79, "polars.Utf8"]], "align_frames() (in module polars)": [[80, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[81, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[82, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[83, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[84, "polars.api.register_series_namespace"]], "build_info() (in module polars)": [[85, "polars.build_info"]], "collect_all() (in module polars)": [[86, "polars.collect_all"]], "collect_all_async() (in module polars)": [[87, "polars.collect_all_async"]], "concat() (in module polars)": [[88, "polars.concat"]], "disable_string_cache() (in module polars)": [[89, "polars.disable_string_cache"]], "enable_string_cache() (in module polars)": [[90, "polars.enable_string_cache"]], "arrowerror": [[91, "polars.exceptions.ArrowError"]], "columnnotfounderror": [[92, "polars.exceptions.ColumnNotFoundError"]], "computeerror": [[93, "polars.exceptions.ComputeError"]], "duplicateerror": [[94, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[95, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[96, "polars.exceptions.NoDataError"]], "norowsreturnederror": [[97, "polars.exceptions.NoRowsReturnedError"]], "polarspanicerror": [[98, "polars.exceptions.PolarsPanicError"]], "rowserror": [[99, "polars.exceptions.RowsError"]], "schemaerror": [[100, "polars.exceptions.SchemaError"]], "schemafieldnotfounderror": [[101, "polars.exceptions.SchemaFieldNotFoundError"]], "shapeerror": [[102, "polars.exceptions.ShapeError"]], "structfieldnotfounderror": [[103, "polars.exceptions.StructFieldNotFoundError"]], "toomanyrowsreturnederror": [[104, "polars.exceptions.TooManyRowsReturnedError"]], "from_arrow() (in module polars)": [[105, "polars.from_arrow"]], "from_dataframe() (in module polars)": [[106, "polars.from_dataframe"]], "from_dict() (in module polars)": [[107, "polars.from_dict"]], "from_dicts() (in module polars)": [[108, "polars.from_dicts"]], "from_numpy() (in module polars)": [[109, "polars.from_numpy"]], "from_pandas() (in module polars)": [[110, "polars.from_pandas"]], "from_records() (in module polars)": [[111, "polars.from_records"]], "from_repr() (in module polars)": [[112, "polars.from_repr"]], "get_index_type() (in module polars)": [[113, "polars.get_index_type"]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[114, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches"]], "read_avro() (in module polars)": [[115, "polars.read_avro"]], "read_csv() (in module polars)": [[116, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[117, "polars.read_csv_batched"]], "read_database() (in module polars)": [[118, "polars.read_database"]], "read_database_uri() (in module polars)": [[119, "polars.read_database_uri"]], "read_delta() (in module polars)": [[120, "polars.read_delta"]], "read_excel() (in module polars)": [[121, "polars.read_excel"]], "read_ipc() (in module polars)": [[122, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[123, "polars.read_ipc_schema"]], "read_ipc_stream() (in module polars)": [[124, "polars.read_ipc_stream"]], "read_json() (in module polars)": [[125, "polars.read_json"]], "read_ndjson() (in module polars)": [[126, "polars.read_ndjson"]], "read_ods() (in module polars)": [[127, "polars.read_ods"]], "read_parquet() (in module polars)": [[128, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[129, "polars.read_parquet_schema"]], "scan_csv() (in module polars)": [[130, "polars.scan_csv"]], "scan_delta() (in module polars)": [[131, "polars.scan_delta"]], "scan_iceberg() (in module polars)": [[132, "polars.scan_iceberg"]], "scan_ipc() (in module polars)": [[133, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[134, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[135, "polars.scan_parquet"]], "scan_pyarrow_dataset() (in module polars)": [[136, "polars.scan_pyarrow_dataset"]], "set_random_seed() (in module polars)": [[137, "polars.set_random_seed"]], "show_versions() (in module polars)": [[138, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[139, "polars.testing.assert_frame_equal"]], "assert_frame_not_equal() (in module polars.testing)": [[140, "polars.testing.assert_frame_not_equal"]], "assert_series_equal() (in module polars.testing)": [[141, "polars.testing.assert_series_equal"]], "assert_series_not_equal() (in module polars.testing)": [[142, "polars.testing.assert_series_not_equal"]], "__init__() (polars.testing.parametric.column method)": [[143, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[143, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[144, "polars.testing.parametric.columns"]], "create_list_strategy() (in module polars.testing.parametric)": [[145, "polars.testing.parametric.create_list_strategy"]], "dataframes() (in module polars.testing.parametric)": [[146, "polars.testing.parametric.dataframes"]], "load_profile() (in module polars.testing.parametric)": [[147, "polars.testing.parametric.load_profile"]], "series() (in module polars.testing.parametric)": [[148, "polars.testing.parametric.series"]], "set_profile() (in module polars.testing.parametric)": [[149, "polars.testing.parametric.set_profile"]], "threadpool_size() (in module polars)": [[150, "polars.threadpool_size"]], "using_string_cache() (in module polars)": [[151, "polars.using_string_cache"]], "__dataframe__() (polars.dataframe method)": [[154, "polars.DataFrame.__dataframe__"]], "apply() (polars.dataframe method)": [[155, "polars.DataFrame.apply"]], "approx_n_unique() (polars.dataframe method)": [[156, "polars.DataFrame.approx_n_unique"]], "bottom_k() (polars.dataframe method)": [[157, "polars.DataFrame.bottom_k"]], "cast() (polars.dataframe method)": [[158, "polars.DataFrame.cast"]], "clear() (polars.dataframe method)": [[159, "polars.DataFrame.clear"]], "clone() (polars.dataframe method)": [[160, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[161, "polars.DataFrame.columns"]], "corr() (polars.dataframe method)": [[162, "polars.DataFrame.corr"]], "count() (polars.dataframe method)": [[163, "polars.DataFrame.count"]], "describe() (polars.dataframe method)": [[164, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[165, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[166, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[167, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[168, "polars.DataFrame.dtypes"]], "equals() (polars.dataframe method)": [[169, "polars.DataFrame.equals"]], "estimated_size() (polars.dataframe method)": [[170, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[171, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[172, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[173, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[174, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[175, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[176, "polars.DataFrame.find_idx_by_name"]], "flags (polars.dataframe property)": [[177, "polars.DataFrame.flags"]], "fold() (polars.dataframe method)": [[178, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[179, "polars.DataFrame.frame_equal"]], "gather_every() (polars.dataframe method)": [[180, "polars.DataFrame.gather_every"]], "get_column() (polars.dataframe method)": [[181, "polars.DataFrame.get_column"]], "get_column_index() (polars.dataframe method)": [[182, "polars.DataFrame.get_column_index"]], "get_columns() (polars.dataframe method)": [[183, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[184, "polars.DataFrame.glimpse"]], "group_by() (polars.dataframe method)": [[185, "polars.DataFrame.group_by"]], "group_by_dynamic() (polars.dataframe method)": [[186, "polars.DataFrame.group_by_dynamic"]], "group_by_rolling() (polars.dataframe method)": [[187, "polars.DataFrame.group_by_rolling"]], "groupby() (polars.dataframe method)": [[188, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[189, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[190, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[191, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[192, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[193, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[194, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[195, "polars.DataFrame.insert_at_idx"]], "insert_column() (polars.dataframe method)": [[196, "polars.DataFrame.insert_column"]], "interpolate() (polars.dataframe method)": [[197, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[198, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[199, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[200, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[201, "polars.DataFrame.item"]], "iter_columns() (polars.dataframe method)": [[202, "polars.DataFrame.iter_columns"]], "iter_rows() (polars.dataframe method)": [[203, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[204, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[205, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[206, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[207, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[208, "polars.DataFrame.limit"]], "map_rows() (polars.dataframe method)": [[209, "polars.DataFrame.map_rows"]], "max() (polars.dataframe method)": [[210, "polars.DataFrame.max"]], "max_horizontal() (polars.dataframe method)": [[211, "polars.DataFrame.max_horizontal"]], "mean() (polars.dataframe method)": [[212, "polars.DataFrame.mean"]], "mean_horizontal() (polars.dataframe method)": [[213, "polars.DataFrame.mean_horizontal"]], "median() (polars.dataframe method)": [[214, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[215, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[216, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[217, "polars.DataFrame.min"]], "min_horizontal() (polars.dataframe method)": [[218, "polars.DataFrame.min_horizontal"]], "n_chunks() (polars.dataframe method)": [[219, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[220, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[221, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[222, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[223, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[224, "polars.DataFrame.pivot"]], "plot (polars.dataframe property)": [[225, "polars.DataFrame.plot"]], "product() (polars.dataframe method)": [[226, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[227, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[228, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[229, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[230, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[231, "polars.DataFrame.replace_at_idx"]], "replace_column() (polars.dataframe method)": [[232, "polars.DataFrame.replace_column"]], "reverse() (polars.dataframe method)": [[233, "polars.DataFrame.reverse"]], "rolling() (polars.dataframe method)": [[234, "polars.DataFrame.rolling"]], "row() (polars.dataframe method)": [[235, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[236, "polars.DataFrame.rows"]], "rows_by_key() (polars.dataframe method)": [[237, "polars.DataFrame.rows_by_key"]], "sample() (polars.dataframe method)": [[238, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[239, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[240, "polars.DataFrame.select"]], "select_seq() (polars.dataframe method)": [[241, "polars.DataFrame.select_seq"]], "set_sorted() (polars.dataframe method)": [[242, "polars.DataFrame.set_sorted"]], "shape (polars.dataframe property)": [[243, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[244, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[245, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[246, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[247, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[248, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[249, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[250, "polars.DataFrame.sum"]], "sum_horizontal() (polars.dataframe method)": [[251, "polars.DataFrame.sum_horizontal"]], "tail() (polars.dataframe method)": [[252, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[253, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[254, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[255, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[256, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[257, "polars.DataFrame.to_dummies"]], "to_init_repr() (polars.dataframe method)": [[258, "polars.DataFrame.to_init_repr"]], "to_numpy() (polars.dataframe method)": [[259, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[260, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[261, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[262, "polars.DataFrame.to_struct"]], "top_k() (polars.dataframe method)": [[263, "polars.DataFrame.top_k"]], "transpose() (polars.dataframe method)": [[264, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[265, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[266, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[267, "polars.DataFrame.unstack"]], "update() (polars.dataframe method)": [[268, "polars.DataFrame.update"]], "upsample() (polars.dataframe method)": [[269, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[270, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[271, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[272, "polars.DataFrame.width"]], "with_columns() (polars.dataframe method)": [[273, "polars.DataFrame.with_columns"]], "with_columns_seq() (polars.dataframe method)": [[274, "polars.DataFrame.with_columns_seq"]], "with_row_count() (polars.dataframe method)": [[275, "polars.DataFrame.with_row_count"]], "with_row_index() (polars.dataframe method)": [[276, "polars.DataFrame.with_row_index"]], "__iter__() (polars.dataframe.group_by.groupby method)": [[277, "polars.dataframe.group_by.GroupBy.__iter__"]], "agg() (polars.dataframe.group_by.groupby method)": [[278, "polars.dataframe.group_by.GroupBy.agg"]], "all() (polars.dataframe.group_by.groupby method)": [[279, "polars.dataframe.group_by.GroupBy.all"]], "apply() (polars.dataframe.group_by.groupby method)": [[280, "polars.dataframe.group_by.GroupBy.apply"]], "count() (polars.dataframe.group_by.groupby method)": [[281, "polars.dataframe.group_by.GroupBy.count"]], "first() (polars.dataframe.group_by.groupby method)": [[282, "polars.dataframe.group_by.GroupBy.first"]], "head() (polars.dataframe.group_by.groupby method)": [[283, "polars.dataframe.group_by.GroupBy.head"]], "last() (polars.dataframe.group_by.groupby method)": [[284, "polars.dataframe.group_by.GroupBy.last"]], "map_groups() (polars.dataframe.group_by.groupby method)": [[285, "polars.dataframe.group_by.GroupBy.map_groups"]], "max() (polars.dataframe.group_by.groupby method)": [[286, "polars.dataframe.group_by.GroupBy.max"]], "mean() (polars.dataframe.group_by.groupby method)": [[287, "polars.dataframe.group_by.GroupBy.mean"]], "median() (polars.dataframe.group_by.groupby method)": [[288, "polars.dataframe.group_by.GroupBy.median"]], "min() (polars.dataframe.group_by.groupby method)": [[289, "polars.dataframe.group_by.GroupBy.min"]], "n_unique() (polars.dataframe.group_by.groupby method)": [[290, "polars.dataframe.group_by.GroupBy.n_unique"]], "quantile() (polars.dataframe.group_by.groupby method)": [[291, "polars.dataframe.group_by.GroupBy.quantile"]], "sum() (polars.dataframe.group_by.groupby method)": [[292, "polars.dataframe.group_by.GroupBy.sum"]], "tail() (polars.dataframe.group_by.groupby method)": [[293, "polars.dataframe.group_by.GroupBy.tail"]], "abs() (polars.expr method)": [[306, "polars.Expr.abs"]], "add() (polars.expr method)": [[307, "polars.Expr.add"]], "agg_groups() (polars.expr method)": [[308, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[309, "polars.Expr.alias"]], "all() (polars.expr method)": [[310, "polars.Expr.all"]], "and_() (polars.expr method)": [[311, "polars.Expr.and_"]], "any() (polars.expr method)": [[312, "polars.Expr.any"]], "append() (polars.expr method)": [[313, "polars.Expr.append"]], "apply() (polars.expr method)": [[314, "polars.Expr.apply"]], "approx_n_unique() (polars.expr method)": [[315, "polars.Expr.approx_n_unique"]], "arccos() (polars.expr method)": [[316, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[317, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[318, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[319, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[320, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[321, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[322, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[323, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[324, "polars.Expr.arg_sort"]], "arg_true() (polars.expr method)": [[325, "polars.Expr.arg_true"]], "arg_unique() (polars.expr method)": [[326, "polars.Expr.arg_unique"]], "all() (polars.expr.arr method)": [[327, "polars.Expr.arr.all"]], "any() (polars.expr.arr method)": [[328, "polars.Expr.arr.any"]], "arg_max() (polars.expr.arr method)": [[329, "polars.Expr.arr.arg_max"]], "arg_min() (polars.expr.arr method)": [[330, "polars.Expr.arr.arg_min"]], "max() (polars.expr.arr method)": [[331, "polars.Expr.arr.max"]], "min() (polars.expr.arr method)": [[332, "polars.Expr.arr.min"]], "reverse() (polars.expr.arr method)": [[333, "polars.Expr.arr.reverse"]], "sort() (polars.expr.arr method)": [[334, "polars.Expr.arr.sort"]], "sum() (polars.expr.arr method)": [[335, "polars.Expr.arr.sum"]], "to_list() (polars.expr.arr method)": [[336, "polars.Expr.arr.to_list"]], "unique() (polars.expr.arr method)": [[337, "polars.Expr.arr.unique"]], "backward_fill() (polars.expr method)": [[338, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[339, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[340, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[341, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[342, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[343, "polars.Expr.bin.starts_with"]], "bottom_k() (polars.expr method)": [[344, "polars.Expr.bottom_k"]], "cast() (polars.expr method)": [[345, "polars.Expr.cast"]], "get_categories() (polars.expr.cat method)": [[346, "polars.Expr.cat.get_categories"]], "set_ordering() (polars.expr.cat method)": [[347, "polars.Expr.cat.set_ordering"]], "cbrt() (polars.expr method)": [[348, "polars.Expr.cbrt"]], "ceil() (polars.expr method)": [[349, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[350, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[351, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[352, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[353, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[354, "polars.Expr.cosh"]], "cot() (polars.expr method)": [[355, "polars.Expr.cot"]], "count() (polars.expr method)": [[356, "polars.Expr.count"]], "cum_count() (polars.expr method)": [[357, "polars.Expr.cum_count"]], "cum_max() (polars.expr method)": [[358, "polars.Expr.cum_max"]], "cum_min() (polars.expr method)": [[359, "polars.Expr.cum_min"]], "cum_prod() (polars.expr method)": [[360, "polars.Expr.cum_prod"]], "cum_sum() (polars.expr method)": [[361, "polars.Expr.cum_sum"]], "cumcount() (polars.expr method)": [[362, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[363, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[364, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[365, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[366, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[367, "polars.Expr.cumulative_eval"]], "cut() (polars.expr method)": [[368, "polars.Expr.cut"]], "degrees() (polars.expr method)": [[369, "polars.Expr.degrees"]], "diff() (polars.expr method)": [[370, "polars.Expr.diff"]], "dot() (polars.expr method)": [[371, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[372, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[373, "polars.Expr.drop_nulls"]], "base_utc_offset() (polars.expr.dt method)": [[374, "polars.Expr.dt.base_utc_offset"]], "cast_time_unit() (polars.expr.dt method)": [[375, "polars.Expr.dt.cast_time_unit"]], "combine() (polars.expr.dt method)": [[376, "polars.Expr.dt.combine"]], "convert_time_zone() (polars.expr.dt method)": [[377, "polars.Expr.dt.convert_time_zone"]], "date() (polars.expr.dt method)": [[378, "polars.Expr.dt.date"]], "datetime() (polars.expr.dt method)": [[379, "polars.Expr.dt.datetime"]], "day() (polars.expr.dt method)": [[380, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[381, "polars.Expr.dt.days"]], "dst_offset() (polars.expr.dt method)": [[382, "polars.Expr.dt.dst_offset"]], "epoch() (polars.expr.dt method)": [[383, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[384, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[385, "polars.Expr.dt.hours"]], "is_leap_year() (polars.expr.dt method)": [[386, "polars.Expr.dt.is_leap_year"]], "iso_year() (polars.expr.dt method)": [[387, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[388, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[389, "polars.Expr.dt.microseconds"]], "millisecond() (polars.expr.dt method)": [[390, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[391, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[392, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[393, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[394, "polars.Expr.dt.month"]], "month_end() (polars.expr.dt method)": [[395, "polars.Expr.dt.month_end"]], "month_start() (polars.expr.dt method)": [[396, "polars.Expr.dt.month_start"]], "nanosecond() (polars.expr.dt method)": [[397, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[398, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[399, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[400, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[401, "polars.Expr.dt.quarter"]], "replace_time_zone() (polars.expr.dt method)": [[402, "polars.Expr.dt.replace_time_zone"]], "round() (polars.expr.dt method)": [[403, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[404, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[405, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[406, "polars.Expr.dt.strftime"]], "time() (polars.expr.dt method)": [[407, "polars.Expr.dt.time"]], "timestamp() (polars.expr.dt method)": [[408, "polars.Expr.dt.timestamp"]], "to_string() (polars.expr.dt method)": [[409, "polars.Expr.dt.to_string"]], "total_days() (polars.expr.dt method)": [[410, "polars.Expr.dt.total_days"]], "total_hours() (polars.expr.dt method)": [[411, "polars.Expr.dt.total_hours"]], "total_microseconds() (polars.expr.dt method)": [[412, "polars.Expr.dt.total_microseconds"]], "total_milliseconds() (polars.expr.dt method)": [[413, "polars.Expr.dt.total_milliseconds"]], "total_minutes() (polars.expr.dt method)": [[414, "polars.Expr.dt.total_minutes"]], "total_nanoseconds() (polars.expr.dt method)": [[415, "polars.Expr.dt.total_nanoseconds"]], "total_seconds() (polars.expr.dt method)": [[416, "polars.Expr.dt.total_seconds"]], "truncate() (polars.expr.dt method)": [[417, "polars.Expr.dt.truncate"]], "week() (polars.expr.dt method)": [[418, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[419, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[420, "polars.Expr.dt.with_time_unit"]], "year() (polars.expr.dt method)": [[421, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[422, "polars.Expr.entropy"]], "eq() (polars.expr method)": [[423, "polars.Expr.eq"]], "eq_missing() (polars.expr method)": [[424, "polars.Expr.eq_missing"]], "ewm_mean() (polars.expr method)": [[425, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[426, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[427, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[428, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[429, "polars.Expr.exp"]], "explode() (polars.expr method)": [[430, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[431, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[432, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[433, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[434, "polars.Expr.filter"]], "first() (polars.expr method)": [[435, "polars.Expr.first"]], "flatten() (polars.expr method)": [[436, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[437, "polars.Expr.floor"]], "floordiv() (polars.expr method)": [[438, "polars.Expr.floordiv"]], "forward_fill() (polars.expr method)": [[439, "polars.Expr.forward_fill"]], "from_json() (polars.expr class method)": [[440, "polars.Expr.from_json"]], "gather() (polars.expr method)": [[441, "polars.Expr.gather"]], "gather_every() (polars.expr method)": [[442, "polars.Expr.gather_every"]], "ge() (polars.expr method)": [[443, "polars.Expr.ge"]], "get() (polars.expr method)": [[444, "polars.Expr.get"]], "gt() (polars.expr method)": [[445, "polars.Expr.gt"]], "hash() (polars.expr method)": [[446, "polars.Expr.hash"]], "head() (polars.expr method)": [[447, "polars.Expr.head"]], "hist() (polars.expr method)": [[448, "polars.Expr.hist"]], "implode() (polars.expr method)": [[449, "polars.Expr.implode"]], "inspect() (polars.expr method)": [[450, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[451, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[452, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[453, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[454, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[455, "polars.Expr.is_first"]], "is_first_distinct() (polars.expr method)": [[456, "polars.Expr.is_first_distinct"]], "is_in() (polars.expr method)": [[457, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[458, "polars.Expr.is_infinite"]], "is_last() (polars.expr method)": [[459, "polars.Expr.is_last"]], "is_last_distinct() (polars.expr method)": [[460, "polars.Expr.is_last_distinct"]], "is_nan() (polars.expr method)": [[461, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[462, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[463, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[464, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[465, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[466, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[467, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[468, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[469, "polars.Expr.last"]], "le() (polars.expr method)": [[470, "polars.Expr.le"]], "len() (polars.expr method)": [[471, "polars.Expr.len"]], "limit() (polars.expr method)": [[472, "polars.Expr.limit"]], "all() (polars.expr.list method)": [[473, "polars.Expr.list.all"]], "any() (polars.expr.list method)": [[474, "polars.Expr.list.any"]], "arg_max() (polars.expr.list method)": [[475, "polars.Expr.list.arg_max"]], "arg_min() (polars.expr.list method)": [[476, "polars.Expr.list.arg_min"]], "concat() (polars.expr.list method)": [[477, "polars.Expr.list.concat"]], "contains() (polars.expr.list method)": [[478, "polars.Expr.list.contains"]], "count_match() (polars.expr.list method)": [[479, "polars.Expr.list.count_match"]], "count_matches() (polars.expr.list method)": [[480, "polars.Expr.list.count_matches"]], "diff() (polars.expr.list method)": [[481, "polars.Expr.list.diff"]], "drop_nulls() (polars.expr.list method)": [[482, "polars.Expr.list.drop_nulls"]], "eval() (polars.expr.list method)": [[483, "polars.Expr.list.eval"]], "explode() (polars.expr.list method)": [[484, "polars.Expr.list.explode"]], "first() (polars.expr.list method)": [[485, "polars.Expr.list.first"]], "gather() (polars.expr.list method)": [[486, "polars.Expr.list.gather"]], "get() (polars.expr.list method)": [[487, "polars.Expr.list.get"]], "head() (polars.expr.list method)": [[488, "polars.Expr.list.head"]], "join() (polars.expr.list method)": [[489, "polars.Expr.list.join"]], "last() (polars.expr.list method)": [[490, "polars.Expr.list.last"]], "len() (polars.expr.list method)": [[491, "polars.Expr.list.len"]], "lengths() (polars.expr.list method)": [[492, "polars.Expr.list.lengths"]], "max() (polars.expr.list method)": [[493, "polars.Expr.list.max"]], "mean() (polars.expr.list method)": [[494, "polars.Expr.list.mean"]], "min() (polars.expr.list method)": [[495, "polars.Expr.list.min"]], "reverse() (polars.expr.list method)": [[496, "polars.Expr.list.reverse"]], "sample() (polars.expr.list method)": [[497, "polars.Expr.list.sample"]], "set_difference() (polars.expr.list method)": [[498, "polars.Expr.list.set_difference"]], "set_intersection() (polars.expr.list method)": [[499, "polars.Expr.list.set_intersection"]], "set_symmetric_difference() (polars.expr.list method)": [[500, "polars.Expr.list.set_symmetric_difference"]], "set_union() (polars.expr.list method)": [[501, "polars.Expr.list.set_union"]], "shift() (polars.expr.list method)": [[502, "polars.Expr.list.shift"]], "slice() (polars.expr.list method)": [[503, "polars.Expr.list.slice"]], "sort() (polars.expr.list method)": [[504, "polars.Expr.list.sort"]], "sum() (polars.expr.list method)": [[505, "polars.Expr.list.sum"]], "tail() (polars.expr.list method)": [[506, "polars.Expr.list.tail"]], "take() (polars.expr.list method)": [[507, "polars.Expr.list.take"]], "to_array() (polars.expr.list method)": [[508, "polars.Expr.list.to_array"]], "to_struct() (polars.expr.list method)": [[509, "polars.Expr.list.to_struct"]], "unique() (polars.expr.list method)": [[510, "polars.Expr.list.unique"]], "log() (polars.expr method)": [[511, "polars.Expr.log"]], "log10() (polars.expr method)": [[512, "polars.Expr.log10"]], "log1p() (polars.expr method)": [[513, "polars.Expr.log1p"]], "lower_bound() (polars.expr method)": [[514, "polars.Expr.lower_bound"]], "lt() (polars.expr method)": [[515, "polars.Expr.lt"]], "map() (polars.expr method)": [[516, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[517, "polars.Expr.map_alias"]], "map_batches() (polars.expr method)": [[518, "polars.Expr.map_batches"]], "map_dict() (polars.expr method)": [[519, "polars.Expr.map_dict"]], "map_elements() (polars.expr method)": [[520, "polars.Expr.map_elements"]], "max() (polars.expr method)": [[521, "polars.Expr.max"]], "mean() (polars.expr method)": [[522, "polars.Expr.mean"]], "median() (polars.expr method)": [[523, "polars.Expr.median"]], "eq() (polars.expr.meta method)": [[524, "polars.Expr.meta.eq"]], "has_multiple_outputs() (polars.expr.meta method)": [[525, "polars.Expr.meta.has_multiple_outputs"]], "is_regex_projection() (polars.expr.meta method)": [[526, "polars.Expr.meta.is_regex_projection"]], "ne() (polars.expr.meta method)": [[527, "polars.Expr.meta.ne"]], "output_name() (polars.expr.meta method)": [[528, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[529, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[530, "polars.Expr.meta.root_names"]], "tree_format() (polars.expr.meta method)": [[531, "polars.Expr.meta.tree_format"]], "undo_aliases() (polars.expr.meta method)": [[532, "polars.Expr.meta.undo_aliases"]], "write_json() (polars.expr.meta method)": [[533, "polars.Expr.meta.write_json"]], "min() (polars.expr method)": [[534, "polars.Expr.min"]], "mod() (polars.expr method)": [[535, "polars.Expr.mod"]], "mode() (polars.expr method)": [[536, "polars.Expr.mode"]], "mul() (polars.expr method)": [[537, "polars.Expr.mul"]], "n_unique() (polars.expr method)": [[538, "polars.Expr.n_unique"]], "keep() (polars.expr.name method)": [[539, "polars.Expr.name.keep"]], "map() (polars.expr.name method)": [[540, "polars.Expr.name.map"]], "prefix() (polars.expr.name method)": [[541, "polars.Expr.name.prefix"]], "suffix() (polars.expr.name method)": [[542, "polars.Expr.name.suffix"]], "to_lowercase() (polars.expr.name method)": [[543, "polars.Expr.name.to_lowercase"]], "to_uppercase() (polars.expr.name method)": [[544, "polars.Expr.name.to_uppercase"]], "nan_max() (polars.expr method)": [[545, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[546, "polars.Expr.nan_min"]], "ne() (polars.expr method)": [[547, "polars.Expr.ne"]], "ne_missing() (polars.expr method)": [[548, "polars.Expr.ne_missing"]], "not_() (polars.expr method)": [[549, "polars.Expr.not_"]], "null_count() (polars.expr method)": [[550, "polars.Expr.null_count"]], "or_() (polars.expr method)": [[551, "polars.Expr.or_"]], "over() (polars.expr method)": [[552, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[553, "polars.Expr.pct_change"]], "peak_max() (polars.expr method)": [[554, "polars.Expr.peak_max"]], "peak_min() (polars.expr method)": [[555, "polars.Expr.peak_min"]], "pipe() (polars.expr method)": [[556, "polars.Expr.pipe"]], "pow() (polars.expr method)": [[557, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[558, "polars.Expr.prefix"]], "product() (polars.expr method)": [[559, "polars.Expr.product"]], "qcut() (polars.expr method)": [[560, "polars.Expr.qcut"]], "quantile() (polars.expr method)": [[561, "polars.Expr.quantile"]], "radians() (polars.expr method)": [[562, "polars.Expr.radians"]], "rank() (polars.expr method)": [[563, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[564, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[565, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[566, "polars.Expr.repeat_by"]], "replace() (polars.expr method)": [[567, "polars.Expr.replace"]], "reshape() (polars.expr method)": [[568, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[569, "polars.Expr.reverse"]], "rle() (polars.expr method)": [[570, "polars.Expr.rle"]], "rle_id() (polars.expr method)": [[571, "polars.Expr.rle_id"]], "rolling() (polars.expr method)": [[572, "polars.Expr.rolling"]], "rolling_apply() (polars.expr method)": [[573, "polars.Expr.rolling_apply"]], "rolling_map() (polars.expr method)": [[574, "polars.Expr.rolling_map"]], "rolling_max() (polars.expr method)": [[575, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[576, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[577, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[578, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[579, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[580, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[581, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[582, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[583, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[584, "polars.Expr.round"]], "round_sig_figs() (polars.expr method)": [[585, "polars.Expr.round_sig_figs"]], "sample() (polars.expr method)": [[586, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[587, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[588, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[589, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[590, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[591, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[592, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[593, "polars.Expr.sign"]], "sin() (polars.expr method)": [[594, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[595, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[596, "polars.Expr.skew"]], "slice() (polars.expr method)": [[597, "polars.Expr.slice"]], "sort() (polars.expr method)": [[598, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[599, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[600, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[601, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[602, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[603, "polars.Expr.str.contains"]], "contains_any() (polars.expr.str method)": [[604, "polars.Expr.str.contains_any"]], "count_match() (polars.expr.str method)": [[605, "polars.Expr.str.count_match"]], "count_matches() (polars.expr.str method)": [[606, "polars.Expr.str.count_matches"]], "decode() (polars.expr.str method)": [[607, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[608, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[609, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[610, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[611, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[612, "polars.Expr.str.extract_all"]], "extract_groups() (polars.expr.str method)": [[613, "polars.Expr.str.extract_groups"]], "json_decode() (polars.expr.str method)": [[614, "polars.Expr.str.json_decode"]], "json_extract() (polars.expr.str method)": [[615, "polars.Expr.str.json_extract"]], "json_path_match() (polars.expr.str method)": [[616, "polars.Expr.str.json_path_match"]], "len_bytes() (polars.expr.str method)": [[617, "polars.Expr.str.len_bytes"]], "len_chars() (polars.expr.str method)": [[618, "polars.Expr.str.len_chars"]], "lengths() (polars.expr.str method)": [[619, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[620, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[621, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[622, "polars.Expr.str.n_chars"]], "pad_end() (polars.expr.str method)": [[623, "polars.Expr.str.pad_end"]], "pad_start() (polars.expr.str method)": [[624, "polars.Expr.str.pad_start"]], "parse_int() (polars.expr.str method)": [[625, "polars.Expr.str.parse_int"]], "replace() (polars.expr.str method)": [[626, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[627, "polars.Expr.str.replace_all"]], "replace_many() (polars.expr.str method)": [[628, "polars.Expr.str.replace_many"]], "reverse() (polars.expr.str method)": [[629, "polars.Expr.str.reverse"]], "rjust() (polars.expr.str method)": [[630, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[631, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[632, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[633, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[634, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[635, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[636, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[637, "polars.Expr.str.strip"]], "strip_chars() (polars.expr.str method)": [[638, "polars.Expr.str.strip_chars"]], "strip_chars_end() (polars.expr.str method)": [[639, "polars.Expr.str.strip_chars_end"]], "strip_chars_start() (polars.expr.str method)": [[640, "polars.Expr.str.strip_chars_start"]], "strip_prefix() (polars.expr.str method)": [[641, "polars.Expr.str.strip_prefix"]], "strip_suffix() (polars.expr.str method)": [[642, "polars.Expr.str.strip_suffix"]], "strptime() (polars.expr.str method)": [[643, "polars.Expr.str.strptime"]], "to_date() (polars.expr.str method)": [[644, "polars.Expr.str.to_date"]], "to_datetime() (polars.expr.str method)": [[645, "polars.Expr.str.to_datetime"]], "to_decimal() (polars.expr.str method)": [[646, "polars.Expr.str.to_decimal"]], "to_integer() (polars.expr.str method)": [[647, "polars.Expr.str.to_integer"]], "to_lowercase() (polars.expr.str method)": [[648, "polars.Expr.str.to_lowercase"]], "to_time() (polars.expr.str method)": [[649, "polars.Expr.str.to_time"]], "to_titlecase() (polars.expr.str method)": [[650, "polars.Expr.str.to_titlecase"]], "to_uppercase() (polars.expr.str method)": [[651, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[652, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[653, "polars.Expr.struct.field"]], "json_encode() (polars.expr.struct method)": [[654, "polars.Expr.struct.json_encode"]], "rename_fields() (polars.expr.struct method)": [[655, "polars.Expr.struct.rename_fields"]], "sub() (polars.expr method)": [[656, "polars.Expr.sub"]], "suffix() (polars.expr method)": [[657, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[658, "polars.Expr.sum"]], "tail() (polars.expr method)": [[659, "polars.Expr.tail"]], "take() (polars.expr method)": [[660, "polars.Expr.take"]], "take_every() (polars.expr method)": [[661, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[662, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[663, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[664, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[665, "polars.Expr.top_k"]], "truediv() (polars.expr method)": [[666, "polars.Expr.truediv"]], "unique() (polars.expr method)": [[667, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[668, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[669, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[670, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[671, "polars.Expr.var"]], "where() (polars.expr method)": [[672, "polars.Expr.where"]], "xor() (polars.expr method)": [[673, "polars.Expr.xor"]], "all() (in module polars)": [[674, "polars.all"]], "all_horizontal() (in module polars)": [[675, "polars.all_horizontal"]], "any() (in module polars)": [[676, "polars.any"]], "any_horizontal() (in module polars)": [[677, "polars.any_horizontal"]], "apply() (in module polars)": [[678, "polars.apply"]], "approx_n_unique() (in module polars)": [[679, "polars.approx_n_unique"]], "arange() (in module polars)": [[680, "polars.arange"]], "arctan2() (in module polars)": [[681, "polars.arctan2"]], "arctan2d() (in module polars)": [[682, "polars.arctan2d"]], "arg_sort_by() (in module polars)": [[683, "polars.arg_sort_by"]], "arg_where() (in module polars)": [[684, "polars.arg_where"]], "coalesce() (in module polars)": [[685, "polars.coalesce"]], "concat_list() (in module polars)": [[686, "polars.concat_list"]], "concat_str() (in module polars)": [[687, "polars.concat_str"]], "corr() (in module polars)": [[688, "polars.corr"]], "count() (in module polars)": [[689, "polars.count"]], "cov() (in module polars)": [[690, "polars.cov"]], "cum_count() (in module polars)": [[691, "polars.cum_count"]], "cum_fold() (in module polars)": [[692, "polars.cum_fold"]], "cum_reduce() (in module polars)": [[693, "polars.cum_reduce"]], "cum_sum() (in module polars)": [[694, "polars.cum_sum"]], "cum_sum_horizontal() (in module polars)": [[695, "polars.cum_sum_horizontal"]], "cumfold() (in module polars)": [[696, "polars.cumfold"]], "cumreduce() (in module polars)": [[697, "polars.cumreduce"]], "cumsum() (in module polars)": [[698, "polars.cumsum"]], "cumsum_horizontal() (in module polars)": [[699, "polars.cumsum_horizontal"]], "date() (in module polars)": [[700, "polars.date"]], "date_range() (in module polars)": [[701, "polars.date_range"]], "date_ranges() (in module polars)": [[702, "polars.date_ranges"]], "datetime() (in module polars)": [[703, "polars.datetime"]], "datetime_range() (in module polars)": [[704, "polars.datetime_range"]], "datetime_ranges() (in module polars)": [[705, "polars.datetime_ranges"]], "duration() (in module polars)": [[706, "polars.duration"]], "element() (in module polars)": [[707, "polars.element"]], "exclude() (in module polars)": [[708, "polars.exclude"]], "first() (in module polars)": [[709, "polars.first"]], "fold() (in module polars)": [[710, "polars.fold"]], "format() (in module polars)": [[711, "polars.format"]], "from_epoch() (in module polars)": [[712, "polars.from_epoch"]], "groups() (in module polars)": [[713, "polars.groups"]], "head() (in module polars)": [[714, "polars.head"]], "implode() (in module polars)": [[715, "polars.implode"]], "int_range() (in module polars)": [[716, "polars.int_range"]], "int_ranges() (in module polars)": [[717, "polars.int_ranges"]], "last() (in module polars)": [[718, "polars.last"]], "lit() (in module polars)": [[719, "polars.lit"]], "map() (in module polars)": [[720, "polars.map"]], "map_batches() (in module polars)": [[721, "polars.map_batches"]], "map_groups() (in module polars)": [[722, "polars.map_groups"]], "max() (in module polars)": [[723, "polars.max"]], "max_horizontal() (in module polars)": [[724, "polars.max_horizontal"]], "mean() (in module polars)": [[725, "polars.mean"]], "median() (in module polars)": [[726, "polars.median"]], "min() (in module polars)": [[727, "polars.min"]], "min_horizontal() (in module polars)": [[728, "polars.min_horizontal"]], "n_unique() (in module polars)": [[729, "polars.n_unique"]], "ones() (in module polars)": [[730, "polars.ones"]], "quantile() (in module polars)": [[731, "polars.quantile"]], "reduce() (in module polars)": [[732, "polars.reduce"]], "repeat() (in module polars)": [[733, "polars.repeat"]], "rolling_corr() (in module polars)": [[734, "polars.rolling_corr"]], "rolling_cov() (in module polars)": [[735, "polars.rolling_cov"]], "select() (in module polars)": [[736, "polars.select"]], "sql_expr() (in module polars)": [[737, "polars.sql_expr"]], "std() (in module polars)": [[738, "polars.std"]], "struct() (in module polars)": [[739, "polars.struct"]], "sum() (in module polars)": [[740, "polars.sum"]], "sum_horizontal() (in module polars)": [[741, "polars.sum_horizontal"]], "tail() (in module polars)": [[742, "polars.tail"]], "time() (in module polars)": [[743, "polars.time"]], "time_range() (in module polars)": [[744, "polars.time_range"]], "time_ranges() (in module polars)": [[745, "polars.time_ranges"]], "var() (in module polars)": [[746, "polars.var"]], "when() (in module polars)": [[747, "polars.when"]], "zeros() (in module polars)": [[748, "polars.zeros"]], "approx_n_unique() (polars.lazyframe method)": [[772, "polars.LazyFrame.approx_n_unique"]], "bottom_k() (polars.lazyframe method)": [[773, "polars.LazyFrame.bottom_k"]], "cache() (polars.lazyframe method)": [[774, "polars.LazyFrame.cache"]], "cast() (polars.lazyframe method)": [[775, "polars.LazyFrame.cast"]], "clear() (polars.lazyframe method)": [[776, "polars.LazyFrame.clear"]], "clone() (polars.lazyframe method)": [[777, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[778, "polars.LazyFrame.collect"]], "collect_async() (polars.lazyframe method)": [[779, "polars.LazyFrame.collect_async"]], "columns (polars.lazyframe property)": [[780, "polars.LazyFrame.columns"]], "count() (polars.lazyframe method)": [[781, "polars.LazyFrame.count"]], "deserialize() (polars.lazyframe class method)": [[782, "polars.LazyFrame.deserialize"]], "drop() (polars.lazyframe method)": [[783, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[784, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[785, "polars.LazyFrame.dtypes"]], "explain() (polars.lazyframe method)": [[786, "polars.LazyFrame.explain"]], "explode() (polars.lazyframe method)": [[787, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[788, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[789, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[790, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[791, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[792, "polars.LazyFrame.first"]], "gather_every() (polars.lazyframe method)": [[793, "polars.LazyFrame.gather_every"]], "group_by() (polars.lazyframe method)": [[794, "polars.LazyFrame.group_by"]], "group_by_dynamic() (polars.lazyframe method)": [[795, "polars.LazyFrame.group_by_dynamic"]], "group_by_rolling() (polars.lazyframe method)": [[796, "polars.LazyFrame.group_by_rolling"]], "groupby() (polars.lazyframe method)": [[797, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[798, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[799, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[800, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[801, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[802, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[803, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[804, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[805, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[806, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[807, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[808, "polars.LazyFrame.map"]], "map_batches() (polars.lazyframe method)": [[809, "polars.LazyFrame.map_batches"]], "max() (polars.lazyframe method)": [[810, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[811, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[812, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[813, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[814, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[815, "polars.LazyFrame.min"]], "null_count() (polars.lazyframe method)": [[816, "polars.LazyFrame.null_count"]], "pipe() (polars.lazyframe method)": [[817, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[818, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[819, "polars.LazyFrame.quantile"]], "rename() (polars.lazyframe method)": [[820, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[821, "polars.LazyFrame.reverse"]], "rolling() (polars.lazyframe method)": [[822, "polars.LazyFrame.rolling"]], "schema (polars.lazyframe property)": [[823, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[824, "polars.LazyFrame.select"]], "select_seq() (polars.lazyframe method)": [[825, "polars.LazyFrame.select_seq"]], "serialize() (polars.lazyframe method)": [[826, "polars.LazyFrame.serialize"]], "set_sorted() (polars.lazyframe method)": [[827, "polars.LazyFrame.set_sorted"]], "shift() (polars.lazyframe method)": [[828, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[829, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[830, "polars.LazyFrame.show_graph"]], "slice() (polars.lazyframe method)": [[831, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[832, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[833, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[834, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[835, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[836, "polars.LazyFrame.take_every"]], "top_k() (polars.lazyframe method)": [[837, "polars.LazyFrame.top_k"]], "unique() (polars.lazyframe method)": [[838, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[839, "polars.LazyFrame.unnest"]], "update() (polars.lazyframe method)": [[840, "polars.LazyFrame.update"]], "var() (polars.lazyframe method)": [[841, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[842, "polars.LazyFrame.width"]], "with_columns() (polars.lazyframe method)": [[843, "polars.LazyFrame.with_columns"]], "with_columns_seq() (polars.lazyframe method)": [[844, "polars.LazyFrame.with_columns_seq"]], "with_context() (polars.lazyframe method)": [[845, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[846, "polars.LazyFrame.with_row_count"]], "with_row_index() (polars.lazyframe method)": [[847, "polars.LazyFrame.with_row_index"]], "agg() (polars.lazyframe.group_by.lazygroupby method)": [[848, "polars.lazyframe.group_by.LazyGroupBy.agg"]], "all() (polars.lazyframe.group_by.lazygroupby method)": [[849, "polars.lazyframe.group_by.LazyGroupBy.all"]], "apply() (polars.lazyframe.group_by.lazygroupby method)": [[850, "polars.lazyframe.group_by.LazyGroupBy.apply"]], "count() (polars.lazyframe.group_by.lazygroupby method)": [[851, "polars.lazyframe.group_by.LazyGroupBy.count"]], "first() (polars.lazyframe.group_by.lazygroupby method)": [[852, "polars.lazyframe.group_by.LazyGroupBy.first"]], "head() (polars.lazyframe.group_by.lazygroupby method)": [[853, "polars.lazyframe.group_by.LazyGroupBy.head"]], "last() (polars.lazyframe.group_by.lazygroupby method)": [[854, "polars.lazyframe.group_by.LazyGroupBy.last"]], "map_groups() (polars.lazyframe.group_by.lazygroupby method)": [[855, "polars.lazyframe.group_by.LazyGroupBy.map_groups"]], "max() (polars.lazyframe.group_by.lazygroupby method)": [[856, "polars.lazyframe.group_by.LazyGroupBy.max"]], "mean() (polars.lazyframe.group_by.lazygroupby method)": [[857, "polars.lazyframe.group_by.LazyGroupBy.mean"]], "median() (polars.lazyframe.group_by.lazygroupby method)": [[858, "polars.lazyframe.group_by.LazyGroupBy.median"]], "min() (polars.lazyframe.group_by.lazygroupby method)": [[859, "polars.lazyframe.group_by.LazyGroupBy.min"]], "n_unique() (polars.lazyframe.group_by.lazygroupby method)": [[860, "polars.lazyframe.group_by.LazyGroupBy.n_unique"]], "quantile() (polars.lazyframe.group_by.lazygroupby method)": [[861, "polars.lazyframe.group_by.LazyGroupBy.quantile"]], "sum() (polars.lazyframe.group_by.lazygroupby method)": [[862, "polars.lazyframe.group_by.LazyGroupBy.sum"]], "tail() (polars.lazyframe.group_by.lazygroupby method)": [[863, "polars.lazyframe.group_by.LazyGroupBy.tail"]], "all() (in module polars.selectors)": [[870, "polars.selectors.all"]], "by_dtype() (in module polars.selectors)": [[870, "polars.selectors.by_dtype"]], "by_name() (in module polars.selectors)": [[870, "polars.selectors.by_name"]], "categorical() (in module polars.selectors)": [[870, "polars.selectors.categorical"]], "contains() (in module polars.selectors)": [[870, "polars.selectors.contains"]], "date() (in module polars.selectors)": [[870, "polars.selectors.date"]], "datetime() (in module polars.selectors)": [[870, "polars.selectors.datetime"]], "duration() (in module polars.selectors)": [[870, "polars.selectors.duration"]], "ends_with() (in module polars.selectors)": [[870, "polars.selectors.ends_with"]], "expand_selector() (in module polars.selectors)": [[870, "polars.selectors.expand_selector"]], "first() (in module polars.selectors)": [[870, "polars.selectors.first"]], "float() (in module polars.selectors)": [[870, "polars.selectors.float"]], "integer() (in module polars.selectors)": [[870, "polars.selectors.integer"]], "is_selector() (in module polars.selectors)": [[870, "polars.selectors.is_selector"]], "last() (in module polars.selectors)": [[870, "polars.selectors.last"]], "matches() (in module polars.selectors)": [[870, "polars.selectors.matches"]], "module": [[870, "module-polars.selectors"]], "numeric() (in module polars.selectors)": [[870, "polars.selectors.numeric"]], "polars.selectors": [[870, "module-polars.selectors"]], "starts_with() (in module polars.selectors)": [[870, "polars.selectors.starts_with"]], "string() (in module polars.selectors)": [[870, "polars.selectors.string"]], "temporal() (in module polars.selectors)": [[870, "polars.selectors.temporal"]], "time() (in module polars.selectors)": [[870, "polars.selectors.time"]], "abs() (polars.series method)": [[872, "polars.Series.abs"]], "alias() (polars.series method)": [[873, "polars.Series.alias"]], "all() (polars.series method)": [[874, "polars.Series.all"]], "any() (polars.series method)": [[875, "polars.Series.any"]], "append() (polars.series method)": [[876, "polars.Series.append"]], "apply() (polars.series method)": [[877, "polars.Series.apply"]], "arccos() (polars.series method)": [[878, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[879, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[880, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[881, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[882, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[883, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[884, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[885, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[886, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[887, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[888, "polars.Series.arg_unique"]], "all() (polars.series.arr method)": [[889, "polars.Series.arr.all"]], "any() (polars.series.arr method)": [[890, "polars.Series.arr.any"]], "arg_max() (polars.series.arr method)": [[891, "polars.Series.arr.arg_max"]], "arg_min() (polars.series.arr method)": [[892, "polars.Series.arr.arg_min"]], "max() (polars.series.arr method)": [[893, "polars.Series.arr.max"]], "min() (polars.series.arr method)": [[894, "polars.Series.arr.min"]], "reverse() (polars.series.arr method)": [[895, "polars.Series.arr.reverse"]], "sort() (polars.series.arr method)": [[896, "polars.Series.arr.sort"]], "sum() (polars.series.arr method)": [[897, "polars.Series.arr.sum"]], "to_list() (polars.series.arr method)": [[898, "polars.Series.arr.to_list"]], "unique() (polars.series.arr method)": [[899, "polars.Series.arr.unique"]], "contains() (polars.series.bin method)": [[900, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[901, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[902, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[903, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[904, "polars.Series.bin.starts_with"]], "bottom_k() (polars.series method)": [[905, "polars.Series.bottom_k"]], "cast() (polars.series method)": [[906, "polars.Series.cast"]], "cat (polars.series attribute)": [[907, "polars.Series.cat"]], "get_categories() (polars.series.cat method)": [[908, "polars.Series.cat.get_categories"]], "is_local() (polars.series.cat method)": [[909, "polars.Series.cat.is_local"]], "set_ordering() (polars.series.cat method)": [[910, "polars.Series.cat.set_ordering"]], "to_local() (polars.series.cat method)": [[911, "polars.Series.cat.to_local"]], "uses_lexical_ordering() (polars.series.cat method)": [[912, "polars.Series.cat.uses_lexical_ordering"]], "cbrt() (polars.series method)": [[913, "polars.Series.cbrt"]], "ceil() (polars.series method)": [[914, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[915, "polars.Series.chunk_lengths"]], "clear() (polars.series method)": [[916, "polars.Series.clear"]], "clip() (polars.series method)": [[917, "polars.Series.clip"]], "clip_max() (polars.series method)": [[918, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[919, "polars.Series.clip_min"]], "clone() (polars.series method)": [[920, "polars.Series.clone"]], "cos() (polars.series method)": [[921, "polars.Series.cos"]], "cosh() (polars.series method)": [[922, "polars.Series.cosh"]], "cot() (polars.series method)": [[923, "polars.Series.cot"]], "cum_max() (polars.series method)": [[924, "polars.Series.cum_max"]], "cum_min() (polars.series method)": [[925, "polars.Series.cum_min"]], "cum_prod() (polars.series method)": [[926, "polars.Series.cum_prod"]], "cum_sum() (polars.series method)": [[927, "polars.Series.cum_sum"]], "cummax() (polars.series method)": [[928, "polars.Series.cummax"]], "cummin() (polars.series method)": [[929, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[930, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[931, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[932, "polars.Series.cumulative_eval"]], "cut() (polars.series method)": [[933, "polars.Series.cut"]], "describe() (polars.series method)": [[934, "polars.Series.describe"]], "diff() (polars.series method)": [[935, "polars.Series.diff"]], "dot() (polars.series method)": [[936, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[937, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[938, "polars.Series.drop_nulls"]], "dt (polars.series attribute)": [[939, "polars.Series.dt"]], "base_utc_offset() (polars.series.dt method)": [[940, "polars.Series.dt.base_utc_offset"]], "cast_time_unit() (polars.series.dt method)": [[941, "polars.Series.dt.cast_time_unit"]], "combine() (polars.series.dt method)": [[942, "polars.Series.dt.combine"]], "convert_time_zone() (polars.series.dt method)": [[943, "polars.Series.dt.convert_time_zone"]], "date() (polars.series.dt method)": [[944, "polars.Series.dt.date"]], "datetime() (polars.series.dt method)": [[945, "polars.Series.dt.datetime"]], "day() (polars.series.dt method)": [[946, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[947, "polars.Series.dt.days"]], "dst_offset() (polars.series.dt method)": [[948, "polars.Series.dt.dst_offset"]], "epoch() (polars.series.dt method)": [[949, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[950, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[951, "polars.Series.dt.hours"]], "is_leap_year() (polars.series.dt method)": [[952, "polars.Series.dt.is_leap_year"]], "iso_year() (polars.series.dt method)": [[953, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[954, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[955, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[956, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[957, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[958, "polars.Series.dt.microseconds"]], "millisecond() (polars.series.dt method)": [[959, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[960, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[961, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[962, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[963, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[964, "polars.Series.dt.month"]], "month_end() (polars.series.dt method)": [[965, "polars.Series.dt.month_end"]], "month_start() (polars.series.dt method)": [[966, "polars.Series.dt.month_start"]], "nanosecond() (polars.series.dt method)": [[967, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[968, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[969, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[970, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[971, "polars.Series.dt.quarter"]], "replace_time_zone() (polars.series.dt method)": [[972, "polars.Series.dt.replace_time_zone"]], "round() (polars.series.dt method)": [[973, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[974, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[975, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[976, "polars.Series.dt.strftime"]], "time() (polars.series.dt method)": [[977, "polars.Series.dt.time"]], "timestamp() (polars.series.dt method)": [[978, "polars.Series.dt.timestamp"]], "to_string() (polars.series.dt method)": [[979, "polars.Series.dt.to_string"]], "total_days() (polars.series.dt method)": [[980, "polars.Series.dt.total_days"]], "total_hours() (polars.series.dt method)": [[981, "polars.Series.dt.total_hours"]], "total_microseconds() (polars.series.dt method)": [[982, "polars.Series.dt.total_microseconds"]], "total_milliseconds() (polars.series.dt method)": [[983, "polars.Series.dt.total_milliseconds"]], "total_minutes() (polars.series.dt method)": [[984, "polars.Series.dt.total_minutes"]], "total_nanoseconds() (polars.series.dt method)": [[985, "polars.Series.dt.total_nanoseconds"]], "total_seconds() (polars.series.dt method)": [[986, "polars.Series.dt.total_seconds"]], "truncate() (polars.series.dt method)": [[987, "polars.Series.dt.truncate"]], "week() (polars.series.dt method)": [[988, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[989, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[990, "polars.Series.dt.with_time_unit"]], "year() (polars.series.dt method)": [[991, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[992, "polars.Series.dtype"]], "entropy() (polars.series method)": [[993, "polars.Series.entropy"]], "equals() (polars.series method)": [[994, "polars.Series.equals"]], "estimated_size() (polars.series method)": [[995, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[996, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[997, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[998, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[999, "polars.Series.exp"]], "explode() (polars.series method)": [[1000, "polars.Series.explode"]], "extend() (polars.series method)": [[1001, "polars.Series.extend"]], "extend_constant() (polars.series method)": [[1002, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[1003, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[1004, "polars.Series.fill_null"]], "filter() (polars.series method)": [[1005, "polars.Series.filter"]], "flags (polars.series attribute)": [[1006, "polars.Series.flags"]], "floor() (polars.series method)": [[1007, "polars.Series.floor"]], "gather() (polars.series method)": [[1008, "polars.Series.gather"]], "gather_every() (polars.series method)": [[1009, "polars.Series.gather_every"]], "get_chunks() (polars.series method)": [[1010, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[1011, "polars.Series.has_validity"]], "hash() (polars.series method)": [[1012, "polars.Series.hash"]], "head() (polars.series method)": [[1013, "polars.Series.head"]], "hist() (polars.series method)": [[1014, "polars.Series.hist"]], "implode() (polars.series method)": [[1015, "polars.Series.implode"]], "inner_dtype (polars.series attribute)": [[1016, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[1017, "polars.Series.interpolate"]], "is_between() (polars.series method)": [[1018, "polars.Series.is_between"]], "is_boolean() (polars.series method)": [[1019, "polars.Series.is_boolean"]], "is_duplicated() (polars.series method)": [[1020, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[1021, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[1022, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[1023, "polars.Series.is_first"]], "is_first_distinct() (polars.series method)": [[1024, "polars.Series.is_first_distinct"]], "is_float() (polars.series method)": [[1025, "polars.Series.is_float"]], "is_in() (polars.series method)": [[1026, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[1027, "polars.Series.is_infinite"]], "is_integer() (polars.series method)": [[1028, "polars.Series.is_integer"]], "is_last() (polars.series method)": [[1029, "polars.Series.is_last"]], "is_last_distinct() (polars.series method)": [[1030, "polars.Series.is_last_distinct"]], "is_nan() (polars.series method)": [[1031, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[1032, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[1033, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[1034, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[1035, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[1036, "polars.Series.is_sorted"]], "is_temporal() (polars.series method)": [[1037, "polars.Series.is_temporal"]], "is_unique() (polars.series method)": [[1038, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[1039, "polars.Series.is_utf8"]], "item() (polars.series method)": [[1040, "polars.Series.item"]], "kurtosis() (polars.series method)": [[1041, "polars.Series.kurtosis"]], "len() (polars.series method)": [[1042, "polars.Series.len"]], "limit() (polars.series method)": [[1043, "polars.Series.limit"]], "list (polars.series attribute)": [[1044, "polars.Series.list"]], "all() (polars.series.list method)": [[1045, "polars.Series.list.all"]], "any() (polars.series.list method)": [[1046, "polars.Series.list.any"]], "arg_max() (polars.series.list method)": [[1047, "polars.Series.list.arg_max"]], "arg_min() (polars.series.list method)": [[1048, "polars.Series.list.arg_min"]], "concat() (polars.series.list method)": [[1049, "polars.Series.list.concat"]], "contains() (polars.series.list method)": [[1050, "polars.Series.list.contains"]], "count_match() (polars.series.list method)": [[1051, "polars.Series.list.count_match"]], "count_matches() (polars.series.list method)": [[1052, "polars.Series.list.count_matches"]], "diff() (polars.series.list method)": [[1053, "polars.Series.list.diff"]], "drop_nulls() (polars.series.list method)": [[1054, "polars.Series.list.drop_nulls"]], "eval() (polars.series.list method)": [[1055, "polars.Series.list.eval"]], "explode() (polars.series.list method)": [[1056, "polars.Series.list.explode"]], "first() (polars.series.list method)": [[1057, "polars.Series.list.first"]], "gather() (polars.series.list method)": [[1058, "polars.Series.list.gather"]], "get() (polars.series.list method)": [[1059, "polars.Series.list.get"]], "head() (polars.series.list method)": [[1060, "polars.Series.list.head"]], "join() (polars.series.list method)": [[1061, "polars.Series.list.join"]], "last() (polars.series.list method)": [[1062, "polars.Series.list.last"]], "len() (polars.series.list method)": [[1063, "polars.Series.list.len"]], "lengths() (polars.series.list method)": [[1064, "polars.Series.list.lengths"]], "max() (polars.series.list method)": [[1065, "polars.Series.list.max"]], "mean() (polars.series.list method)": [[1066, "polars.Series.list.mean"]], "min() (polars.series.list method)": [[1067, "polars.Series.list.min"]], "reverse() (polars.series.list method)": [[1068, "polars.Series.list.reverse"]], "sample() (polars.series.list method)": [[1069, "polars.Series.list.sample"]], "set_difference() (polars.series.list method)": [[1070, "polars.Series.list.set_difference"]], "set_intersection() (polars.series.list method)": [[1071, "polars.Series.list.set_intersection"]], "set_symmetric_difference() (polars.series.list method)": [[1072, "polars.Series.list.set_symmetric_difference"]], "set_union() (polars.series.list method)": [[1073, "polars.Series.list.set_union"]], "shift() (polars.series.list method)": [[1074, "polars.Series.list.shift"]], "slice() (polars.series.list method)": [[1075, "polars.Series.list.slice"]], "sort() (polars.series.list method)": [[1076, "polars.Series.list.sort"]], "sum() (polars.series.list method)": [[1077, "polars.Series.list.sum"]], "tail() (polars.series.list method)": [[1078, "polars.Series.list.tail"]], "take() (polars.series.list method)": [[1079, "polars.Series.list.take"]], "to_array() (polars.series.list method)": [[1080, "polars.Series.list.to_array"]], "to_struct() (polars.series.list method)": [[1081, "polars.Series.list.to_struct"]], "unique() (polars.series.list method)": [[1082, "polars.Series.list.unique"]], "log() (polars.series method)": [[1083, "polars.Series.log"]], "log10() (polars.series method)": [[1084, "polars.Series.log10"]], "log1p() (polars.series method)": [[1085, "polars.Series.log1p"]], "lower_bound() (polars.series method)": [[1086, "polars.Series.lower_bound"]], "map_dict() (polars.series method)": [[1087, "polars.Series.map_dict"]], "map_elements() (polars.series method)": [[1088, "polars.Series.map_elements"]], "max() (polars.series method)": [[1089, "polars.Series.max"]], "mean() (polars.series method)": [[1090, "polars.Series.mean"]], "median() (polars.series method)": [[1091, "polars.Series.median"]], "min() (polars.series method)": [[1092, "polars.Series.min"]], "mode() (polars.series method)": [[1093, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[1094, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[1095, "polars.Series.n_unique"]], "name (polars.series attribute)": [[1096, "polars.Series.name"]], "nan_max() (polars.series method)": [[1097, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[1098, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[1099, "polars.Series.new_from_index"]], "not_() (polars.series method)": [[1100, "polars.Series.not_"]], "null_count() (polars.series method)": [[1101, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[1102, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[1103, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[1104, "polars.Series.peak_min"]], "plot (polars.series attribute)": [[1105, "polars.Series.plot"]], "product() (polars.series method)": [[1106, "polars.Series.product"]], "qcut() (polars.series method)": [[1107, "polars.Series.qcut"]], "quantile() (polars.series method)": [[1108, "polars.Series.quantile"]], "rank() (polars.series method)": [[1109, "polars.Series.rank"]], "rechunk() (polars.series method)": [[1110, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[1111, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[1112, "polars.Series.rename"]], "replace() (polars.series method)": [[1113, "polars.Series.replace"]], "reshape() (polars.series method)": [[1114, "polars.Series.reshape"]], "reverse() (polars.series method)": [[1115, "polars.Series.reverse"]], "rle() (polars.series method)": [[1116, "polars.Series.rle"]], "rle_id() (polars.series method)": [[1117, "polars.Series.rle_id"]], "rolling_apply() (polars.series method)": [[1118, "polars.Series.rolling_apply"]], "rolling_map() (polars.series method)": [[1119, "polars.Series.rolling_map"]], "rolling_max() (polars.series method)": [[1120, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[1121, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[1122, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[1123, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[1124, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[1125, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[1126, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[1127, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[1128, "polars.Series.rolling_var"]], "round() (polars.series method)": [[1129, "polars.Series.round"]], "round_sig_figs() (polars.series method)": [[1130, "polars.Series.round_sig_figs"]], "sample() (polars.series method)": [[1131, "polars.Series.sample"]], "scatter() (polars.series method)": [[1132, "polars.Series.scatter"]], "search_sorted() (polars.series method)": [[1133, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[1134, "polars.Series.series_equal"]], "set() (polars.series method)": [[1135, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[1136, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[1137, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[1138, "polars.Series.shape"]], "shift() (polars.series method)": [[1139, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[1140, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[1141, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[1142, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[1143, "polars.Series.shuffle"]], "sign() (polars.series method)": [[1144, "polars.Series.sign"]], "sin() (polars.series method)": [[1145, "polars.Series.sin"]], "sinh() (polars.series method)": [[1146, "polars.Series.sinh"]], "skew() (polars.series method)": [[1147, "polars.Series.skew"]], "slice() (polars.series method)": [[1148, "polars.Series.slice"]], "sort() (polars.series method)": [[1149, "polars.Series.sort"]], "sqrt() (polars.series method)": [[1150, "polars.Series.sqrt"]], "std() (polars.series method)": [[1151, "polars.Series.std"]], "str (polars.series attribute)": [[1152, "polars.Series.str"]], "concat() (polars.series.str method)": [[1153, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[1154, "polars.Series.str.contains"]], "contains_any() (polars.series.str method)": [[1155, "polars.Series.str.contains_any"]], "count_match() (polars.series.str method)": [[1156, "polars.Series.str.count_match"]], "count_matches() (polars.series.str method)": [[1157, "polars.Series.str.count_matches"]], "decode() (polars.series.str method)": [[1158, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[1159, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[1160, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[1161, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[1162, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[1163, "polars.Series.str.extract_all"]], "extract_groups() (polars.series.str method)": [[1164, "polars.Series.str.extract_groups"]], "json_decode() (polars.series.str method)": [[1165, "polars.Series.str.json_decode"]], "json_extract() (polars.series.str method)": [[1166, "polars.Series.str.json_extract"]], "json_path_match() (polars.series.str method)": [[1167, "polars.Series.str.json_path_match"]], "len_bytes() (polars.series.str method)": [[1168, "polars.Series.str.len_bytes"]], "len_chars() (polars.series.str method)": [[1169, "polars.Series.str.len_chars"]], "lengths() (polars.series.str method)": [[1170, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[1171, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[1172, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[1173, "polars.Series.str.n_chars"]], "pad_end() (polars.series.str method)": [[1174, "polars.Series.str.pad_end"]], "pad_start() (polars.series.str method)": [[1175, "polars.Series.str.pad_start"]], "parse_int() (polars.series.str method)": [[1176, "polars.Series.str.parse_int"]], "replace() (polars.series.str method)": [[1177, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[1178, "polars.Series.str.replace_all"]], "replace_many() (polars.series.str method)": [[1179, "polars.Series.str.replace_many"]], "reverse() (polars.series.str method)": [[1180, "polars.Series.str.reverse"]], "rjust() (polars.series.str method)": [[1181, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[1182, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[1183, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[1184, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[1185, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[1186, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[1187, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[1188, "polars.Series.str.strip"]], "strip_chars() (polars.series.str method)": [[1189, "polars.Series.str.strip_chars"]], "strip_chars_end() (polars.series.str method)": [[1190, "polars.Series.str.strip_chars_end"]], "strip_chars_start() (polars.series.str method)": [[1191, "polars.Series.str.strip_chars_start"]], "strip_prefix() (polars.series.str method)": [[1192, "polars.Series.str.strip_prefix"]], "strip_suffix() (polars.series.str method)": [[1193, "polars.Series.str.strip_suffix"]], "strptime() (polars.series.str method)": [[1194, "polars.Series.str.strptime"]], "to_date() (polars.series.str method)": [[1195, "polars.Series.str.to_date"]], "to_datetime() (polars.series.str method)": [[1196, "polars.Series.str.to_datetime"]], "to_decimal() (polars.series.str method)": [[1197, "polars.Series.str.to_decimal"]], "to_integer() (polars.series.str method)": [[1198, "polars.Series.str.to_integer"]], "to_lowercase() (polars.series.str method)": [[1199, "polars.Series.str.to_lowercase"]], "to_time() (polars.series.str method)": [[1200, "polars.Series.str.to_time"]], "to_titlecase() (polars.series.str method)": [[1201, "polars.Series.str.to_titlecase"]], "to_uppercase() (polars.series.str method)": [[1202, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[1203, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[1204, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[1205, "polars.Series.struct.fields"]], "json_encode() (polars.series.struct method)": [[1206, "polars.Series.struct.json_encode"]], "rename_fields() (polars.series.struct method)": [[1207, "polars.Series.struct.rename_fields"]], "schema (polars.series.struct attribute)": [[1208, "polars.Series.struct.schema"]], "unnest() (polars.series.struct method)": [[1209, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[1210, "polars.Series.sum"]], "tail() (polars.series method)": [[1211, "polars.Series.tail"]], "take() (polars.series method)": [[1212, "polars.Series.take"]], "take_every() (polars.series method)": [[1213, "polars.Series.take_every"]], "tan() (polars.series method)": [[1214, "polars.Series.tan"]], "tanh() (polars.series method)": [[1215, "polars.Series.tanh"]], "to_arrow() (polars.series method)": [[1216, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[1217, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[1218, "polars.Series.to_frame"]], "to_init_repr() (polars.series method)": [[1219, "polars.Series.to_init_repr"]], "to_list() (polars.series method)": [[1220, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[1221, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[1222, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[1223, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[1224, "polars.Series.top_k"]], "unique() (polars.series method)": [[1225, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[1226, "polars.Series.unique_counts"]], "upper_bound() (polars.series method)": [[1227, "polars.Series.upper_bound"]], "value_counts() (polars.series method)": [[1228, "polars.Series.value_counts"]], "var() (polars.series method)": [[1229, "polars.Series.var"]], "view() (polars.series method)": [[1230, "polars.Series.view"]], "zip_with() (polars.series method)": [[1231, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[1248, "polars.SQLContext"]], "__enter__() (polars.sqlcontext method)": [[1248, "polars.SQLContext.__enter__"]], "__exit__() (polars.sqlcontext method)": [[1248, "polars.SQLContext.__exit__"]], "__init__() (polars.sqlcontext method)": [[1248, "polars.SQLContext.__init__"]]}})